// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
function Isolate() {}
init();

var $$ = {};
var $ = Isolate.$isolateProperties;
$$.ListIterator = {"": ["i", "list"],
 "super": "Object",
 get$hasNext: function() {
  return this.i < this.list.length;
},
 next$0: function() {
  if (this.get$hasNext() !== true)
    throw $.$$throw($.StateError$("No more elements"));
  var value = this.list[this.i];
  this.i = this.i + 1;
  return value;
}
};

$$.JSInvocationMirror = {"": ["memberName>", "_internalName", "_kind", "_liblib0$_arguments", "_namedArgumentNames", "_namedIndices"],
 "super": "Object",
 get$isGetter: function() {
  return $.eq(this._kind, 1);
},
 get$isAccessor: function() {
  return !$.eqB(this._kind, 0);
},
 get$positionalArguments: function() {
  var list, t1, t3, t4, argumentCount, index, t2;
  if (this.get$isGetter() === true)
    return;
  list = [];
  t1 = this._liblib0$_arguments;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this.get$positionalArguments$bailout(1, t1, list);
  t3 = t1.length;
  t4 = this._namedArgumentNames;
  t4 = $.getInterceptor(t4).get$length(t4);
  if (typeof t4 !== 'number')
    throw $.iae(t4);
  argumentCount = t3 - t4;
  for (index = 0; index < argumentCount; ++index) {
    t2 = $.getInterceptor(list);
    if (index >= t1.length)
      throw $.ioore(index);
    t2.add$1(list, t1[index]);
  }
  return list;
},
 get$positionalArguments$bailout: function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      list = env1;
      t1 = env0;
      break;
    case 2:
      argumentCount = env2;
      list = env1;
      t1 = env0;
      break;
  }
  switch (state0) {
    case 0:
      if (this.get$isGetter() === true)
        return;
      list = [];
      t1 = this._liblib0$_arguments;
    case 1:
      state0 = 0;
      t3 = $.getInterceptor(t1).get$length(t1);
      t4 = this._namedArgumentNames;
      argumentCount = $.sub(t3, $.getInterceptor(t4).get$length(t4));
    case 2:
      var list, t1, t3, t4, argumentCount, index;
      state0 = 0;
      for (index = 0; $.ltB(index, argumentCount); ++index)
        $.getInterceptor(list).add$1(list, $.index(t1, index));
      return list;
  }
},
 get$namedArguments: function() {
  var map, t2, namedArgumentCount, t4, t6, namedArgumentsStartIndex, t1, i, t3, t5;
  if (this.get$isAccessor() === true)
    return;
  map = $.makeLiteralMap([]);
  if (typeof map !== 'object' || map === null || (map.constructor !== Array || !!map.immutable$list) && !map.is$JavaScriptIndexingBehavior())
    return this.get$namedArguments$bailout(1, map);
  t2 = this._namedArgumentNames;
  if (typeof t2 !== 'string' && (typeof t2 !== 'object' || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior()))
    return this.get$namedArguments$bailout(2, t2, map);
  namedArgumentCount = t2.length;
  t4 = this._liblib0$_arguments;
  if (typeof t4 !== 'string' && (typeof t4 !== 'object' || t4 === null || t4.constructor !== Array && !t4.is$JavaScriptIndexingBehavior()))
    return this.get$namedArguments$bailout(4, t2, t4, map, namedArgumentCount);
  t6 = t4.length;
  namedArgumentsStartIndex = t6 - namedArgumentCount;
  for (t1 = map.length, i = 0; i < namedArgumentCount; ++i) {
    t3 = t2[i];
    t5 = namedArgumentsStartIndex + i;
    if (t5 < 0 || t5 >= t6)
      throw $.ioore(t5);
    t5 = t4[t5];
    if (t3 !== (t3 | 0))
      throw $.iae(t3);
    if (t3 < 0 || t3 >= t1)
      throw $.ioore(t3);
    map[t3] = t5;
  }
  return map;
},
 get$namedArguments$bailout: function(state0, env0, env1, env2, env3, env4) {
  switch (state0) {
    case 1:
      map = env0;
      break;
    case 2:
      map = env1;
      t2 = env0;
      break;
    case 3:
      namedArgumentCount = env2;
      map = env1;
      t2 = env0;
      break;
    case 4:
      namedArgumentCount = env3;
      map = env2;
      t5 = env1;
      t2 = env0;
      break;
    case 5:
      namedArgumentCount = env4;
      map = env3;
      namedArgumentsStartIndex = env2;
      t5 = env1;
      t2 = env0;
      break;
  }
  switch (state0) {
    case 0:
      if (this.get$isAccessor() === true)
        return;
      map = $.makeLiteralMap([]);
    case 1:
      state0 = 0;
      t2 = this._namedArgumentNames;
    case 2:
      state0 = 0;
      namedArgumentCount = $.getInterceptor(t2).get$length(t2);
    case 3:
      state0 = 0;
      t5 = this._liblib0$_arguments;
    case 4:
      state0 = 0;
      namedArgumentsStartIndex = $.sub($.getInterceptor(t5).get$length(t5), namedArgumentCount);
    case 5:
      var map, t2, namedArgumentCount, t5, namedArgumentsStartIndex, i;
      state0 = 0;
      for (i = 0; $.ltB(i, namedArgumentCount); ++i)
        $.indexSet(map, $.index(t2, i), $.index(t5, $.add(namedArgumentsStartIndex, i)));
      return map;
  }
}
};

$$.StackTrace = {"": ["stack"],
 "super": "Object",
 toString$0: function() {
  var t1 = this.stack;
  return !(t1 == null) ? t1 : "";
}
};

$$.Closure = {
 "super": "Object",
 toString$0: function() {
  return "Closure";
}
};

$$.Creates = {"": ["types"],
 "super": "Object"
};

$$.Returns = {"": ["types"],
 "super": "Object"
};

$$.TypeImpl = {"": ["typeName"],
 "super": "Object",
 toString$0: function() {
  return this.typeName;
},
 get$hashCode: function() {
  var t1 = this.typeName;
  return $.getInterceptor(t1).get$hashCode(t1);
},
 operator$eq$1: function(other) {
  if (!(typeof other === 'object' && other !== null && !!other.is$TypeImpl))
    return false;
  return $.eq(this.typeName, other.typeName);
},
 is$TypeImpl: true
};

$$.ConstantMap = {"": ["length>", "_jsObject", "_liblib0$_keys"],
 "super": "Object",
 containsKey$1: function(key) {
  if ($.eqB(key, "__proto__"))
    return false;
  return this._jsObject.hasOwnProperty(key);
},
 operator$index$1: function(key) {
  if (this.containsKey$1(key) !== true)
    return;
  return this._jsObject[key];
},
 forEach$1: function(f) {
  var t1 = this._liblib0$_keys;
  $.getInterceptor(t1).forEach$1(t1, new $.ConstantMap_forEach_anon(this, f));
},
 get$keys: function() {
  return this._liblib0$_keys;
},
 get$values: function() {
  var result, t1;
  result = [];
  t1 = this._liblib0$_keys;
  $.getInterceptor(t1).forEach$1(t1, new $.ConstantMap_values_anon(result, this));
  return result;
},
 get$isEmpty: function() {
  return $.eq(this.length, 0);
},
 toString$0: function() {
  return $.Maps_mapToString(this);
},
 _throwUnmodifiable$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot modify unmodifiable Map"));
},
 oprator$indexSet$2: function(key, val) {
  return this._throwUnmodifiable$0();
},
 remove$1: function(key) {
  return this._throwUnmodifiable$0();
},
 clear$0: function() {
  return this._throwUnmodifiable$0();
},
 is$Map: function() { return true; }
};

$$.MetaInfo = {"": ["_tag>", "_tags", "_set>"],
 "super": "Object"
};

$$.JSSyntaxRegExp = {"": ["_liblib0$_pattern", "_multiLine", "_ignoreCase"],
 "super": "Object",
 firstMatch$1: function(str) {
  var m, matchStart, t1, matchEnd;
  m = $.regExpExec(this, $.checkString(str));
  if (m == null)
    return;
  matchStart = m.index;
  t1 = $.index(m, 0);
  t1 = $.getInterceptor(t1).get$length(t1);
  if (typeof t1 !== 'number')
    throw $.iae(t1);
  matchEnd = matchStart + t1;
  return $._MatchImplementation$(this.get$pattern(), str, matchStart, matchEnd, m);
},
 hasMatch$1: function(str) {
  return $.regExpTest(this, $.checkString(str));
},
 allMatches$1: function(str) {
  $.checkString(str);
  return $._AllMatchesIterable$(this, str);
},
 get$pattern: function() {
  return this._liblib0$_pattern;
},
 get$multiLine: function() {
  return this._multiLine;
},
 get$ignoreCase: function() {
  return this._ignoreCase;
},
 is$JSSyntaxRegExp: true,
 is$RegExp: true
};

$$._MatchImplementation = {"": ["pattern>", "str", "start", "end", "_groups"],
 "super": "Object",
 start$1: function(arg0) { return this.start.call$1(arg0); },
 start$3: function(arg0, arg1, arg2) { return this.start.call$3(arg0, arg1, arg2); },
 operator$index$1: function(index) {
  return $.index(this._groups, index);
}
};

$$._AllMatchesIterable = {"": ["_re", "_str"],
 "super": "Object",
 iterator$0: function() {
  return $._AllMatchesIterator$(this._re, this._str);
}
};

$$._AllMatchesIterator = {"": ["_re", "_str", "_liblib0$_next=", "_done"],
 "super": "Object",
 next$0: function() {
  if (this.get$hasNext() !== true)
    throw $.$$throw($.StateError$("No more elements"));
  var next = this._liblib0$_next;
  this._liblib0$_next = null;
  return next;
},
 get$hasNext: function() {
  if (this._done)
    return false;
  else if (!(this._liblib0$_next == null))
    return true;
  this._liblib0$_next = this._re.firstMatch$1(this._str);
  if (this._liblib0$_next == null) {
    this._done = true;
    return false;
  } else
    return true;
}
};

$$.StringMatch = {"": ["start", "str", "pattern>"],
 "super": "Object",
 operator$index$1: function(g) {
  return this.group$1(g);
},
 group$1: function(group_) {
  if (!$.eqB(group_, 0))
    throw $.$$throw($.RangeError$value(group_));
  return this.pattern;
},
 start$1: function(arg0) { return this.start.call$1(arg0); },
 start$3: function(arg0, arg1, arg2) { return this.start.call$3(arg0, arg1, arg2); }
};

$$.NullThrownError = {
 "super": "Object",
 toString$0: function() {
  return "Throw of null.";
}
};

$$.ArgumentError = {"": ["message>"],
 "super": "Object",
 toString$0: function() {
  var t1 = this.message;
  if (!(t1 == null))
    return "Illegal argument(s): " + $.S(t1);
  return "Illegal argument(s)";
}
};

$$.RangeError = {"": ["message"],
 "super": "ArgumentError",
 toString$0: function() {
  return "RangeError: " + $.S(this.message);
}
};

$$.NoSuchMethodError = {"": ["_receiver", "_memberName", "_arguments", "_namedArguments", "_existingArgumentNames"],
 "super": "Object",
 toString$0: function() {
  var t1, t2, t3, t4, t5, actualParameters, i, formalParameters;
  t1 = {};
  t1.sb_1 = $.StringBuffer_StringBuffer("");
  t1.i_2 = 0;
  t2 = this._arguments;
  if (typeof t2 !== 'string' && (typeof t2 !== 'object' || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior()))
    return this.toString$0$bailout(1, t1, t2);
  for (; $.ltB(t1.i_2, t2.length); t1.i_2 = $.add(t1.i_2, 1)) {
    if ($.gtB(t1.i_2, 0)) {
      t3 = t1.sb_1;
      $.getInterceptor(t3).add$1(t3, ", ");
    }
    t3 = t1.sb_1;
    t4 = $.getInterceptor(t3);
    t5 = t1.i_2;
    if (t5 !== (t5 | 0))
      throw $.iae(t5);
    if (t5 < 0 || t5 >= t2.length)
      throw $.ioore(t5);
    t4.add$1(t3, $.Error_safeToString(t2[t5]));
  }
  t2 = this._namedArguments;
  if (!(t2 == null))
    $.getInterceptor(t2).forEach$1(t2, new $.NoSuchMethodError_toString_anon(t1));
  t2 = this._existingArgumentNames;
  if (typeof t2 !== 'string' && (typeof t2 !== 'object' || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior()))
    return this.toString$0$bailout(2, t1, t2);
  t3 = t1.sb_1;
  actualParameters = $.getInterceptor(t3).toString$0(t3);
  t1.sb_1 = $.StringBuffer_StringBuffer("");
  for (i = 0; i < t2.length; ++i) {
    if (i > 0) {
      t3 = t1.sb_1;
      $.getInterceptor(t3).add$1(t3, ", ");
    }
    t3 = t1.sb_1;
    t4 = $.getInterceptor(t3);
    if (i >= t2.length)
      throw $.ioore(i);
    t4.add$1(t3, t2[i]);
  }
  t1 = t1.sb_1;
  formalParameters = $.getInterceptor(t1).toString$0(t1);
  t1 = this._memberName;
  return "NoSuchMethodError: incorrect number of arguments passed to method named '" + $.S(t1) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Tried calling: " + $.S(t1) + "(" + $.S(actualParameters) + ")\n" + "Found: " + $.S(t1) + "(" + $.S(formalParameters) + ")";
},
 toString$0$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      t2 = env1;
      t1 = env0;
      break;
    case 2:
      t2 = env1;
      t1 = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = {};
      t1.sb_1 = $.StringBuffer_StringBuffer("");
      t1.i_2 = 0;
      t2 = this._arguments;
    case 1:
      state0 = 0;
      if (!(t2 == null))
        for (; $.ltB(t1.i_2, $.getInterceptor(t2).get$length(t2)); t1.i_2 = $.add(t1.i_2, 1)) {
          if ($.gtB(t1.i_2, 0)) {
            t3 = t1.sb_1;
            $.getInterceptor(t3).add$1(t3, ", ");
          }
          t3 = t1.sb_1;
          $.getInterceptor(t3).add$1(t3, $.Error_safeToString($.index(t2, t1.i_2)));
        }
      t2 = this._namedArguments;
      if (!(t2 == null))
        $.getInterceptor(t2).forEach$1(t2, new $.NoSuchMethodError_toString_anon(t1));
      t2 = this._existingArgumentNames;
    case 2:
      var t1, t2, t3, actualParameters, i, formalParameters;
      state0 = 0;
      if (t2 == null)
        return "NoSuchMethodError : method not found: '" + $.S(this._memberName) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Arguments: [" + $.S(t1.sb_1) + "]";
      else {
        t3 = t1.sb_1;
        actualParameters = $.getInterceptor(t3).toString$0(t3);
        t1.sb_1 = $.StringBuffer_StringBuffer("");
        for (i = 0; $.ltB(i, $.getInterceptor(t2).get$length(t2)); ++i) {
          if (i > 0) {
            t3 = t1.sb_1;
            $.getInterceptor(t3).add$1(t3, ", ");
          }
          t3 = t1.sb_1;
          $.getInterceptor(t3).add$1(t3, $.index(t2, i));
        }
        t1 = t1.sb_1;
        formalParameters = $.getInterceptor(t1).toString$0(t1);
        t1 = this._memberName;
        return "NoSuchMethodError: incorrect number of arguments passed to method named '" + $.S(t1) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Tried calling: " + $.S(t1) + "(" + $.S(actualParameters) + ")\n" + "Found: " + $.S(t1) + "(" + $.S(formalParameters) + ")";
      }
  }
}
};

$$.UnsupportedError = {"": ["message>"],
 "super": "Object",
 toString$0: function() {
  return "Unsupported operation: " + $.S(this.get$message());
}
};

$$.UnimplementedError = {"": ["message>"],
 "super": "Object",
 toString$0: function() {
  var t1 = this.message;
  return !(t1 == null) ? "UnimplementedError: " + $.S(t1) : "UnimplementedError";
}
};

$$.StateError = {"": ["message>"],
 "super": "Object",
 toString$0: function() {
  return "Bad state: " + this.message;
}
};

$$.StackOverflowError = {
 "super": "Object",
 toString$0: function() {
  return "Stack Overflow";
}
};

$$._ExceptionImplementation = {"": ["message>"],
 "super": "Object",
 toString$0: function() {
  var t1 = this.message;
  if (t1 == null)
    return "Exception";
  return "Exception: " + $.S(t1);
},
 is$Exception: true
};

$$.FormatException = {"": ["message>"],
 "super": "Object",
 toString$0: function() {
  return "FormatException: " + $.S(this.message);
},
 is$Exception: true
};

$$.IllegalJSRegExpException = {"": ["_pattern", "_errmsg"],
 "super": "Object",
 toString$0: function() {
  return "IllegalJSRegExpException: '" + $.S(this._pattern) + "' '" + this._errmsg + "'";
},
 is$Exception: true
};

$$.RuntimeError = {"": ["message>"],
 "super": "Object",
 toString$0: function() {
  return "RuntimeError: " + this.message;
},
 is$Exception: true
};

$$.FutureNotCompleteException = {
 "super": "Object",
 toString$0: function() {
  return "Exception: future has not been completed";
},
 is$Exception: true
};

$$.FutureAlreadyCompleteException = {
 "super": "Object",
 toString$0: function() {
  return "Exception: future already completed";
},
 is$Exception: true
};

$$.FutureUnhandledException = {"": ["source", "stackTrace>"],
 "super": "Object",
 toString$0: function() {
  var t1, t2, t3;
  t1 = this.source;
  t1 = $.getInterceptor(t1).toString$0(t1);
  t2 = "FutureUnhandledException: exception while executing Future\n  " + $.S($.getInterceptor(t1).replaceAll$2(t1, "\n", "\n  ")) + "\n" + "original stack trace:\n  ";
  t3 = this.stackTrace;
  t3 = $.getInterceptor(t3).toString$0(t3);
  return t2 + $.S($.getInterceptor(t3).replaceAll$2(t3, "\n", "\n  "));
},
 is$Exception: true
};

$$._FutureImpl = {"": ["_isComplete", "_value", "_exception", "_stackTrace", "_exceptionHandled", "_throwOnException", "_successListeners", "_exceptionHandlers", "_completionListeners"],
 "super": "Object",
 get$value: function() {
  if (this.get$isComplete() !== true)
    throw $.$$throw($.FutureNotCompleteException$());
  var t1 = this._exception;
  if (!(t1 == null))
    throw $.$$throw($.FutureUnhandledException$(t1, this.get$stackTrace()));
  return this._value;
},
 get$exception: function() {
  if (this.get$isComplete() !== true)
    throw $.$$throw($.FutureNotCompleteException$());
  return this._exception;
},
 get$stackTrace: function() {
  if (this.get$isComplete() !== true)
    throw $.$$throw($.FutureNotCompleteException$());
  return this._stackTrace;
},
 get$isComplete: function() {
  return this._isComplete;
},
 get$hasValue: function() {
  return this.get$isComplete() === true && this._exception == null;
},
 then$1: function(onSuccess) {
  var t1;
  if (this.get$hasValue() === true)
    onSuccess.call$1(this.get$value());
  else if (this.get$isComplete() !== true) {
    this._throwOnException = true;
    t1 = this._successListeners;
    $.getInterceptor(t1).add$1(t1, onSuccess);
  } else if (this._exceptionHandled !== true)
    throw $.$$throw($.FutureUnhandledException$(this._exception, this.get$stackTrace()));
},
 handleException$1: function(onException) {
  var t1;
  if (this._exceptionHandled === true)
    return;
  if (this._isComplete) {
    t1 = this._exception;
    if (!(t1 == null))
      this._exceptionHandled = onException.call$1(t1);
  } else {
    t1 = this._exceptionHandlers;
    $.getInterceptor(t1).add$1(t1, onException);
  }
},
 _complete$0: function(exception) {
  var t1, handler, listener, listener0;
  this._isComplete = true;
  try {
    if (!(this._exception == null))
      for (t1 = this._exceptionHandlers, t1 = $.getInterceptor(t1).iterator$0(t1); t1.get$hasNext() === true;) {
        handler = t1.next$0();
        if ($.eqB(handler.call$1(this._exception), true)) {
          this._exceptionHandled = true;
          break;
        }
      }
    if (this.get$hasValue() === true)
      for (t1 = this._successListeners, t1 = $.getInterceptor(t1).iterator$0(t1); t1.get$hasNext() === true;) {
        listener = t1.next$0();
        listener.call$1(this.get$value());
      }
    else if (this._exceptionHandled !== true && this._throwOnException)
      throw $.$$throw($.FutureUnhandledException$(this._exception, this.get$stackTrace()));
  } finally {
    for (t1 = this._completionListeners, t1 = $.getInterceptor(t1).iterator$0(t1); t1.get$hasNext() === true;) {
      listener0 = t1.next$0();
      try {
        listener0.call$1(this);
      } catch (exception) {
        $.unwrapException(exception);
      }

    }
  }
},
 _setValue$1: function(value) {
  if (this._isComplete)
    throw $.$$throw($.FutureAlreadyCompleteException$());
  this._value = value;
  this._complete$0();
},
 _setException$2: function(exception, stackTrace) {
  if (exception == null)
    throw $.$$throw($.ArgumentError$(null));
  if (this._isComplete)
    throw $.$$throw($.FutureAlreadyCompleteException$());
  this._exception = exception;
  this._stackTrace = stackTrace;
  this._complete$0();
}
};

$$._CompleterImpl = {"": ["_futureImpl"],
 "super": "Object",
 get$future: function() {
  return this._futureImpl;
},
 complete$1: function(value) {
  this._futureImpl._setValue$1(value);
},
 completeException$2: function(exception, stackTrace) {
  this._futureImpl._setException$2(exception, stackTrace);
},
 completeException$1: function(exception) {
  return this.completeException$2(exception,null)
}
};

$$.List = {
 "super": "Object",
 is$List: function() { return true; },
 is$Collection: function() { return true; }
};

$$._HashMapImpl = {"": ["_keys", "_values", "_loadLimit", "_numberOfEntries", "_numberOfDeleted"],
 "super": "Object",
 _probeForAdding$1: function(key) {
  var t1, t3, hash, numberOfProbes, insertionIndex, existingKey, numberOfProbes0;
  if (key == null)
    throw $.$$throw($.ArgumentError$(null));
  t1 = $.getInterceptor(key).get$hashCode(key);
  if (t1 !== (t1 | 0))
    return this._probeForAdding$1$bailout(1, key, t1);
  t3 = this._keys;
  t3 = $.getInterceptor(t3).get$length(t3);
  if (t3 !== (t3 | 0))
    return this._probeForAdding$1$bailout(2, key, t3, t1);
  hash = (t1 & t3 - 1) >>> 0;
  for (numberOfProbes = 1, insertionIndex = -1; true; numberOfProbes = numberOfProbes0) {
    t1 = this._keys;
    if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
      return this._probeForAdding$1$bailout(3, key, t1, insertionIndex, hash, numberOfProbes);
    if (hash < 0 || hash >= t1.length)
      throw $.ioore(hash);
    existingKey = t1[hash];
    if (existingKey == null) {
      if (insertionIndex < 0)
        return hash;
      return insertionIndex;
    } else if ($.eqB(existingKey, key))
      return hash;
    else if (insertionIndex < 0 && existingKey === $.CTC8)
      insertionIndex = hash;
    numberOfProbes0 = numberOfProbes + 1;
    t1 = this._keys;
    hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, $.getInterceptor(t1).get$length(t1));
    if (hash !== (hash | 0))
      return this._probeForAdding$1$bailout(4, key, insertionIndex, hash, numberOfProbes0);
  }
},
 _probeForAdding$1$bailout: function(state0, env0, env1, env2, env3, env4) {
  switch (state0) {
    case 1:
      t1 = env1;
      key = env0;
      break;
    case 2:
      t1 = env2;
      t3 = env1;
      key = env0;
      break;
    case 3:
      numberOfProbes = env4;
      hash = env3;
      insertionIndex = env2;
      t1 = env1;
      key = env0;
      break;
    case 4:
      numberOfProbes0 = env3;
      hash = env2;
      insertionIndex = env1;
      key = env0;
      break;
  }
  switch (state0) {
    case 0:
      if (key == null)
        throw $.$$throw($.ArgumentError$(null));
      t1 = $.getInterceptor(key).get$hashCode(key);
    case 1:
      state0 = 0;
      t3 = this._keys;
      t3 = $.getInterceptor(t3).get$length(t3);
    case 2:
      state0 = 0;
      hash = $.and(t1, $.sub(t3, 1));
      numberOfProbes = 1;
      insertionIndex = -1;
    default:
      var t1, key, t3, hash, numberOfProbes, insertionIndex, existingKey, numberOfProbes0;
      L0:
        while (true)
          switch (state0) {
            case 0:
              if (!true)
                break L0;
              t1 = this._keys;
            case 3:
              state0 = 0;
              existingKey = $.index(t1, hash);
              if (existingKey == null) {
                if ($.ltB(insertionIndex, 0))
                  return hash;
                return insertionIndex;
              } else if ($.eqB(existingKey, key))
                return hash;
              else if ($.ltB(insertionIndex, 0) && existingKey === $.CTC8)
                insertionIndex = hash;
              numberOfProbes0 = numberOfProbes + 1;
              t1 = this._keys;
              hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, $.getInterceptor(t1).get$length(t1));
            case 4:
              state0 = 0;
              numberOfProbes = numberOfProbes0;
          }
  }
},
 _probeForLookup$1: function(key) {
  var t1, t2, hash, numberOfProbes, existingKey, numberOfProbes0;
  if (key == null)
    throw $.$$throw($.ArgumentError$(null));
  t1 = $.getInterceptor(key).get$hashCode(key);
  t2 = this._keys;
  hash = $.and(t1, $.sub($.getInterceptor(t2).get$length(t2), 1));
  if (hash !== (hash | 0))
    return this._probeForLookup$1$bailout(1, key, hash);
  for (numberOfProbes = 1; true; numberOfProbes = numberOfProbes0) {
    existingKey = $.index(this._keys, hash);
    if (existingKey == null)
      return -1;
    if ($.eqB(existingKey, key))
      return hash;
    numberOfProbes0 = numberOfProbes + 1;
    t1 = this._keys;
    hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, $.getInterceptor(t1).get$length(t1));
  }
},
 _probeForLookup$1$bailout: function(state0, key, hash) {
  var numberOfProbes, existingKey, numberOfProbes0, t1;
  for (numberOfProbes = 1; true; numberOfProbes = numberOfProbes0) {
    existingKey = $.index(this._keys, hash);
    if (existingKey == null)
      return -1;
    if ($.eqB(existingKey, key))
      return hash;
    numberOfProbes0 = numberOfProbes + 1;
    t1 = this._keys;
    hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, $.getInterceptor(t1).get$length(t1));
  }
},
 _ensureCapacity$0: function() {
  var newNumberOfEntries, t1, numberOfFree;
  newNumberOfEntries = $.add(this._numberOfEntries, 1);
  if ($.geB(newNumberOfEntries, this._loadLimit)) {
    t1 = this._keys;
    this._grow$1($.mul($.getInterceptor(t1).get$length(t1), 2));
    return;
  }
  t1 = this._keys;
  numberOfFree = $.sub($.sub($.getInterceptor(t1).get$length(t1), newNumberOfEntries), this._numberOfDeleted);
  if ($.gtB(this._numberOfDeleted, numberOfFree)) {
    t1 = this._keys;
    this._grow$1($.getInterceptor(t1).get$length(t1));
  }
},
 _grow$1: function(newCapacity) {
  var t1, capacity, oldKeys, oldValues, t4, i, key, value, newIndex;
  t1 = this._keys;
  capacity = $.getInterceptor(t1).get$length(t1);
  if (typeof capacity !== 'number')
    return this._grow$1$bailout(1, newCapacity, capacity);
  this._loadLimit = $.tdiv($.mul(newCapacity, 3), 4);
  oldKeys = this._keys;
  if (typeof oldKeys !== 'string' && (typeof oldKeys !== 'object' || oldKeys === null || oldKeys.constructor !== Array && !oldKeys.is$JavaScriptIndexingBehavior()))
    return this._grow$1$bailout(2, newCapacity, oldKeys, capacity);
  oldValues = this._values;
  if (typeof oldValues !== 'string' && (typeof oldValues !== 'object' || oldValues === null || oldValues.constructor !== Array && !oldValues.is$JavaScriptIndexingBehavior()))
    return this._grow$1$bailout(3, newCapacity, oldKeys, oldValues, capacity);
  t4 = $.List_List(newCapacity);
  $.setRuntimeTypeInfo(t4, []);
  this._keys = t4;
  t4 = $.List_List(newCapacity, $.getRuntimeTypeInfo(this)[1]);
  $.setRuntimeTypeInfo(t4, [$.getRuntimeTypeInfo(this)[1]]);
  this._values = t4;
  for (i = 0; i < capacity; ++i) {
    if (i >= oldKeys.length)
      throw $.ioore(i);
    key = oldKeys[i];
    if (key == null || key === $.CTC8)
      continue;
    if (i >= oldValues.length)
      throw $.ioore(i);
    value = oldValues[i];
    newIndex = this._probeForAdding$1(key);
    $.indexSet(this._keys, newIndex, key);
    $.indexSet(this._values, newIndex, value);
  }
  this._numberOfDeleted = 0;
},
 _grow$1$bailout: function(state0, env0, env1, env2, env3) {
  switch (state0) {
    case 1:
      capacity = env1;
      newCapacity = env0;
      break;
    case 2:
      capacity = env2;
      oldKeys = env1;
      newCapacity = env0;
      break;
    case 3:
      capacity = env3;
      oldValues = env2;
      oldKeys = env1;
      newCapacity = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = this._keys;
      capacity = $.getInterceptor(t1).get$length(t1);
    case 1:
      state0 = 0;
      this._loadLimit = $.tdiv($.mul(newCapacity, 3), 4);
      oldKeys = this._keys;
    case 2:
      state0 = 0;
      oldValues = this._values;
    case 3:
      var t1, capacity, newCapacity, oldKeys, oldValues, t4, i, key, value, newIndex;
      state0 = 0;
      t4 = $.List_List(newCapacity);
      $.setRuntimeTypeInfo(t4, []);
      this._keys = t4;
      t4 = $.List_List(newCapacity, $.getRuntimeTypeInfo(this)[1]);
      $.setRuntimeTypeInfo(t4, [$.getRuntimeTypeInfo(this)[1]]);
      this._values = t4;
      for (i = 0; $.ltB(i, capacity); ++i) {
        key = $.index(oldKeys, i);
        if (key == null || key === $.CTC8)
          continue;
        value = $.index(oldValues, i);
        newIndex = this._probeForAdding$1(key);
        $.indexSet(this._keys, newIndex, key);
        $.indexSet(this._values, newIndex, value);
      }
      this._numberOfDeleted = 0;
  }
},
 clear$0: function() {
  var t1, length$, i;
  this._numberOfEntries = 0;
  this._numberOfDeleted = 0;
  t1 = this._keys;
  length$ = $.getInterceptor(t1).get$length(t1);
  if (typeof length$ !== 'number')
    return this.clear$0$bailout(1, length$);
  for (i = 0; i < length$; ++i) {
    $.indexSet(this._keys, i, null);
    $.indexSet(this._values, i, null);
  }
},
 clear$0$bailout: function(state0, length$) {
  var i;
  for (i = 0; $.ltB(i, length$); ++i) {
    $.indexSet(this._keys, i, null);
    $.indexSet(this._values, i, null);
  }
},
 oprator$indexSet$2: function(key, value) {
  var index;
  this._ensureCapacity$0();
  index = this._probeForAdding$1(key);
  if ($.index(this._keys, index) == null || $.index(this._keys, index) === $.CTC8)
    this._numberOfEntries = $.add(this._numberOfEntries, 1);
  $.indexSet(this._keys, index, key);
  $.indexSet(this._values, index, value);
},
 operator$index$1: function(key) {
  var index = this._probeForLookup$1(key);
  if ($.ltB(index, 0))
    return;
  return $.index(this._values, index);
},
 remove$1: function(key) {
  var index, value;
  index = this._probeForLookup$1(key);
  if ($.geB(index, 0)) {
    this._numberOfEntries = $.sub(this._numberOfEntries, 1);
    value = $.index(this._values, index);
    $.indexSet(this._values, index, null);
    $.indexSet(this._keys, index, $.CTC8);
    this._numberOfDeleted = $.add(this._numberOfDeleted, 1);
    return value;
  }
  return;
},
 get$isEmpty: function() {
  return $.eq(this._numberOfEntries, 0);
},
 get$length: function() {
  return this._numberOfEntries;
},
 forEach$1: function(f) {
  var t1, length$, i, key;
  t1 = this._keys;
  length$ = $.getInterceptor(t1).get$length(t1);
  if (typeof length$ !== 'number')
    return this.forEach$1$bailout(1, f, length$);
  for (i = 0; i < length$; ++i) {
    key = $.index(this._keys, i);
    if (!(key == null) && !(key === $.CTC8))
      f.call$2(key, $.index(this._values, i));
  }
},
 forEach$1$bailout: function(state0, f, length$) {
  var i, key;
  for (i = 0; $.ltB(i, length$); ++i) {
    key = $.index(this._keys, i);
    if (!(key == null) && !(key === $.CTC8))
      f.call$2(key, $.index(this._values, i));
  }
},
 get$keys: function() {
  var t1, list;
  t1 = {};
  list = $.List_List(this.get$length(), $.getRuntimeTypeInfo(this)[0]);
  $.setRuntimeTypeInfo(list, [$.getRuntimeTypeInfo(this)[0]]);
  t1.i_10 = 0;
  $.getInterceptor(this).forEach$1(this, new $._HashMapImpl_keys_anon(list, t1));
  return list;
},
 get$values: function() {
  var t1, list;
  t1 = {};
  list = $.List_List(this.get$length(), $.getRuntimeTypeInfo(this)[1]);
  $.setRuntimeTypeInfo(list, [$.getRuntimeTypeInfo(this)[1]]);
  t1.i_1 = 0;
  $.getInterceptor(this).forEach$1(this, new $._HashMapImpl_values_anon(t1, list));
  return list;
},
 containsKey$1: function(key) {
  return !$.eqB(this._probeForLookup$1(key), -1);
},
 toString$0: function() {
  return $.Maps_mapToString(this);
},
 _HashMapImpl$0: function() {
  this._numberOfEntries = 0;
  this._numberOfDeleted = 0;
  this._loadLimit = $._HashMapImpl__computeLoadLimit(8);
  var t1 = $.List_List(8);
  $.setRuntimeTypeInfo(t1, []);
  this._keys = t1;
  t1 = $.List_List(8, $.getRuntimeTypeInfo(this)[1]);
  $.setRuntimeTypeInfo(t1, [$.getRuntimeTypeInfo(this)[1]]);
  this._values = t1;
},
 is$Map: function() { return true; }
};

$$._DeletedKeySentinel = {
 "super": "Object"
};

$$._KeyValuePair = {"": ["key>", "value="],
 "super": "Object"
};

$$._LinkedHashMapImpl = {"": ["_list", "_map"],
 "super": "Object",
 oprator$indexSet$2: function(key, value) {
  var t1;
  if (this._map.containsKey$1(key) === true)
    $.index(this._map, key).get$element().set$value(value);
  else {
    t1 = this._list;
    $.getInterceptor(t1).addLast$1(t1, $._KeyValuePair$(key, value, $.getRuntimeTypeInfo(this)[0], $.getRuntimeTypeInfo(this)[1]));
    $.indexSet(this._map, key, this._list.lastEntry$0());
  }
},
 operator$index$1: function(key) {
  var entry = $.index(this._map, key);
  if (entry == null)
    return;
  return entry.get$element().get$value();
},
 remove$1: function(key) {
  var entry = this._map.remove$1(key);
  if (entry == null)
    return;
  entry.remove$0();
  return entry.get$element().get$value();
},
 get$keys: function() {
  var t1, list, t2;
  t1 = {};
  list = $.List_List(this.get$length(), $.getRuntimeTypeInfo(this)[0]);
  $.setRuntimeTypeInfo(list, [$.getRuntimeTypeInfo(this)[0]]);
  t1.index_10 = 0;
  t2 = this._list;
  $.getInterceptor(t2).forEach$1(t2, new $._LinkedHashMapImpl_keys_anon(t1, list));
  return list;
},
 get$values: function() {
  var t1, list, t2;
  t1 = {};
  list = $.List_List(this.get$length(), $.getRuntimeTypeInfo(this)[1]);
  $.setRuntimeTypeInfo(list, [$.getRuntimeTypeInfo(this)[1]]);
  t1.index_1 = 0;
  t2 = this._list;
  $.getInterceptor(t2).forEach$1(t2, new $._LinkedHashMapImpl_values_anon(t1, list));
  return list;
},
 forEach$1: function(f) {
  var t1 = this._list;
  $.getInterceptor(t1).forEach$1(t1, new $._LinkedHashMapImpl_forEach_anon(f));
},
 containsKey$1: function(key) {
  return this._map.containsKey$1(key);
},
 get$length: function() {
  var t1 = this._map;
  return $.getInterceptor(t1).get$length(t1);
},
 get$isEmpty: function() {
  return $.eq(this.get$length(), 0);
},
 clear$0: function() {
  var t1 = this._map;
  $.getInterceptor(t1).clear$0(t1);
  t1 = this._list;
  $.getInterceptor(t1).clear$0(t1);
},
 toString$0: function() {
  return $.Maps_mapToString(this);
},
 _LinkedHashMapImpl$0: function() {
  var t1, t2, t3;
  t1 = $.getRuntimeTypeInfo(this)[0];
  t2 = $.getRuntimeTypeInfo(this);
  this._map = $.HashMap_HashMap(t1, 'DoubleLinkedQueueEntry<_KeyValuePair<' + t2[0] +', ' + t2[1] +'>>');
  t3 = $.getRuntimeTypeInfo(this);
  this._list = $.DoubleLinkedQueue$('_KeyValuePair<' + t3[0] +', ' + t3[1] +'>');
},
 is$Map: function() { return true; }
};

$$.Object = {
 "super": "",
 operator$eq$1: function(other) {
  return this === other;
},
 get$hashCode: function() {
  return $.Primitives_objectHashCode(this);
},
 toString$0: function() {
  return $.Primitives_objectToString(this);
},
 noSuchMethod$1: function(invocation) {
  throw $.$$throw($.NoSuchMethodError$(this, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments(), null));
},
 get$runtimeType: function() {
  return $.TypeImpl$($.getRuntimeTypeString(this));
},
 requestLayoutFrame$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("requestLayoutFrame", "requestLayoutFrame$1",0, [$0], []));
 },
 floor$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("floor", "floor$0",0, [], []));
 },
 _postMessage_2$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_postMessage_2", "_postMessage_2$1",0, [$0], []));
 },
 _postMessage_2$3: function($0, $1, $2) {
  return this.noSuchMethod$1($.createInvocationMirror("_postMessage_2", "_postMessage_2$3",0, [$0, $1, $2], []));
 },
 allMatches$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("allMatches", "allMatches$1",0, [$0], []));
 },
 load$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("load", "load$0",0, [], []));
 },
 $$dom_addEventListener$3: function($0, $1, $2) {
  return this.noSuchMethod$1($.createInvocationMirror("$dom_addEventListener", "$$dom_addEventListener$3",0, [$0, $1, $2], []));
 },
 setTimeout$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("setTimeout", "setTimeout$2",0, [$0, $1], []));
 },
 _pause$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_pause", "_pause$0",0, [], []));
 },
 rotate$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("rotate", "rotate$1",0, [$0], []));
 },
 _probeForAdding$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_probeForAdding", "_probeForAdding$1",0, [$0], []));
 },
 round$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("round", "round$0",0, [], []));
 },
 _deserializeMap$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_deserializeMap", "_deserializeMap$1",0, [$0], []));
 },
 _computePausedTime$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_computePausedTime", "_computePausedTime$0",0, [], []));
 },
 addToWorld$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("addToWorld", "addToWorld$0",0, [], []));
 },
 nextBool$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("nextBool", "nextBool$0",0, [], []));
 },
 _add_1$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("_add_1", "_add_1$2",0, [$0, $1], []));
 },
 beginPath$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("beginPath", "beginPath$0",0, [], []));
 },
 resetCooldown$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("resetCooldown", "resetCooldown$0",0, [], []));
 },
 remove$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("remove", "remove$0",0, [], []));
 },
 remove$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("remove", "remove$1",0, [$0], []));
 },
 _schedule$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_schedule", "_schedule$0",0, [], []));
 },
 restore$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("restore", "restore$0",0, [], []));
 },
 setTransform$6: function($0, $1, $2, $3, $4, $5) {
  return this.noSuchMethod$1($.createInvocationMirror("setTransform", "setTransform$6",0, [$0, $1, $2, $3, $4, $5], []));
 },
 _addSystemBit$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_addSystemBit", "_addSystemBit$1",0, [$0], []));
 },
 _requestAnimationFrame$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_requestAnimationFrame", "_requestAnimationFrame$1",0, [$0], []));
 },
 _get_1$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_get_1", "_get_1$1",0, [$0], []));
 },
 contains$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("contains", "contains$1",0, [$0], []));
 },
 contains$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("contains", "contains$2",0, [$0, $1], []));
 },
 createBufferSource$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("createBufferSource", "createBufferSource$0",0, [], []));
 },
 _check$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_check", "_check$1",0, [$0], []));
 },
 _check$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("_check", "_check$2",0, [$0, $1], []));
 },
 getSafe$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("getSafe", "getSafe$1",0, [$0], []));
 },
 unregister$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("unregister", "unregister$1",0, [$0], []));
 },
 handleException$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("handleException", "handleException$1",0, [$0], []));
 },
 add$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("add", "add$1",0, [$0], []));
 },
 createEntity$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("createEntity", "createEntity$0",0, [], []));
 },
 initialize$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("initialize", "initialize$0",0, [], []));
 },
 _complete$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_complete", "_complete$0",0, [], []));
 },
 get$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("get", "get$1",0, [$0], []));
 },
 register$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("register", "register$2",0, [$0, $1], []));
 },
 _onRequestSuccess$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("_onRequestSuccess", "_onRequestSuccess$2",0, [$0, $1], []));
 },
 complete$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("complete", "complete$1",0, [$0], []));
 },
 getEntity$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("getEntity", "getEntity$1",0, [$0], []));
 },
 _throwUnmodifiable$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_throwUnmodifiable", "_throwUnmodifiable$0",0, [], []));
 },
 computeValue$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("computeValue", "computeValue$0",0, [], []));
 },
 addSystem$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("addSystem", "addSystem$1",0, [$0], []));
 },
 allOf$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("allOf", "allOf$1",0, [$0], []));
 },
 _setupNodes$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_setupNodes", "_setupNodes$0",0, [], []));
 },
 deleteFromWorld$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("deleteFromWorld", "deleteFromWorld$0",0, [], []));
 },
 abs$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("abs", "abs$0",0, [], []));
 },
 _removeSystemBit$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_removeSystemBit", "_removeSystemBit$1",0, [$0], []));
 },
 _removeFromSystem$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_removeFromSystem", "_removeFromSystem$1",0, [$0], []));
 },
 _setupSourceNodeForPlayback$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_setupSourceNodeForPlayback", "_setupSourceNodeForPlayback$0",0, [], []));
 },
 closePath$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("closePath", "closePath$0",0, [], []));
 },
 _getPropertyValue$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_getPropertyValue", "_getPropertyValue$1",0, [$0], []));
 },
 playOnceIn$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("playOnceIn", "playOnceIn$2",0, [$0, $1], []));
 },
 requestAnimationFrame$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("requestAnimationFrame", "requestAnimationFrame$1",0, [$0], []));
 },
 deleted$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("deleted", "deleted$1",0, [$0], []));
 },
 observe$2$attributes: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("observe", "observe$2$attributes",0, [$0, $1], ["attributes"]));
 },
 postMessage$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("postMessage", "postMessage$1",0, [$0], []));
 },
 postMessage$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("postMessage", "postMessage$2",0, [$0, $1], []));
 },
 then$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("then", "then$1",0, [$0], []));
 },
 indexOf$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("indexOf", "indexOf$2",0, [$0, $1], []));
 },
 indexOf$4: function($0, $1, $2, $3) {
  return this.noSuchMethod$1($.createInvocationMirror("indexOf", "indexOf$4",0, [$0, $1, $2, $3], []));
 },
 processEntity$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("processEntity", "processEntity$1",0, [$0], []));
 },
 disconnect$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("disconnect", "disconnect$1",0, [$0], []));
 },
 _link$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("_link", "_link$2",0, [$0, $1], []));
 },
 maybeSchedule$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("maybeSchedule", "maybeSchedule$0",0, [], []));
 },
 nextInt$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("nextInt", "nextInt$1",0, [$0], []));
 },
 runIteration$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("runIteration", "runIteration$0",0, [], []));
 },
 _contains$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_contains", "_contains$1",0, [$0], []));
 },
 maybeCloseWorker$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("maybeCloseWorker", "maybeCloseWorker$0",0, [], []));
 },
 send$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("send", "send$0",0, [], []));
 },
 _scanSounds$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_scanSounds", "_scanSounds$0",0, [], []));
 },
 setInterval$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("setInterval", "setInterval$2",0, [$0, $1], []));
 },
 _resume$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_resume", "_resume$0",0, [], []));
 },
 expireBy$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("expireBy", "expireBy$1",0, [$0], []));
 },
 call$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("call", "call$0",0, [], []));
 },
 call$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("call", "call$1",0, [$0], []));
 },
 call$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("call", "call$2",0, [$0, $1], []));
 },
 call$3: function($0, $1, $2) {
  return this.noSuchMethod$1($.createInvocationMirror("call", "call$3",0, [$0, $1, $2], []));
 },
 call$4: function($0, $1, $2, $3) {
  return this.noSuchMethod$1($.createInvocationMirror("call", "call$4",0, [$0, $1, $2, $3], []));
 },
 call$5: function($0, $1, $2, $3, $4) {
  return this.noSuchMethod$1($.createInvocationMirror("call", "call$5",0, [$0, $1, $2, $3, $4], []));
 },
 call$6: function($0, $1, $2, $3, $4, $5) {
  return this.noSuchMethod$1($.createInvocationMirror("call", "call$6",0, [$0, $1, $2, $3, $4, $5], []));
 },
 call$9: function($0, $1, $2, $3, $4, $5, $6, $7, $8) {
  return this.noSuchMethod$1($.createInvocationMirror("call", "call$9",0, [$0, $1, $2, $3, $4, $5, $6, $7, $8], []));
 },
 call$2$attributes: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("call", "call$2$attributes",0, [$0, $1], ["attributes"]));
 },
 $$dom_removeChild$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("$dom_removeChild", "$$dom_removeChild$1",0, [$0], []));
 },
 getManager$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("getManager", "getManager$1",0, [$0], []));
 },
 toInt$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("toInt", "toInt$0",0, [], []));
 },
 createPanner$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("createPanner", "createPanner$0",0, [], []));
 },
 _setGlobals$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_setGlobals", "_setGlobals$0",0, [], []));
 },
 save$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("save", "save$0",0, [], []));
 },
 enabled$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("enabled", "enabled$1",0, [$0], []));
 },
 _probeForLookup$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_probeForLookup", "_probeForLookup$1",0, [$0], []));
 },
 replaceAll$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("replaceAll", "replaceAll$2",0, [$0, $1], []));
 },
 open$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("open", "open$2",0, [$0, $1], []));
 },
 translate$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("translate", "translate$2",0, [$0, $1], []));
 },
 makeClip$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("makeClip", "makeClip$2",0, [$0, $1], []));
 },
 firstMatch$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("firstMatch", "firstMatch$1",0, [$0], []));
 },
 start$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("start", "start$1",0, [$0], []));
 },
 start$3: function($0, $1, $2) {
  return this.noSuchMethod$1($.createInvocationMirror("start", "start$3",0, [$0, $1, $2], []));
 },
 _nativeDetectEnvironment$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_nativeDetectEnvironment", "_nativeDetectEnvironment$0",0, [], []));
 },
 isWithtinXRange$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("isWithtinXRange", "isWithtinXRange$2",0, [$0, $1], []));
 },
 fillRect$4: function($0, $1, $2, $3) {
  return this.noSuchMethod$1($.createInvocationMirror("fillRect", "fillRect$4",0, [$0, $1, $2, $3], []));
 },
 isIndexWithinBounds$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("isIndexWithinBounds", "isIndexWithinBounds$1",0, [$0], []));
 },
 transform$6: function($0, $1, $2, $3, $4, $5) {
  return this.noSuchMethod$1($.createInvocationMirror("transform", "transform$6",0, [$0, $1, $2, $3, $4, $5], []));
 },
 truncate$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("truncate", "truncate$0",0, [], []));
 },
 completeException$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("completeException", "completeException$1",0, [$0], []));
 },
 completeException$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("completeException", "completeException$2",0, [$0, $1], []));
 },
 lookup$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("lookup", "lookup$1",0, [$0], []));
 },
 next$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("next", "next$0",0, [], []));
 },
 _onDecode$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("_onDecode", "_onDecode$2",0, [$0, $1], []));
 },
 $$dom_removeEventListener$3: function($0, $1, $2) {
  return this.noSuchMethod$1($.createInvocationMirror("$dom_removeEventListener", "$$dom_removeEventListener$3",0, [$0, $1, $2], []));
 },
 iterator$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("iterator", "iterator$0",0, [], []));
 },
 cleanup$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("cleanup", "cleanup$0",0, [], []));
 },
 split$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("split", "split$1",0, [$0], []));
 },
 _onCallback$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_onCallback", "_onCallback$0",0, [], []));
 },
 playLoopedIn$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("playLoopedIn", "playLoopedIn$2",0, [$0, $1], []));
 },
 _call$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("_call", "_call$2",0, [$0, $1], []));
 },
 changed$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("changed", "changed$1",0, [$0], []));
 },
 hasMatch$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("hasMatch", "hasMatch$1",0, [$0], []));
 },
 previousEntry$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("previousEntry", "previousEntry$0",0, [], []));
 },
 run$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("run", "run$0",0, [], []));
 },
 fill$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("fill", "fill$0",0, [], []));
 },
 lastIndexOf$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("lastIndexOf", "lastIndexOf$1",0, [$0], []));
 },
 lastIndexOf$3: function($0, $1, $2) {
  return this.noSuchMethod$1($.createInvocationMirror("lastIndexOf", "lastIndexOf$3",0, [$0, $1, $2], []));
 },
 nextDouble$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("nextDouble", "nextDouble$0",0, [], []));
 },
 substring$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("substring", "substring$1",0, [$0], []));
 },
 substring$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("substring", "substring$2",0, [$0, $1], []));
 },
 _dispatch$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_dispatch", "_dispatch$1",0, [$0], []));
 },
 close$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("close", "close$0",0, [], []));
 },
 processEntityChanges$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("processEntityChanges", "processEntityChanges$0",0, [], []));
 },
 query$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("query", "query$1",0, [$0], []));
 },
 playClipFromSource$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("playClipFromSource", "playClipFromSource$2",0, [$0, $1], []));
 },
 createGain$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("createGain", "createGain$0",0, [], []));
 },
 charCodeAt$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("charCodeAt", "charCodeAt$1",0, [$0], []));
 },
 addManager$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("addManager", "addManager$1",0, [$0], []));
 },
 clear$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("clear", "clear$0",0, [], []));
 },
 prepend$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("prepend", "prepend$1",0, [$0], []));
 },
 addLast$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("addLast", "addLast$1",0, [$0], []));
 },
 _postMessage_1$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("_postMessage_1", "_postMessage_1$2",0, [$0, $1], []));
 },
 _forComponentsOfEntity$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("_forComponentsOfEntity", "_forComponentsOfEntity$2",0, [$0, $1], []));
 },
 _insertToSystem$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_insertToSystem", "_insertToSystem$1",0, [$0], []));
 },
 getComponentsByType$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("getComponentsByType", "getComponentsByType$1",0, [$0], []));
 },
 forEach$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("forEach", "forEach$1",0, [$0], []));
 },
 forEach$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("forEach", "forEach$2",0, [$0, $1], []));
 },
 _addTypeBit$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_addTypeBit", "_addTypeBit$1",0, [$0], []));
 },
 _deserializeHelper$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_deserializeHelper", "_deserializeHelper$1",0, [$0], []));
 },
 _growTo$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_growTo", "_growTo$1",0, [$0], []));
 },
 _ensureRequestAnimationFrame$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_ensureRequestAnimationFrame", "_ensureRequestAnimationFrame$0",0, [], []));
 },
 _deserializeList$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_deserializeList", "_deserializeList$1",0, [$0], []));
 },
 endsWith$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("endsWith", "endsWith$1",0, [$0], []));
 },
 addComponent$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("addComponent", "addComponent$1",0, [$0], []));
 },
 _asNonSentinelEntry$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_asNonSentinelEntry", "_asNonSentinelEntry$0",0, [], []));
 },
 added$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("added", "added$1",0, [$0], []));
 },
 removeFirst$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("removeFirst", "removeFirst$0",0, [], []));
 },
 drawImage$9: function($0, $1, $2, $3, $4, $5, $6, $7, $8) {
  return this.noSuchMethod$1($.createInvocationMirror("drawImage", "drawImage$9",0, [$0, $1, $2, $3, $4, $5, $6, $7, $8], []));
 },
 drawImage$3: function($0, $1, $2) {
  return this.noSuchMethod$1($.createInvocationMirror("drawImage", "drawImage$3",0, [$0, $1, $2], []));
 },
 drawImage$5: function($0, $1, $2, $3, $4) {
  return this.noSuchMethod$1($.createInvocationMirror("drawImage", "drawImage$5",0, [$0, $1, $2, $3, $4], []));
 },
 _grow$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_grow", "_grow$1",0, [$0], []));
 },
 _serializeList$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_serializeList", "_serializeList$1",0, [$0], []));
 },
 _addComponent$3: function($0, $1, $2) {
  return this.noSuchMethod$1($.createInvocationMirror("_addComponent", "_addComponent$3",0, [$0, $1, $2], []));
 },
 deleteEntity$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("deleteEntity", "deleteEntity$1",0, [$0], []));
 },
 _removeComponentsOfEntity$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_removeComponentsOfEntity", "_removeComponentsOfEntity$1",0, [$0], []));
 },
 _nativeInitWorkerMessageHandler$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_nativeInitWorkerMessageHandler", "_nativeInitWorkerMessageHandler$0",0, [], []));
 },
 _add_2$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_add_2", "_add_2$1",0, [$0], []));
 },
 _onRequestError$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("_onRequestError", "_onRequestError$2",0, [$0, $1], []));
 },
 _updateBitMask$3: function($0, $1, $2) {
  return this.noSuchMethod$1($.createInvocationMirror("_updateBitMask", "_updateBitMask$3",0, [$0, $1, $2], []));
 },
 containsKey$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("containsKey", "containsKey$1",0, [$0], []));
 },
 _ensureCapacity$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_ensureCapacity", "_ensureCapacity$0",0, [], []));
 },
 _runHelper$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_runHelper", "_runHelper$0",0, [], []));
 },
 processEntityOnScreen$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("processEntityOnScreen", "processEntityOnScreen$1",0, [$0], []));
 },
 _callback$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_callback", "_callback$0",0, [], []));
 },
 _liblib3$_callback$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("_callback", "_liblib3$_callback$2",0, [$0, $1], []));
 },
 _checkReplyTo$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_checkReplyTo", "_checkReplyTo$1",0, [$0], []));
 },
 process$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("process", "process$0",0, [], []));
 },
 decodeAudioData$3: function($0, $1, $2) {
  return this.noSuchMethod$1($.createInvocationMirror("decodeAudioData", "decodeAudioData$3",0, [$0, $1, $2], []));
 },
 $$dom_createElement$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("$dom_createElement", "$$dom_createElement$1",0, [$0], []));
 },
 enqueue$3: function($0, $1, $2) {
  return this.noSuchMethod$1($.createInvocationMirror("enqueue", "enqueue$3",0, [$0, $1, $2], []));
 },
 ceil$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("ceil", "ceil$0",0, [], []));
 },
 lastEntry$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("lastEntry", "lastEntry$0",0, [], []));
 },
 disabled$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("disabled", "disabled$1",0, [$0], []));
 },
 isWithtinYRange$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("isWithtinYRange", "isWithtinYRange$2",0, [$0, $1], []));
 },
 _deserializeRef$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_deserializeRef", "_deserializeRef$1",0, [$0], []));
 },
 addEntity$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("addEntity", "addEntity$1",0, [$0], []));
 },
 rect$4: function($0, $1, $2, $3) {
  return this.noSuchMethod$1($.createInvocationMirror("rect", "rect$4",0, [$0, $1, $2, $3], []));
 },
 reset$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("reset", "reset$0",0, [], []));
 },
 _init$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_init", "_init$0",0, [], []));
 },
 eval$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("eval", "eval$1",0, [$0], []));
 },
 connect$3: function($0, $1, $2) {
  return this.noSuchMethod$1($.createInvocationMirror("connect", "connect$3",0, [$0, $1, $2], []));
 },
 stop$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("stop", "stop$0",0, [], []));
 },
 stop$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("stop", "stop$1",0, [$0], []));
 },
 stroke$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("stroke", "stroke$0",0, [], []));
 },
 _get_2$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_get_2", "_get_2$1",0, [$0], []));
 },
 makeSource$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("makeSource", "makeSource$1",0, [$0], []));
 },
 getEntities$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("getEntities", "getEntities$1",0, [$0], []));
 },
 removeLast$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("removeLast", "removeLast$0",0, [], []));
 },
 get$keyCode: function() {
  return this.noSuchMethod$1($.createInvocationMirror("keyCode", "keyCode$0",1, [], []));
 },
 get$_liblib3$_id: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_id", "_liblib3$_id$0",1, [], []));
 },
 get$_previous: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_previous", "_previous$0",1, [], []));
 },
 get$key: function() {
  return this.noSuchMethod$1($.createInvocationMirror("key", "key$0",1, [], []));
 },
 get$y: function() {
  return this.noSuchMethod$1($.createInvocationMirror("y", "y$0",1, [], []));
 },
 get$destroyed: function() {
  return this.noSuchMethod$1($.createInvocationMirror("destroyed", "destroyed$0",1, [], []));
 },
 get$load: function() {
  return this.noSuchMethod$1($.createInvocationMirror("load", "load$0",1, [], []));
 },
 get$isNaN: function() {
  return this.noSuchMethod$1($.createInvocationMirror("isNaN", "isNaN$0",1, [], []));
 },
 get$memberName: function() {
  return this.noSuchMethod$1($.createInvocationMirror("memberName", "memberName$0",1, [], []));
 },
 get$cooldownTimer: function() {
  return this.noSuchMethod$1($.createInvocationMirror("cooldownTimer", "cooldownTimer$0",1, [], []));
 },
 get$delta: function() {
  return this.noSuchMethod$1($.createInvocationMirror("delta", "delta$0",1, [], []));
 },
 get$namedArguments: function() {
  return this.noSuchMethod$1($.createInvocationMirror("namedArguments", "namedArguments$0",1, [], []));
 },
 get$_set: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_set", "_set$0",1, [], []));
 },
 get$_Lists: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_Lists", "_Lists$0",1, [], []));
 },
 get$rotationRate: function() {
  return this.noSuchMethod$1($.createInvocationMirror("rotationRate", "rotationRate$0",1, [], []));
 },
 get$excluded: function() {
  return this.noSuchMethod$1($.createInvocationMirror("excluded", "excluded$0",1, [], []));
 },
 get$userAgent: function() {
  return this.noSuchMethod$1($.createInvocationMirror("userAgent", "userAgent$0",1, [], []));
 },
 get$all: function() {
  return this.noSuchMethod$1($.createInvocationMirror("all", "all$0",1, [], []));
 },
 get$buffer: function() {
  return this.noSuchMethod$1($.createInvocationMirror("buffer", "buffer$0",1, [], []));
 },
 get$color: function() {
  return this.noSuchMethod$1($.createInvocationMirror("color", "color$0",1, [], []));
 },
 get$rootContext: function() {
  return this.noSuchMethod$1($.createInvocationMirror("rootContext", "rootContext$0",1, [], []));
 },
 get$componentManager: function() {
  return this.noSuchMethod$1($.createInvocationMirror("componentManager", "componentManager$0",1, [], []));
 },
 get$health: function() {
  return this.noSuchMethod$1($.createInvocationMirror("health", "health$0",1, [], []));
 },
 get$height: function() {
  return this.noSuchMethod$1($.createInvocationMirror("height", "height$0",1, [], []));
 },
 get$length: function() {
  return this.noSuchMethod$1($.createInvocationMirror("length", "length$0",1, [], []));
 },
 get$isWorker: function() {
  return this.noSuchMethod$1($.createInvocationMirror("isWorker", "isWorker$0",1, [], []));
 },
 get$keyUp: function() {
  return this.noSuchMethod$1($.createInvocationMirror("keyUp", "keyUp$0",1, [], []));
 },
 get$_element: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_element", "_element$0",1, [], []));
 },
 get$hasNext: function() {
  return this.noSuchMethod$1($.createInvocationMirror("hasNext", "hasNext$0",1, [], []));
 },
 get$bit: function() {
  return this.noSuchMethod$1($.createInvocationMirror("bit", "bit$0",1, [], []));
 },
 get$mainManager: function() {
  return this.noSuchMethod$1($.createInvocationMirror("mainManager", "mainManager$0",1, [], []));
 },
 get$entityManager: function() {
  return this.noSuchMethod$1($.createInvocationMirror("entityManager", "entityManager$0",1, [], []));
 },
 get$href: function() {
  return this.noSuchMethod$1($.createInvocationMirror("href", "href$0",1, [], []));
 },
 get$future: function() {
  return this.noSuchMethod$1($.createInvocationMirror("future", "future$0",1, [], []));
 },
 get$id: function() {
  return this.noSuchMethod$1($.createInvocationMirror("id", "id$0",1, [], []));
 },
 get$abort: function() {
  return this.noSuchMethod$1($.createInvocationMirror("abort", "abort$0",1, [], []));
 },
 get$value: function() {
  return this.noSuchMethod$1($.createInvocationMirror("value", "value$0",1, [], []));
 },
 get$activeEntityCount: function() {
  return this.noSuchMethod$1($.createInvocationMirror("activeEntityCount", "activeEntityCount$0",1, [], []));
 },
 get$percentLeft: function() {
  return this.noSuchMethod$1($.createInvocationMirror("percentLeft", "percentLeft$0",1, [], []));
 },
 get$positionalArguments: function() {
  return this.noSuchMethod$1($.createInvocationMirror("positionalArguments", "positionalArguments$0",1, [], []));
 },
 get$currentManagerId: function() {
  return this.noSuchMethod$1($.createInvocationMirror("currentManagerId", "currentManagerId$0",1, [], []));
 },
 get$keyDown: function() {
  return this.noSuchMethod$1($.createInvocationMirror("keyDown", "keyDown$0",1, [], []));
 },
 get$response: function() {
  return this.noSuchMethod$1($.createInvocationMirror("response", "response$0",1, [], []));
 },
 get$_systemsBag: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_systemsBag", "_systemsBag$0",1, [], []));
 },
 get$message: function() {
  return this.noSuchMethod$1($.createInvocationMirror("message", "message$0",1, [], []));
 },
 get$pattern: function() {
  return this.noSuchMethod$1($.createInvocationMirror("pattern", "pattern$0",1, [], []));
 },
 get$_next: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_next", "_next$0",1, [], []));
 },
 get$hidden: function() {
  return this.noSuchMethod$1($.createInvocationMirror("hidden", "hidden$0",1, [], []));
 },
 get$isSprite: function() {
  return this.noSuchMethod$1($.createInvocationMirror("isSprite", "isSprite$0",1, [], []));
 },
 get$_liblib2$_buffer: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_buffer", "_liblib2$_buffer$0",1, [], []));
 },
 get$_futurePort: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_futurePort", "_futurePort$0",1, [], []));
 },
 get$fromCommandLine: function() {
  return this.noSuchMethod$1($.createInvocationMirror("fromCommandLine", "fromCommandLine$0",1, [], []));
 },
 get$renderableMapper: function() {
  return this.noSuchMethod$1($.createInvocationMirror("renderableMapper", "renderableMapper$0",1, [], []));
 },
 get$on: function() {
  return this.noSuchMethod$1($.createInvocationMirror("on", "on$0",1, [], []));
 },
 get$ignoreCase: function() {
  return this.noSuchMethod$1($.createInvocationMirror("ignoreCase", "ignoreCase$0",1, [], []));
 },
 get$element: function() {
  return this.noSuchMethod$1($.createInvocationMirror("element", "element$0",1, [], []));
 },
 get$maxHealth: function() {
  return this.noSuchMethod$1($.createInvocationMirror("maxHealth", "maxHealth$0",1, [], []));
 },
 get$bodyMapper: function() {
  return this.noSuchMethod$1($.createInvocationMirror("bodyMapper", "bodyMapper$0",1, [], []));
 },
 get$one: function() {
  return this.noSuchMethod$1($.createInvocationMirror("one", "one$0",1, [], []));
 },
 get$_handleMutation: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_handleMutation", "_handleMutation$0",1, [], []));
 },
 get$_handleMessage: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_handleMessage", "_handleMessage$0",1, [], []));
 },
 get$width: function() {
  return this.noSuchMethod$1($.createInvocationMirror("width", "width$0",1, [], []));
 },
 get$multiLine: function() {
  return this.noSuchMethod$1($.createInvocationMirror("multiLine", "multiLine$0",1, [], []));
 },
 get$topEventLoop: function() {
  return this.noSuchMethod$1($.createInvocationMirror("topEventLoop", "topEventLoop$0",1, [], []));
 },
 get$_managersBag: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_managersBag", "_managersBag$0",1, [], []));
 },
 get$error: function() {
  return this.noSuchMethod$1($.createInvocationMirror("error", "error$0",1, [], []));
 },
 get$bulletSpeed: function() {
  return this.noSuchMethod$1($.createInvocationMirror("bulletSpeed", "bulletSpeed$0",1, [], []));
 },
 get$_Collections: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_Collections", "_Collections$0",1, [], []));
 },
 get$angle: function() {
  return this.noSuchMethod$1($.createInvocationMirror("angle", "angle$0",1, [], []));
 },
 get$isolates: function() {
  return this.noSuchMethod$1($.createInvocationMirror("isolates", "isolates$0",1, [], []));
 },
 get$resource: function() {
  return this.noSuchMethod$1($.createInvocationMirror("resource", "resource$0",1, [], []));
 },
 get$isComplete: function() {
  return this.noSuchMethod$1($.createInvocationMirror("isComplete", "isComplete$0",1, [], []));
 },
 get$currentTime: function() {
  return this.noSuchMethod$1($.createInvocationMirror("currentTime", "currentTime$0",1, [], []));
 },
 get$managers: function() {
  return this.noSuchMethod$1($.createInvocationMirror("managers", "managers$0",1, [], []));
 },
 get$nextIsolateId: function() {
  return this.noSuchMethod$1($.createInvocationMirror("nextIsolateId", "nextIsolateId$0",1, [], []));
 },
 get$isFinished: function() {
  return this.noSuchMethod$1($.createInvocationMirror("isFinished", "isFinished$0",1, [], []));
 },
 get$isEmpty: function() {
  return this.noSuchMethod$1($.createInvocationMirror("isEmpty", "isEmpty$0",1, [], []));
 },
 get$currentContext: function() {
  return this.noSuchMethod$1($.createInvocationMirror("currentContext", "currentContext$0",1, [], []));
 },
 get$destination: function() {
  return this.noSuchMethod$1($.createInvocationMirror("destination", "destination$0",1, [], []));
 },
 get$_receivePort: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_receivePort", "_receivePort$0",1, [], []));
 },
 get$needSerialization: function() {
  return this.noSuchMethod$1($.createInvocationMirror("needSerialization", "needSerialization$0",1, [], []));
 },
 get$context2d: function() {
  return this.noSuchMethod$1($.createInvocationMirror("context2d", "context2d$0",1, [], []));
 },
 get$isInfinite: function() {
  return this.noSuchMethod$1($.createInvocationMirror("isInfinite", "isInfinite$0",1, [], []));
 },
 get$location: function() {
  return this.noSuchMethod$1($.createInvocationMirror("location", "location$0",1, [], []));
 },
 get$gain: function() {
  return this.noSuchMethod$1($.createInvocationMirror("gain", "gain$0",1, [], []));
 },
 get$duration: function() {
  return this.noSuchMethod$1($.createInvocationMirror("duration", "duration$0",1, [], []));
 },
 get$_liblib3$_callback: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_callback", "_liblib3$_callback$0",1, [], []));
 },
 get$ports: function() {
  return this.noSuchMethod$1($.createInvocationMirror("ports", "ports$0",1, [], []));
 },
 get$_typeBits: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_typeBits", "_typeBits$0",1, [], []));
 },
 get$scale: function() {
  return this.noSuchMethod$1($.createInvocationMirror("scale", "scale$0",1, [], []));
 },
 get$canShoot: function() {
  return this.noSuchMethod$1($.createInvocationMirror("canShoot", "canShoot$0",1, [], []));
 },
 get$passive: function() {
  return this.noSuchMethod$1($.createInvocationMirror("passive", "passive$0",1, [], []));
 },
 get$completer: function() {
  return this.noSuchMethod$1($.createInvocationMirror("completer", "completer$0",1, [], []));
 },
 get$_isolateId: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_isolateId", "_isolateId$0",1, [], []));
 },
 get$bulletMass: function() {
  return this.noSuchMethod$1($.createInvocationMirror("bulletMass", "bulletMass$0",1, [], []));
 },
 get$_systemBits: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_systemBits", "_systemBits$0",1, [], []));
 },
 get$x: function() {
  return this.noSuchMethod$1($.createInvocationMirror("x", "x$0",1, [], []));
 },
 get$_entitiesByGroup: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_entitiesByGroup", "_entitiesByGroup$0",1, [], []));
 },
 get$_location: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_location", "_location$0",1, [], []));
 },
 get$expired: function() {
  return this.noSuchMethod$1($.createInvocationMirror("expired", "expired$0",1, [], []));
 },
 get$stackTrace: function() {
  return this.noSuchMethod$1($.createInvocationMirror("stackTrace", "stackTrace$0",1, [], []));
 },
 get$navigator: function() {
  return this.noSuchMethod$1($.createInvocationMirror("navigator", "navigator$0",1, [], []));
 },
 get$transformMapper: function() {
  return this.noSuchMethod$1($.createInvocationMirror("transformMapper", "transformMapper$0",1, [], []));
 },
 get$radius: function() {
  return this.noSuchMethod$1($.createInvocationMirror("radius", "radius$0",1, [], []));
 },
 get$playbackState: function() {
  return this.noSuchMethod$1($.createInvocationMirror("playbackState", "playbackState$0",1, [], []));
 },
 get$_tag: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_tag", "_tag$0",1, [], []));
 },
 get$listener: function() {
  return this.noSuchMethod$1($.createInvocationMirror("listener", "listener$0",1, [], []));
 },
 get$exception: function() {
  return this.noSuchMethod$1($.createInvocationMirror("exception", "exception$0",1, [], []));
 },
 get$_workerId: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_workerId", "_workerId$0",1, [], []));
 },
 set$globalAlpha: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("globalAlpha=", "globalAlpha=$1",2, [$0], []));
 },
 set$_passive: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_passive=", "_passive=$1",2, [$0], []));
 },
 set$_previous: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_previous=", "_previous=$1",2, [$0], []));
 },
 set$loopEnd: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("loopEnd=", "loopEnd=$1",2, [$0], []));
 },
 set$responseType: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("responseType=", "responseType=$1",2, [$0], []));
 },
 set$y: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("y=", "y=$1",2, [$0], []));
 },
 set$coneOuterGain: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("coneOuterGain=", "coneOuterGain=$1",2, [$0], []));
 },
 set$loop: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("loop=", "loop=$1",2, [$0], []));
 },
 set$pause: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("pause=", "pause=$1",2, [$0], []));
 },
 set$destroyed: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("destroyed=", "destroyed=$1",2, [$0], []));
 },
 set$currentContext: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("currentContext=", "currentContext=$1",2, [$0], []));
 },
 set$value: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("value=", "value=$1",2, [$0], []));
 },
 set$lineWidth: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("lineWidth=", "lineWidth=$1",2, [$0], []));
 },
 set$src: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("src=", "src=$1",2, [$0], []));
 },
 set$maxHealth: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("maxHealth=", "maxHealth=$1",2, [$0], []));
 },
 set$cooldownTimer: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("cooldownTimer=", "cooldownTimer=$1",2, [$0], []));
 },
 set$delta: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("delta=", "delta=$1",2, [$0], []));
 },
 set$_typeBits: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_typeBits=", "_typeBits=$1",2, [$0], []));
 },
 set$shoot: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("shoot=", "shoot=$1",2, [$0], []));
 },
 set$loopStart: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("loopStart=", "loopStart=$1",2, [$0], []));
 },
 set$width: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("width=", "width=$1",2, [$0], []));
 },
 set$rotationRate: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("rotationRate=", "rotationRate=$1",2, [$0], []));
 },
 set$world: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("world=", "world=$1",2, [$0], []));
 },
 set$x: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("x=", "x=$1",2, [$0], []));
 },
 set$buffer: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("buffer=", "buffer=$1",2, [$0], []));
 },
 set$text: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("text=", "text=$1",2, [$0], []));
 },
 set$rootContext: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("rootContext=", "rootContext=$1",2, [$0], []));
 },
 set$positional: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("positional=", "positional=$1",2, [$0], []));
 },
 set$_world: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_world=", "_world=$1",2, [$0], []));
 },
 set$angle: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("angle=", "angle=$1",2, [$0], []));
 },
 set$health: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("health=", "health=$1",2, [$0], []));
 },
 set$height: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("height=", "height=$1",2, [$0], []));
 },
 set$_next: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_next=", "_next=$1",2, [$0], []));
 },
 set$fillStyle: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("fillStyle=", "fillStyle=$1",2, [$0], []));
 },
 set$length: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("length=", "length=$1",2, [$0], []));
 },
 set$exception: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("exception=", "exception=$1",2, [$0], []));
 },
 set$strokeStyle: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("strokeStyle=", "strokeStyle=$1",2, [$0], []));
 },
 set$hidden: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("hidden=", "hidden=$1",2, [$0], []));
 },
 set$nextIsolateId: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("nextIsolateId=", "nextIsolateId=$1",2, [$0], []));
 },
 set$baseURL: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("baseURL=", "baseURL=$1",2, [$0], []));
 }
};

$$.DoubleLinkedQueueEntry = {"": ["_previous=", "_next=", "_element>"],
 "super": "Object",
 _link$2: function(p, n) {
  this._next = n;
  this._previous = p;
  p.set$_next(this);
  n.set$_previous(this);
},
 prepend$1: function(e) {
  $.DoubleLinkedQueueEntry$(e, $.getRuntimeTypeInfo(this)[0])._link$2(this._previous, this);
},
 remove$0: function() {
  var t1 = this._next;
  this._previous.set$_next(t1);
  t1 = this._previous;
  this._next.set$_previous(t1);
  this._next = null;
  this._previous = null;
  return this._element;
},
 _asNonSentinelEntry$0: function() {
  return this;
},
 previousEntry$0: function() {
  return this._previous._asNonSentinelEntry$0();
},
 get$element: function() {
  return this._element;
},
 DoubleLinkedQueueEntry$1: function(e) {
  this._element = e;
}
};

$$._DoubleLinkedQueueEntrySentinel = {"": ["_previous", "_next", "_element"],
 "super": "DoubleLinkedQueueEntry",
 remove$0: function() {
  throw $.$$throw($.StateError$("Empty queue"));
},
 _asNonSentinelEntry$0: function() {
  return;
},
 get$element: function() {
  throw $.$$throw($.StateError$("Empty queue"));
},
 _DoubleLinkedQueueEntrySentinel$0: function() {
  this._link$2(this, this);
}
};

$$.DoubleLinkedQueue = {"": ["_sentinel"],
 "super": "Object",
 addLast$1: function(value) {
  this._sentinel.prepend$1(value);
},
 add$1: function(value) {
  this._sentinel.prepend$1(value);
},
 removeLast$0: function() {
  return this._sentinel.get$_previous().remove$0();
},
 removeFirst$0: function() {
  return this._sentinel.get$_next().remove$0();
},
 lastEntry$0: function() {
  return this._sentinel.previousEntry$0();
},
 get$length: function() {
  var t1 = {};
  t1.counter_1 = 0;
  $.getInterceptor(this).forEach$1(this, new $.DoubleLinkedQueue_length_anon(t1));
  return t1.counter_1;
},
 get$isEmpty: function() {
  var t1, t2;
  t1 = this._sentinel;
  t2 = t1.get$_next();
  return t2 == null ? t1 == null : t2 === t1;
},
 clear$0: function() {
  var t1 = this._sentinel;
  t1.set$_next(t1);
  t1 = this._sentinel;
  t1.set$_previous(t1);
},
 forEach$1: function(f) {
  var entry, t1, nextEntry;
  entry = this._sentinel.get$_next();
  for (; t1 = this._sentinel, !(entry == null ? t1 == null : entry === t1); entry = nextEntry) {
    nextEntry = entry.get$_next();
    f.call$1(entry.get$_element());
  }
},
 iterator$0: function() {
  return $._DoubleLinkedQueueIterator$(this._sentinel, $.getRuntimeTypeInfo(this)[0]);
},
 toString$0: function() {
  return $.Collections_collectionToString(this);
},
 DoubleLinkedQueue$0: function() {
  this._sentinel = $._DoubleLinkedQueueEntrySentinel$($.getRuntimeTypeInfo(this)[0]);
},
 is$Collection: function() { return true; }
};

$$._DoubleLinkedQueueIterator = {"": ["_sentinel", "_currentEntry"],
 "super": "Object",
 get$hasNext: function() {
  var t1, t2;
  t1 = this._currentEntry.get$_next();
  t2 = this._sentinel;
  return !(t1 == null ? t2 == null : t1 === t2);
},
 next$0: function() {
  if (this.get$hasNext() !== true)
    throw $.$$throw($.StateError$("No more elements"));
  this._currentEntry = this._currentEntry.get$_next();
  return this._currentEntry.get$element();
},
 _DoubleLinkedQueueIterator$1: function(_sentinel) {
  this._currentEntry = this._sentinel;
}
};

$$.String = {
 "super": "Object",
 is$String: true
};

$$._StringBufferImpl = {"": ["_buffer>", "_length"],
 "super": "Object",
 get$length: function() {
  return this._length;
},
 get$isEmpty: function() {
  return $.eq(this._length, 0);
},
 add$1: function(obj) {
  var str, t1, t3;
  str = $.getInterceptor(obj).toString$0(obj);
  if (str == null || $.getInterceptor(str).get$isEmpty(str) === true)
    return this;
  t1 = this._buffer;
  $.getInterceptor(t1).add$1(t1, str);
  t1 = this._length;
  if (typeof t1 !== 'number')
    return this.add$1$bailout(1, str, t1);
  t3 = $.getInterceptor(str).get$length(str);
  if (typeof t3 !== 'number')
    return this.add$1$bailout(2, t3, t1);
  this._length = t1 + t3;
  return this;
},
 add$1$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      t1 = env1;
      str = env0;
      break;
    case 2:
      t1 = env1;
      t3 = env0;
      break;
  }
  switch (state0) {
    case 0:
      str = $.getInterceptor(obj).toString$0(obj);
      if (str == null || $.getInterceptor(str).get$isEmpty(str) === true)
        return this;
      t1 = this._buffer;
      $.getInterceptor(t1).add$1(t1, str);
      t1 = this._length;
    case 1:
      state0 = 0;
      t3 = $.getInterceptor(str).get$length(str);
    case 2:
      var str, t1, t3;
      state0 = 0;
      this._length = $.add(t1, t3);
      return this;
  }
},
 clear$0: function() {
  var t1 = $.List_List(null, 'String');
  $.setRuntimeTypeInfo(t1, ['String']);
  this._buffer = t1;
  this._length = 0;
  return this;
},
 toString$0: function() {
  var t1, result;
  t1 = this._buffer;
  if ($.eqB($.getInterceptor(t1).get$length(t1), 0))
    return "";
  t1 = this._buffer;
  if ($.eqB($.getInterceptor(t1).get$length(t1), 1))
    return $.index(this._buffer, 0);
  result = $.stringJoinUnchecked($.Strings__toJsStringArray(this._buffer), "");
  t1 = this._buffer;
  $.getInterceptor(t1).clear$0(t1);
  t1 = this._buffer;
  $.getInterceptor(t1).add$1(t1, result);
  return result;
},
 _StringBufferImpl$1: function(content$) {
  $.getInterceptor(this).clear$0(this);
  $.getInterceptor(this).add$1(this, content$);
}
};

$$.Type = {
 "super": "Object"
};

$$.ObjectInterceptor = {
 "super": "Object",
 toString$0: function(receiver) { return receiver.toString$0(); },
 add$1: function(receiver, a0) { return receiver.add$1(a0); },
 charCodeAt$1: function(receiver, a0) { return receiver.charCodeAt$1(a0); },
 iterator$0: function(receiver) { return receiver.iterator$0(); },
 substring$1: function(receiver, a0) { return receiver.substring$1(a0); },
 replaceAll$2: function(receiver, a0, a1) { return receiver.replaceAll$2(a0, a1); },
 truncate$0: function(receiver) { return receiver.truncate$0(); },
 set$length: function(receiver) { return receiver.set$length(); },
 contains$2: function(receiver, a0, a1) { return receiver.contains$2(a0, a1); },
 get$runtimeType: function(receiver) { return receiver.get$runtimeType(); },
 operator$eq$1: function(receiver, a0) { return receiver.operator$eq$1(a0); },
 indexOf$2: function(receiver, a0, a1) { return receiver.indexOf$2(a0, a1); },
 get$isEmpty: function(receiver) { return receiver.get$isEmpty(); },
 get$isNaN: function(receiver) { return receiver.get$isNaN(); },
 forEach$1: function(receiver, a0) { return receiver.forEach$1(a0); },
 substring$2: function(receiver, a0, a1) { return receiver.substring$2(a0, a1); },
 removeLast$0: function(receiver) { return receiver.removeLast$0(); },
 endsWith$1: function(receiver, a0) { return receiver.endsWith$1(a0); },
 round$0: function(receiver) { return receiver.round$0(); },
 get$isInfinite: function(receiver) { return receiver.get$isInfinite(); },
 floor$0: function(receiver) { return receiver.floor$0(); },
 addLast$1: function(receiver, a0) { return receiver.addLast$1(a0); },
 get$hashCode: function(receiver) { return receiver.get$hashCode(); },
 allMatches$1: function(receiver, a0) { return receiver.allMatches$1(a0); },
 toInt$0: function(receiver) { return receiver.toInt$0(); },
 lastIndexOf$1: function(receiver, a0) { return receiver.lastIndexOf$1(a0); },
 abs$0: function(receiver) { return receiver.abs$0(); },
 clear$0: function(receiver) { return receiver.clear$0(); },
 contains$1: function(receiver, a0) { return receiver.contains$1(a0); },
 ceil$0: function(receiver) { return receiver.ceil$0(); },
 get$length: function(receiver) { return receiver.get$length(); },
 split$1: function(receiver, a0) { return receiver.split$1(a0); }
};

$$.JSFunction = {
 "super": "Object",
 toString$0: function(receiver) {
  return "Closure";
}
};

$$.JSBool = {
 "super": "Object",
 toString$0: function(receiver) {
  return String(receiver);
},
 get$hashCode: function(receiver) {
  return receiver ? 519018 : 218159;
},
 get$runtimeType: function(receiver) {
  return $.CTC13;
},
 is$bool: true
};

$$.JSNull = {
 "super": "Object",
 toString$0: function(receiver) {
  return "null";
},
 get$hashCode: function(receiver) {
  return 0;
},
 get$runtimeType: function(receiver) {
  return $.createRuntimeType("Null");
}
};

$$.JSArray = {
 "super": "Object",
 add$1: function(receiver, value) {
  $.checkGrowable(receiver, "add");
  receiver.push(value);
},
 removeLast$0: function(receiver) {
  $.checkGrowable(receiver, "removeLast");
  if (receiver.length === 0)
    throw $.$$throw($.RangeError$value(-1));
  return receiver.pop();
},
 addLast$1: function(receiver, value) {
  $.checkGrowable(receiver, "addLast");
  receiver.push(value);
},
 clear$0: function(receiver) {
  this.set$length(receiver, 0);
},
 forEach$1: function(receiver, f) {
  return $.Collections_forEach(receiver, f);
},
 indexOf$2: function(receiver, element, start) {
  if (!(typeof start === 'number' && Math.floor(start) === start))
    throw $.$$throw($.ArgumentError$(start));
  return $.Arrays_indexOf(receiver, element, start, receiver.length);
},
 lastIndexOf$2: function(receiver, element, start) {
  if (start == null)
    start = receiver.length - 1;
  return $.Arrays_lastIndexOf(receiver, element, start);
},
 lastIndexOf$1: function($,element) {
  return this.lastIndexOf$2($,element,null)
},
 contains$1: function(receiver, other) {
  var i;
  for (i = 0; i < receiver.length; ++i)
    if ($.eqB(other, receiver[i]))
      return true;
  return false;
},
 get$isEmpty: function(receiver) {
  return receiver.length === 0;
},
 toString$0: function(receiver) {
  return $.Collections_collectionToString(receiver);
},
 iterator$0: function(receiver) {
  return $.ListIterator$(receiver);
},
 get$hashCode: function(receiver) {
  return $.Primitives_objectHashCode(receiver);
},
 get$runtimeType: function(receiver) {
  return $.TypeImpl$($.getRuntimeTypeString(receiver));
},
 get$length: function(receiver) {
  return receiver.length;
},
 set$length: function(receiver, newLength) {
  if (!(typeof newLength === 'number' && Math.floor(newLength) === newLength))
    throw $.$$throw($.ArgumentError$(newLength));
  if (newLength < 0)
    throw $.$$throw($.RangeError$value(newLength));
  $.checkGrowable(receiver, "set length");
  receiver.length = newLength;
},
 is$List: function() { return true; },
 is$Collection: function() { return true; }
};

$$.JSNumber = {
 "super": "Object",
 get$isNaN: function(receiver) {
  return isNaN(receiver);
},
 abs$0: function(receiver) {
  return Math.abs(receiver);
},
 toInt$0: function(receiver) {
  var truncated;
  if (this.get$isNaN(receiver) === true)
    throw $.$$throw($.FormatException$("NaN"));
  if (this.get$isInfinite(receiver) === true)
    throw $.$$throw($.FormatException$("Infinity"));
  truncated = this.truncate$0(receiver);
  return truncated == -0.0 ? 0 : truncated;
},
 ceil$0: function(receiver) {
  return Math.ceil(receiver);
},
 floor$0: function(receiver) {
  return Math.floor(receiver);
},
 get$isInfinite: function(receiver) {
  return receiver == Infinity || receiver == -Infinity;
},
 round$0: function(receiver) {
  if (receiver < 0)
    return -Math.round(-receiver);
  else
    return Math.round(receiver);
},
 truncate$0: function(receiver) {
  return receiver < 0 ? this.ceil$0(receiver) : this.floor$0(receiver);
},
 toString$0: function(receiver) {
  if (receiver === 0 && (1 / receiver) < 0)
    return "-0.0";
  else
    return String(receiver);
},
 get$hashCode: function(receiver) {
  return receiver & 536870911;
}
};

$$.JSInt = {
 "super": "JSNumber",
 get$runtimeType: function(receiver) {
  return $.CTC11;
}
};

$$.JSDouble = {
 "super": "JSNumber",
 get$runtimeType: function(receiver) {
  return $.CTC12;
}
};

$$.JSString = {
 "super": "Object",
 charCodeAt$1: function(receiver, index) {
  if (!(typeof index === 'number'))
    throw $.$$throw($.ArgumentError$(index));
  if (index < 0)
    throw $.$$throw($.RangeError$value(index));
  if (index >= receiver.length)
    throw $.$$throw($.RangeError$value(index));
  return receiver.charCodeAt(index);
},
 allMatches$1: function(receiver, str) {
  $.checkString(str);
  return $.allMatchesInStringUnchecked(receiver, str);
},
 endsWith$1: function(receiver, other) {
  var otherLength, t1;
  $.checkString(other);
  otherLength = $.getInterceptor(other).get$length(other);
  t1 = receiver.length;
  if ($.gtB(otherLength, t1))
    return false;
  if (typeof otherLength !== 'number')
    throw $.iae(otherLength);
  return $.eq(other, this.substring$1(receiver, t1 - otherLength));
},
 replaceAll$2: function(receiver, from, to) {
  $.checkString(to);
  return $.stringReplaceAllUnchecked(receiver, from, to);
},
 split$1: function(receiver, pattern) {
  $.checkNull(pattern);
  return $.stringSplitUnchecked(receiver, pattern);
},
 substring$2: function(receiver, startIndex, endIndex) {
  $.checkNum(startIndex);
  if (endIndex == null)
    endIndex = receiver.length;
  $.checkNum(endIndex);
  if ($.ltB(startIndex, 0))
    throw $.$$throw($.RangeError$value(startIndex));
  if ($.gtB(startIndex, endIndex))
    throw $.$$throw($.RangeError$value(startIndex));
  if ($.gtB(endIndex, receiver.length))
    throw $.$$throw($.RangeError$value(endIndex));
  return receiver.substring(startIndex, endIndex);
},
 substring$1: function($,startIndex) {
  return this.substring$2($,startIndex,null)
},
 indexOf$2: function(receiver, other, start) {
  $.checkNull(other);
  if (!(typeof start === 'number' && Math.floor(start) === start))
    throw $.$$throw($.ArgumentError$(start));
  if (!(typeof other === 'string'))
    throw $.$$throw($.ArgumentError$(other));
  if (start < 0)
    return -1;
  return receiver.indexOf(other, start);
},
 lastIndexOf$2: function(receiver, other, start) {
  var t1;
  $.checkNull(other);
  if (!(typeof other === 'string'))
    throw $.$$throw($.ArgumentError$(other));
  if (!(start == null)) {
    if (!(typeof start === 'number'))
      throw $.$$throw($.ArgumentError$(start));
    if (start < 0)
      return -1;
    t1 = receiver.length;
    if (start >= t1) {
      if (other === "")
        return t1;
      start = t1 - 1;
    } else
      start = start;
  } else
    start = receiver.length - 1;
  return $.stringLastIndexOfUnchecked(receiver, other, start);
},
 lastIndexOf$1: function($,other) {
  return this.lastIndexOf$2($,other,null)
},
 contains$2: function(receiver, other, startIndex) {
  $.checkNull(other);
  return $.stringContainsUnchecked(receiver, other, startIndex);
},
 contains$1: function($,other) {
  return this.contains$2($,other,0)
},
 get$isEmpty: function(receiver) {
  return receiver.length === 0;
},
 toString$0: function(receiver) {
  return receiver;
},
 get$hashCode: function(receiver) {
  var i, hash, hash0, hash1;
  for (i = 0, hash = 0; i < receiver.length; ++i, hash = hash1) {
    hash0 = 536870911 & hash + receiver.charCodeAt(i);
    hash1 = 536870911 & hash0 + ((524287 & hash0) << 10 >>> 0);
    hash1 = hash1 ^ (hash1 >> 6);
  }
  hash0 = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
  hash0 = hash0 ^ (hash0 >> 11);
  return 536870911 & hash0 + ((16383 & hash0) << 15 >>> 0);
},
 get$runtimeType: function(receiver) {
  return $.CTC10;
},
 get$length: function(receiver) {
  return receiver.length;
},
 is$String: true
};

$$.Game = {"": ["gameCanvas", "hudCanvas", "gameContext", "hudContext", "lastTime", "world<"],
 "super": "Object",
 start$0: function() {
  var audioManager, groupManager, tagManager, player, camera, i, star, asteroid, t1, t2, t3, t4, t5, randomNumber, upgrade;
  audioManager = this.createAudioManager$0();
  this.world = $.World$();
  groupManager = $.GroupManager$();
  tagManager = $.TagManager$();
  this.world.addManager$1(tagManager);
  this.world.addManager$1(groupManager);
  player = this.world.createEntity$0();
  player.addComponent$1($.Transform$(1500, 1500, 0, 0));
  player.addComponent$1($.Velocity$(0, 0));
  player.addComponent$1($.Spatial$("spaceship_dummy.png", 0.5));
  player.addComponent$1($.CircularBody$(22.5));
  player.addComponent$1($.Mass$(50));
  player.addComponent$1($.Status$(100, 20));
  player.addComponent$1($.MiniMapRenderable$("#1fe9f6"));
  player.addComponent$1($.Cannon$(1, 10, 200));
  player.addToWorld$0();
  camera = this.world.createEntity$0();
  camera.addComponent$1($.CameraPosition$(0, 0));
  camera.addToWorld$0();
  for (i = 0; i < $.sqrt(2560000) / 10; ++i) {
    star = this.world.createEntity$0();
    star.addComponent$1($.Transform$($.mul($.get$random().nextDouble$0(), 1600), $.mul($.get$random().nextDouble$0(), 1600), 0, 0));
    star.addComponent$1($.Spatial$("star_0" + $.S($.get$random().nextInt$1(6)) + ".png", 1));
    star.addComponent$1($.Background$());
    star.addToWorld$0();
    groupManager.add$2(star, "GROUP_BACKGROUND");
  }
  for (i = 0; i < $.sqrt(2560000) / 100; ++i) {
    asteroid = this.world.createEntity$0();
    t1 = $.mul($.get$random().nextDouble$0(), 1600);
    t2 = $.mul($.get$random().nextDouble$0(), 1600);
    t3 = $.mul($.get$random().nextDouble$0(), 6.283185307179586);
    t4 = $.get$random().nextDouble$0();
    if (typeof t4 !== 'number')
      throw $.iae(t4);
    asteroid.addComponent$1($.Transform$(t1, t2, t3, 0.15 + 0.2 * t4));
    asteroid.addComponent$1($.generateRandomVelocity(0.5, 1.5));
    t5 = $.get$random().nextDouble$0();
    if (typeof t5 !== 'number')
      throw $.iae(t5);
    randomNumber = 0.2 + 0.5 * t5;
    asteroid.addComponent$1($.Spatial$asSprite("asteroid_strip64.png", 0, 0, 128, 128, randomNumber));
    asteroid.addComponent$1($.CircularBody$(50 * randomNumber));
    asteroid.addComponent$1($.Mass$(100 * randomNumber));
    asteroid.addComponent$1($.MiniMapRenderable$("#333"));
    asteroid.addComponent$1($.Status$(100, 20));
    asteroid.addToWorld$0();
  }
  for (i = 0; i < $.sqrt(2560000) / 1000; ++i) {
    upgrade = this.world.createEntity$0();
    upgrade.addComponent$1($.Transform$($.mul($.get$random().nextDouble$0(), 1600), $.mul($.get$random().nextDouble$0(), 1600), 0, 0));
    upgrade.addComponent$1($.generateRandomVelocity(0.5, 1.5));
    upgrade.addComponent$1($.Spatial$("upgrade_health.png", 0.2));
    upgrade.addComponent$1($.CircularBody$(10));
    upgrade.addComponent$1($.Mass$(20));
    upgrade.addComponent$1($.MiniMapRenderable$("green"));
    upgrade.addComponent$1($.Upgrade$());
    upgrade.addToWorld$0();
  }
  tagManager.register$2("CAMERA", camera);
  tagManager.register$2("PLAYER", player);
  this.world.addSystem$1($.PlayerControlSystem$(this.gameCanvas));
  this.world.addSystem$1($.MovementSystem$());
  this.world.addSystem$1($.UpgradeCollectionSystem$());
  this.world.addSystem$1($.CircularCollisionDetectionSystem$());
  this.world.addSystem$1($.BulletSpawningSystem$(audioManager));
  this.world.addSystem$1($.PlayerDestructionSystem$());
  this.world.addSystem$1($.CameraSystem$());
  this.world.addSystem$1($.ExpirationSystem$());
  this.world.addSystem$1($.BackgroundRenderSystem$(this.gameContext));
  this.world.addSystem$1($.SpatialRenderingSystem$(this.gameContext));
  this.world.addSystem$1($.MiniMapRenderSystem$(this.hudContext));
  this.world.addSystem$1($.HudRenderSystem$(this.hudContext));
  this.world.addSystem$1($.DebugSystem$());
  this.world.initialize$0();
  this.world.set$delta(16);
  this.world.process$0();
  this.gameLoop$1(16);
},
 gameLoop$1: function(time) {
  var t1 = time - this.lastTime;
  this.world.set$delta(t1);
  this.lastTime = time;
  this.world.process$0();
  $.window().requestAnimationFrame$1(this.get$gameLoop());
},
 get$gameLoop: function() { return new $.BoundClosure(this, 'gameLoop$1'); },
 createAudioManager$0: function(exception) {
  var audioManager, location$, t1, slashIndex, source, clip;
  try {
    audioManager = $.AudioManager$();
    location$ = $.window().get$location().get$href();
    t1 = location$;
    slashIndex = $.getInterceptor(t1).lastIndexOf$1(t1, "/");
    if ($.ltB(slashIndex, 0))
      audioManager.set$baseURL("");
    else {
      t1 = location$;
      t1 = $.getInterceptor(t1).substring$2(t1, 0, slashIndex);
      audioManager.set$baseURL(t1);
    }
    source = audioManager.makeSource$1("non-positional");
    source.set$positional(false);
    clip = audioManager.makeClip$2("shoot_sound", "resources/shoot.ogg");
    clip.load$0();
    t1 = audioManager;
    return t1;
  } catch (exception) {
    $.unwrapException(exception);
  }

  return $.AudioManagerDummy$();
},
 Game$2: function(gameCanvas, hudCanvas) {
  this.gameContext = this.gameCanvas.get$context2d();
  this.hudContext = this.hudCanvas.get$context2d();
}
};

$$.AudioManagerDummy = {
 "super": "Object",
 noSuchMethod$1: function(im) {
}
};

$$.DebugSystem = {"": ["fpsElement", "playerPosElement", "cameraPosElement", "entityCountElement", "cameraPositionMapper", "positionMapper", "tagManager", "_systemBit", "world", "_actives", "_all", "_excluded", "_one", "_liblib1$_dummy", "_passive"],
 "super": "VoidEntitySystem",
 initialize$0: function() {
  var t1, t2, t3, t4;
  t1 = $.CameraPosition$hack();
  this.cameraPositionMapper = $.ComponentMapper$($.getInterceptor(t1).get$runtimeType(t1), this.world, 'CameraPosition');
  t2 = $.Transform$hack();
  this.positionMapper = $.ComponentMapper$($.getInterceptor(t2).get$runtimeType(t2), this.world, 'Transform');
  t3 = this.world;
  t4 = $.TagManager$();
  this.tagManager = t3.getManager$1($.getInterceptor(t4).get$runtimeType(t4));
},
 processSystem$0: function() {
  var camera, player, cameraPos, playerPos, t1, t2;
  camera = this.tagManager.getEntity$1("CAMERA");
  player = this.tagManager.getEntity$1("PLAYER");
  cameraPos = this.cameraPositionMapper.get$1(camera);
  playerPos = this.positionMapper.get$1(player);
  t1 = this.world.get$delta();
  if (typeof t1 !== 'number')
    throw $.iae(t1);
  t2 = $.S($.tdiv(1000, t1));
  this.fpsElement.set$text(t2);
  t2 = "x: " + $.S(cameraPos.get$x()) + "; y: " + $.S(cameraPos.get$y());
  this.cameraPosElement.set$text(t2);
  t2 = "x: " + $.S(playerPos.get$x()) + "; y: " + $.S(playerPos.get$y());
  this.playerPosElement.set$text(t2);
  t2 = $.S(this.world.get$entityManager().get$activeEntityCount());
  this.entityCountElement.set$text(t2);
}
};

$$.Transform = {"": ["_x", "_y", "angle=", "rotationRate="],
 "super": "Component",
 get$x: function() {
  return this._x;
},
 get$y: function() {
  return this._y;
},
 set$x: function(x) {
  var t1 = $.mod(x, 1600);
  this._x = t1;
  return t1;
},
 set$y: function(y) {
  var t1 = $.mod(y, 1600);
  this._y = t1;
  return t1;
}
};

$$.CameraPosition = {"": ["_x", "_y", "angle", "rotationRate"],
 "super": "Transform"
};

$$.Velocity = {"": ["x=", "y="],
 "super": "Component"
};

$$.Spatial = {"": ["resource>", "isSprite>", "width=", "height=", "x=", "y=", "scale>"],
 "super": "Component",
 Spatial$asSprite$6$scale: function(resource, x, y, width, height, scale) {
  this.isSprite = true;
},
 Spatial$2$scale: function(resource, scale) {
  this.isSprite = false;
}
};

$$.Background = {
 "super": "Component"
};

$$.Status = {"": ["health=", "maxHealth=", "maxVelocity", "destroyed="],
 "super": "Component",
 Status$2$maxHealth$maxVelocity: function(maxHealth, maxVelocity) {
  this.health = this.maxHealth;
}
};

$$.CircularBody = {"": ["radius>"],
 "super": "Component"
};

$$.Mass = {"": ["value="],
 "super": "Component"
};

$$.Cannon = {"": ["shoot<", "cooldownTimer=", "cooldownTime", "bulletSpeed>", "bulletMass>"],
 "super": "Component",
 get$canShoot: function() {
  if (this.shoot === true && $.leB(this.cooldownTimer, 0))
    return true;
  return false;
},
 resetCooldown$0: function() {
  this.cooldownTimer = this.cooldownTime;
}
};

$$.ExpirationTimer = {"": ["maxTime", "timeLeft"],
 "super": "Component",
 expireBy$1: function(delta) {
  this.timeLeft = $.sub(this.timeLeft, delta);
},
 get$expired: function() {
  return $.le(this.timeLeft, 0);
},
 get$percentLeft: function() {
  return $.div(this.timeLeft, this.maxTime);
},
 ExpirationTimer$1: function(maxTime) {
  this.timeLeft = this.maxTime;
}
};

$$.MiniMapRenderable = {"": ["color>"],
 "super": "Component"
};

$$.Upgrade = {
 "super": "Component"
};

$$.OnScreenProcessingSystem = {"": ["transformMapper="],
 "super": "EntityProcessingSystem",
 initialize$0: function() {
  var t1, t2, t3, t4;
  t1 = $.Transform$hack();
  this.set$transformMapper($.ComponentMapper$($.getInterceptor(t1).get$runtimeType(t1), this.world, 'Transform'));
  t2 = $.CameraPosition$hack();
  this.cameraPositionMapper = $.ComponentMapper$($.getInterceptor(t2).get$runtimeType(t2), this.world, 'CameraPosition');
  t3 = this.world;
  t4 = $.TagManager$();
  this.tagManager = t3.getManager$1($.getInterceptor(t4).get$runtimeType(t4));
},
 processEntities$1: function(entities) {
  var camera, cameraPos, entitiesOnScreen;
  camera = this.tagManager.getEntity$1("CAMERA");
  cameraPos = this.cameraPositionMapper.get$1(camera);
  entitiesOnScreen = $.Bag$(16, 'Entity');
  $.getInterceptor(entities).forEach$1(entities, new $.OnScreenProcessingSystem_processEntities_anon(entitiesOnScreen, cameraPos, this));
  this.processEntitiesOnScreen$1(entitiesOnScreen);
},
 isWithtinXRange$2: function(pos, camPos) {
  var t1, distanceX;
  t1 = $.sub(camPos.get$x(), pos.get$x());
  distanceX = $.getInterceptor(t1).abs$0(t1);
  return $.ltB(distanceX, 850) || $.gtB(distanceX, 750);
},
 isWithtinYRange$2: function(pos, camPos) {
  var t1, distanceY;
  t1 = $.sub(camPos.get$y(), pos.get$y());
  distanceY = $.getInterceptor(t1).abs$0(t1);
  return $.ltB(distanceY, 450) || $.gtB(distanceY, 1150);
}
};

$$.OnScreenEntityProcessingSystem = {
 "super": "OnScreenProcessingSystem",
 initialize$0: function() {
  $.OnScreenProcessingSystem.prototype.initialize$0.call(this);
},
 processEntitiesOnScreen$1: function(entities) {
  $.getInterceptor(entities).forEach$1(entities, new $.OnScreenEntityProcessingSystem_processEntitiesOnScreen_anon(this));
}
};

$$.MovementSystem = {"": ["positionMapper", "velocityMapper", "_systemBit", "world", "_actives", "_all", "_excluded", "_one", "_liblib1$_dummy", "_passive"],
 "super": "EntityProcessingSystem",
 initialize$0: function() {
  var t1, t2;
  t1 = $.Transform$hack();
  this.positionMapper = $.ComponentMapper$($.getInterceptor(t1).get$runtimeType(t1), this.world, 'Transform');
  t2 = $.Velocity$hack();
  this.velocityMapper = $.ComponentMapper$($.getInterceptor(t2).get$runtimeType(t2), this.world, 'Velocity');
},
 processEntity$1: function(entity) {
  var transform, vel;
  transform = this.positionMapper.get$1(entity);
  vel = this.velocityMapper.get$1(entity);
  transform.set$x($.add(transform.get$x(), vel.get$x()));
  transform.set$y($.add(transform.get$y(), vel.get$y()));
  transform.set$angle($.add(transform.get$angle(), transform.get$rotationRate()));
}
};

$$.CameraSystem = {"": ["positionMapper", "cameraPositionMapper", "tagManager", "_systemBit", "world", "_actives", "_all", "_excluded", "_one", "_liblib1$_dummy", "_passive"],
 "super": "VoidEntitySystem",
 initialize$0: function() {
  var t1, t2, t3, t4;
  t1 = $.Transform$hack();
  this.positionMapper = $.ComponentMapper$($.getInterceptor(t1).get$runtimeType(t1), this.world, 'Transform');
  t2 = $.CameraPosition$hack();
  this.cameraPositionMapper = $.ComponentMapper$($.getInterceptor(t2).get$runtimeType(t2), this.world, 'CameraPosition');
  t3 = this.world;
  t4 = $.TagManager$();
  this.tagManager = t3.getManager$1($.getInterceptor(t4).get$runtimeType(t4));
},
 processSystem$0: function() {
  var player, camera, playerPos, cameraPos;
  player = this.tagManager.getEntity$1("PLAYER");
  camera = this.tagManager.getEntity$1("CAMERA");
  playerPos = this.positionMapper.get$1(player);
  cameraPos = this.cameraPositionMapper.get$1(camera);
  cameraPos.set$x($.sub(playerPos.get$x(), 400));
  cameraPos.set$y($.sub(playerPos.get$y(), 200));
}
};

$$.UpgradeCollectionSystem = {"": ["bodyMapper>", "upgradeMapper", "status", "transform", "body", "transformMapper", "cameraPositionMapper", "tagManager", "_systemBit", "world", "_actives", "_all", "_excluded", "_one", "_liblib1$_dummy", "_passive"],
 "super": "OnScreenEntityProcessingSystem",
 transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) { return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5); },
 initialize$0: function() {
  var t1, t2, t3, statusMapper, t4, t5, player;
  $.OnScreenEntityProcessingSystem.prototype.initialize$0.call(this);
  t1 = $.CircularBody$hack();
  this.bodyMapper = $.ComponentMapper$($.getInterceptor(t1).get$runtimeType(t1), this.world, 'CircularBody');
  t2 = $.Upgrade$hack();
  this.upgradeMapper = $.ComponentMapper$($.getInterceptor(t2).get$runtimeType(t2), this.world, 'Upgrade');
  t3 = $.Status$hack();
  statusMapper = $.ComponentMapper$($.getInterceptor(t3).get$runtimeType(t3), this.world, 'Status');
  t4 = this.world;
  t5 = $.TagManager$();
  player = t4.getManager$1($.getInterceptor(t5).get$runtimeType(t5)).getEntity$1("PLAYER");
  this.status = statusMapper.get$1(player);
  this.transform = this.transformMapper.get$1(player);
  this.body = this.bodyMapper.get$1(player);
},
 processEntityOnScreen$1: function(entity) {
  var upgradeTransform, upgradeBody, t1;
  upgradeTransform = this.transformMapper.get$1(entity);
  upgradeBody = this.bodyMapper.get$1(entity);
  if ($.Utils_doCirclesCollide(this.transform.get$x(), this.transform.get$y(), this.body.get$radius(), upgradeTransform.get$x(), upgradeTransform.get$y(), upgradeBody.get$radius()) === true) {
    this.upgradeMapper.get$1(entity);
    t1 = this.status;
    t1.set$maxHealth($.add(t1.get$maxHealth(), 10));
    t1 = this.status;
    t1.set$health(t1.get$maxHealth());
    entity.deleteFromWorld$0();
  }
},
 end$0: function() {
  this.world.processEntityChanges$0();
}
};

$$.CircularCollisionDetectionSystem = {"": ["transformMapper=", "bodyMapper>", "velocityMapper", "massMapper", "statusMapper", "lib4$OnScreenProcessingSystem$transformMapper", "cameraPositionMapper", "tagManager", "_systemBit", "world", "_actives", "_all", "_excluded", "_one", "_liblib1$_dummy", "_passive"],
 "super": "OnScreenProcessingSystem",
 initialize$0: function() {
  var t1, t2, t3, t4, t5;
  $.OnScreenProcessingSystem.prototype.initialize$0.call(this);
  t1 = $.Transform$hack();
  this.transformMapper = $.ComponentMapper$($.getInterceptor(t1).get$runtimeType(t1), this.world, 'Transform');
  t2 = $.CircularBody$hack();
  this.bodyMapper = $.ComponentMapper$($.getInterceptor(t2).get$runtimeType(t2), this.world, 'CircularBody');
  t3 = $.Velocity$hack();
  this.velocityMapper = $.ComponentMapper$($.getInterceptor(t3).get$runtimeType(t3), this.world, 'Velocity');
  t4 = $.Mass$hack();
  this.massMapper = $.ComponentMapper$($.getInterceptor(t4).get$runtimeType(t4), this.world, 'Mass');
  t5 = $.Status$hack();
  this.statusMapper = $.ComponentMapper$($.getInterceptor(t5).get$runtimeType(t5), this.world, 'Status');
},
 processEntitiesOnScreen$1: function(entities) {
  var i, j, j0, e1, e2, t1, t2, c1, c2, v1, v2, m1, m2, cpx, cpy, dx, phi, v1i, v2i, ang1, ang2, t3, v1xr, v1yr, t4, v2xr, v2yr, t5, p1, p2, mTotal, t6, v1fxr, v2fxr, t7, t8, s1, s2;
  if ($.gtB(entities.get$size(), 1))
    for (i = 0; $.ltB(i, $.sub(entities.get$size(), 1)); i = j)
      for (j = i + 1, j0 = j; $.ltB(j0, entities.get$size()); ++j0) {
        e1 = entities.operator$index$1(i);
        e2 = entities.operator$index$1(j0);
        t1 = this.transformMapper.get$1(e1);
        t2 = this.transformMapper.get$1(e2);
        c1 = this.bodyMapper.get$1(e1);
        c2 = this.bodyMapper.get$1(e2);
        if ($.Utils_doCirclesCollide(t1.get$x(), t1.get$y(), c1.get$radius(), t2.get$x(), t2.get$y(), c2.get$radius()) === true) {
          v1 = this.velocityMapper.get$1(e1);
          v2 = this.velocityMapper.get$1(e2);
          m1 = this.massMapper.get$1(e1);
          m2 = this.massMapper.get$1(e2);
          cpx = $.div($.add($.mul(t1.get$x(), c1.get$radius()), $.mul(t2.get$x(), c2.get$radius())), $.add(c1.get$radius(), c2.get$radius()));
          cpy = $.div($.add($.mul(t1.get$y(), c1.get$radius()), $.mul(t2.get$y(), c2.get$radius())), $.add(c1.get$radius(), c2.get$radius()));
          dx = $.sub(cpx, t1.get$x());
          phi = $.atan2($.sub(cpy, t1.get$y()), dx);
          v1i = $.sqrt($.add($.mul(v1.get$x(), v1.get$x()), $.mul(v1.get$y(), v1.get$y())));
          v2i = $.sqrt($.add($.mul(v2.get$x(), v2.get$x()), $.mul(v2.get$y(), v2.get$y())));
          ang1 = $.atan2(v1.get$y(), v1.get$x());
          ang2 = $.atan2(v2.get$y(), v2.get$x());
          t3 = ang1 - phi;
          v1xr = v1i * $.cos(t3);
          v1yr = v1i * $.sin(t3);
          t4 = ang2 - phi;
          v2xr = v2i * $.cos(t4);
          v2yr = v2i * $.sin(t4);
          t5 = m1.get$value();
          if (typeof t5 !== 'number')
            throw $.iae(t5);
          p1 = v1xr * t5;
          t5 = m2.get$value();
          if (typeof t5 !== 'number')
            throw $.iae(t5);
          p2 = v2xr * t5;
          mTotal = $.add(m1.get$value(), m2.get$value());
          t5 = p1 + 2 * p2;
          t6 = $.mul(m2.get$value(), v1xr);
          if (typeof t6 !== 'number')
            throw $.iae(t6);
          t6 = t5 - t6;
          if (typeof mTotal !== 'number')
            throw $.iae(mTotal);
          v1fxr = t6 / mTotal;
          t6 = p2 + 2 * p1;
          t5 = $.mul(m1.get$value(), v2xr);
          if (typeof t5 !== 'number')
            throw $.iae(t5);
          v2fxr = (t6 - t5) / mTotal;
          t7 = $.cos(phi) * v1fxr;
          t8 = phi + 1.5707963267948966;
          v1.set$x(t7 + $.cos(t8) * v1yr);
          v1.set$y($.sin(phi) * v1fxr + $.sin(t8) * v1yr);
          v2.set$x($.cos(phi) * v2fxr + $.cos(t8) * v2yr);
          v2.set$y($.sin(phi) * v2fxr + $.sin(t8) * v2yr);
          s1 = this.statusMapper.getSafe$1(e1);
          s2 = this.statusMapper.getSafe$1(e2);
          if (!(null == s1))
            s1.set$health($.sub(s1.get$health(), $.div($.add($.getInterceptor(p2).abs$0(p2), $.getInterceptor(p1).abs$0(p1)), 100)));
          if (!(null == s2))
            s2.set$health($.sub(s2.get$health(), $.div($.add($.getInterceptor(p2).abs$0(p2), $.getInterceptor(p1).abs$0(p1)), 100)));
        }
      }
}
};

$$.BulletSpawningSystem = {"": ["audioManager", "transformMapper>", "cannonMapper", "velocityMapper", "massMapper", "_systemBit", "world", "_actives", "_all", "_excluded", "_one", "_liblib1$_dummy", "_passive"],
 "super": "EntityProcessingSystem",
 initialize$0: function() {
  var t1, t2, t3, t4;
  t1 = $.Transform$hack();
  this.transformMapper = $.ComponentMapper$($.getInterceptor(t1).get$runtimeType(t1), this.world, 'Transform');
  t2 = $.Velocity$hack();
  this.velocityMapper = $.ComponentMapper$($.getInterceptor(t2).get$runtimeType(t2), this.world, 'Velocity');
  t3 = $.Mass$hack();
  this.massMapper = $.ComponentMapper$($.getInterceptor(t3).get$runtimeType(t3), this.world, 'Mass');
  t4 = $.Cannon$hack();
  this.cannonMapper = $.ComponentMapper$($.getInterceptor(t4).get$runtimeType(t4), this.world, 'Cannon');
},
 processEntity$1: function(entity) {
  var cannon = this.cannonMapper.get$1(entity);
  if (cannon.get$canShoot() === true)
    this.fireBullet$2(entity, cannon);
  else if ($.gtB(cannon.get$cooldownTimer(), 0))
    cannon.set$cooldownTimer($.sub(cannon.get$cooldownTimer(), this.world.get$delta()));
},
 fireBullet$2: function(shooter, cannon) {
  var transform, shooterVel, shooterMass, bullet, cosx, siny, t1;
  transform = this.transformMapper.get$1(shooter);
  shooterVel = this.velocityMapper.get$1(shooter);
  shooterMass = this.massMapper.get$1(shooter);
  cannon.resetCooldown$0();
  bullet = this.world.createEntity$0();
  cosx = $.TrigUtil_cos(transform.get$angle());
  siny = $.TrigUtil_sin(transform.get$angle());
  bullet.addComponent$1($.Transform$($.add(transform.get$x(), $.mul(cosx, 26)), $.add(transform.get$y(), $.mul(siny, 26)), 0, 0));
  bullet.addComponent$1($.Velocity$($.add(shooterVel.get$x(), $.mul(cannon.get$bulletSpeed(), cosx)), $.add(shooterVel.get$y(), $.mul(cannon.get$bulletSpeed(), siny))));
  bullet.addComponent$1($.CircularBody$(2));
  bullet.addComponent$1($.Mass$(cannon.get$bulletMass()));
  bullet.addComponent$1($.Spatial$("bullet_dummy.png", 1));
  bullet.addComponent$1($.ExpirationTimer$(3000));
  bullet.addToWorld$0();
  t1 = new $.BulletSpawningSystem_fireBullet_getVelocityAfterRecoil(shooterMass, cannon);
  shooterVel.set$x(t1.call$2(shooterVel.get$x(), cosx));
  shooterVel.set$y(t1.call$2(shooterVel.get$y(), siny));
  this.audioManager.playClipFromSource$2("non-positional", "shoot_sound");
}
};

$$.ExpirationSystem = {"": ["timerMapper", "_systemBit", "world", "_actives", "_all", "_excluded", "_one", "_liblib1$_dummy", "_passive"],
 "super": "EntityProcessingSystem",
 initialize$0: function() {
  var t1 = $.ExpirationTimer$hack();
  this.timerMapper = $.ComponentMapper$($.getInterceptor(t1).get$runtimeType(t1), this.world, 'ExpirationTimer');
},
 processEntity$1: function(entity) {
  var timer = this.timerMapper.get$1(entity);
  if (timer.get$expired() === true)
    entity.deleteFromWorld$0();
  else
    timer.expireBy$1(this.world.get$delta());
}
};

$$.PlayerStatusProcessingSystem = {
 "super": "VoidEntitySystem",
 initialize$0: function() {
  var t1, statusMapper, t2, t3;
  t1 = $.Status$hack();
  statusMapper = $.ComponentMapper$($.getInterceptor(t1).get$runtimeType(t1), this.world, 'Status');
  t2 = this.world;
  t3 = $.TagManager$();
  this.player = t2.getManager$1($.getInterceptor(t3).get$runtimeType(t3)).getEntity$1("PLAYER");
  this.status = statusMapper.get$1(this.player);
}
};

$$.PlayerDestructionSystem = {"": ["cannon", "transform", "player", "status", "_systemBit", "world", "_actives", "_all", "_excluded", "_one", "_liblib1$_dummy", "_passive"],
 "super": "PlayerStatusProcessingSystem",
 transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) { return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5); },
 initialize$0: function() {
  var t1, cannonMapper, t2, transformMapper;
  $.PlayerStatusProcessingSystem.prototype.initialize$0.call(this);
  t1 = $.Cannon$hack();
  cannonMapper = $.ComponentMapper$($.getInterceptor(t1).get$runtimeType(t1), this.world, 'Cannon');
  t2 = $.Transform$hack();
  transformMapper = $.ComponentMapper$($.getInterceptor(t2).get$runtimeType(t2), this.world, 'Transform');
  this.cannon = cannonMapper.get$1(this.player);
  this.transform = transformMapper.get$1(this.player);
},
 processSystem$0: function() {
  var t1, explosion;
  t1 = this.status;
  if (t1.get$destroyed() !== true && $.ltB(t1.get$health(), 0)) {
    this.cannon.set$shoot(false);
    this.status.set$destroyed(true);
    explosion = this.world.createEntity$0();
    this.transform.set$rotationRate(0.1);
    explosion.addComponent$1(this.transform);
    explosion.addComponent$1($.Spatial$("spaceship_dummy.png", 0.5));
    explosion.addToWorld$0();
  }
}
};

$$.SpatialRenderingSystem = {"": ["context2d>", "spatialMapper", "timerMapper", "cameraPos", "transformMapper", "cameraPositionMapper", "tagManager", "_systemBit", "world", "_actives", "_all", "_excluded", "_one", "_liblib1$_dummy", "_passive"],
 "super": "OnScreenEntityProcessingSystem",
 initialize$0: function() {
  var t1, t2;
  $.OnScreenEntityProcessingSystem.prototype.initialize$0.call(this);
  t1 = $.Spatial$hack();
  this.spatialMapper = $.ComponentMapper$($.getInterceptor(t1).get$runtimeType(t1), this.world, 'Spatial');
  t2 = $.ExpirationTimer$hack();
  this.timerMapper = $.ComponentMapper$($.getInterceptor(t2).get$runtimeType(t2), this.world, 'ExpirationTimer');
},
 begin$0: function() {
  var camera = this.tagManager.getEntity$1("CAMERA");
  this.cameraPos = this.cameraPositionMapper.get$1(camera);
},
 processEntityOnScreen$1: function(entity) {
  var spatial = this.spatialMapper.get$1(entity);
  $.ImageCache_withImage(spatial.get$resource(), new $.SpatialRenderingSystem_processEntityOnScreen_anon(spatial, entity, this));
},
 drawImage$3: function(image, entity, spatial) {
  var transform, timer, t1, width, height, t2, t3, t4, width0, height0;
  transform = this.transformMapper.get$1(entity);
  timer = this.timerMapper.getSafe$1(entity);
  t1 = this.context2d;
  t1.save$0();
  try {
    t1.set$lineWidth(0.5);
    t1.set$fillStyle("white");
    t1.set$strokeStyle("white");
    t1.beginPath$0();
    if ($.gtB(this.cameraPos.get$x(), 800) && $.ltB(transform.get$x(), 800))
      t1.translate$2(1600, 0);
    if ($.gtB(this.cameraPos.get$y(), 1200) && $.ltB(transform.get$y(), 400))
      t1.translate$2(0, 1600);
    t1.translate$2(transform.get$x(), transform.get$y());
    if (!(null == timer))
      t1.set$globalAlpha(timer.get$percentLeft());
    if (spatial.get$isSprite() === true) {
      width = $.mul(spatial.get$width(), spatial.get$scale());
      height = $.mul(spatial.get$height(), spatial.get$scale());
      t2 = image;
      t3 = spatial.get$x();
      t4 = transform.get$angle();
      t1.drawImage$9(t2, $.add(t3, $.mod($.mul($.getInterceptor(t4).round$0(t4), 128), 8192)), spatial.get$y(), spatial.get$width(), spatial.get$height(), $.tdiv($.neg(width), 2), $.tdiv($.neg(height), 2), width, height);
    } else {
      width0 = $.mul(image.get$width(), spatial.get$scale());
      height0 = $.mul(image.get$height(), spatial.get$scale());
      t1.rotate$1(transform.get$angle());
      t1.drawImage$5(image, $.tdiv($.neg(width0), 2), $.tdiv($.neg(height0), 2), width0, height0);
    }
    t1.closePath$0();
    t1.fill$0();
    t1.stroke$0();
  } finally {
    t1.restore$0();
  }
}
};

$$.BackgroundRenderSystem = {"": ["OVERLAP_WIDTH", "OVERLAP_HEIGHT", "bgCanvas", "context2d>", "cameraPositionMapper", "tagManager", "_systemBit", "world", "_actives", "_all", "_excluded", "_one", "_liblib1$_dummy", "_passive"],
 "super": "VoidEntitySystem",
 initialize$0: function() {
  var t1, t2, t3;
  t1 = $.CameraPosition$hack();
  this.cameraPositionMapper = $.ComponentMapper$($.getInterceptor(t1).get$runtimeType(t1), this.world, 'CameraPosition');
  t2 = this.world;
  t3 = $.TagManager$();
  this.tagManager = t2.getManager$1($.getInterceptor(t3).get$runtimeType(t3));
  this.initBackground$0();
},
 initBackground$0: function() {
  var t1, t2, groupManager, spatialMapper, t3, transformMapper, t4, t5, t6, bgContext;
  t1 = this.world;
  t2 = $.GroupManager$();
  groupManager = t1.getManager$1($.getInterceptor(t2).get$runtimeType(t2));
  t1 = $.Spatial$hack();
  spatialMapper = $.ComponentMapper$($.getInterceptor(t1).get$runtimeType(t1), this.world, 'Spatial');
  t3 = $.Transform$hack();
  transformMapper = $.ComponentMapper$($.getInterceptor(t3).get$runtimeType(t3), this.world, 'Transform');
  t4 = this.OVERLAP_WIDTH;
  t5 = 1600 + t4 * 2;
  t6 = this.OVERLAP_HEIGHT;
  this.bgCanvas = $.CanvasElement_CanvasElement(1600 + t6 * 2, t5);
  bgContext = this.bgCanvas.get$context2d();
  bgContext.setTransform$6(1, 0, 0, 1, 0, 0);
  bgContext.translate$2(t4, t6);
  t6 = groupManager.getEntities$1("GROUP_BACKGROUND");
  $.getInterceptor(t6).forEach$1(t6, new $.BackgroundRenderSystem_initBackground_anon(bgContext, transformMapper, spatialMapper));
},
 processSystem$0: function() {
  var camera, cameraPos, t1, t2, t3, srcX, t4, t5, srcY, overlapWidthLeft, overlapWidthRight, overlapDestX, overlapDestY1, overlapHeightTop, overlapHeightBottom, overlapDestY, overlapWidthLeft0, overlapWidthRight0, t6, overlapHeightTop0, t7, overlapHeightBottom0, overlapDestX0, overlapDestY0;
  camera = this.tagManager.getEntity$1("CAMERA");
  cameraPos = this.cameraPositionMapper.get$1(camera);
  t1 = this.context2d;
  t1.setTransform$6(1, 0, 0, 1, 0, 0);
  t1.translate$2($.neg(cameraPos.get$x()), $.neg(cameraPos.get$y()));
  t1.set$fillStyle("black");
  t1.beginPath$0();
  t1.rect$4(cameraPos.get$x(), cameraPos.get$y(), 800, 400);
  t1.fill$0();
  t1.stroke$0();
  t1.closePath$0();
  t1.save$0();
  try {
    t1.beginPath$0();
    t2 = cameraPos.get$x();
    t3 = this.OVERLAP_WIDTH;
    srcX = $.add(t2, t3);
    t4 = cameraPos.get$y();
    t5 = this.OVERLAP_HEIGHT;
    srcY = $.add(t4, t5);
    if ($.ltB(cameraPos.get$x(), 800) && $.ltB(cameraPos.get$y(), 1200))
      t1.drawImage$9(this.bgCanvas, srcX, srcY, 800, 400, cameraPos.get$x(), cameraPos.get$y(), 800, 400);
    else if ($.gtB(cameraPos.get$x(), 800) && $.ltB(cameraPos.get$y(), 1200)) {
      t2 = cameraPos.get$x();
      if (typeof t2 !== 'number')
        throw $.iae(t2);
      overlapWidthLeft = 1600 - t2 + t3;
      t4 = cameraPos.get$x();
      if (typeof t4 !== 'number')
        throw $.iae(t4);
      overlapWidthRight = 800 - (1600 - t4) + t3;
      overlapDestX = 1600 - t3;
      t1.drawImage$9(this.bgCanvas, srcX, srcY, overlapWidthLeft, 400, cameraPos.get$x(), cameraPos.get$y(), overlapWidthLeft, 400);
      t1.drawImage$9(this.bgCanvas, 0, srcY, overlapWidthRight, 400, overlapDestX, cameraPos.get$y(), overlapWidthRight, 400);
    } else {
      t2 = $.ltB(cameraPos.get$x(), 800) && $.gtB(cameraPos.get$y(), 1200);
      overlapDestY1 = 1600 - t5;
      if (t2) {
        t2 = cameraPos.get$y();
        if (typeof t2 !== 'number')
          throw $.iae(t2);
        overlapHeightTop = 1600 - t2 + t5;
        t3 = cameraPos.get$y();
        if (typeof t3 !== 'number')
          throw $.iae(t3);
        overlapHeightBottom = 400 - (1600 - t3) + t5;
        overlapDestY = overlapDestY1;
        t1.drawImage$9(this.bgCanvas, srcX, srcY, 800, overlapHeightTop, cameraPos.get$x(), cameraPos.get$y(), 800, overlapHeightTop);
        t1.drawImage$9(this.bgCanvas, srcX, 0, 800, overlapHeightBottom, cameraPos.get$x(), overlapDestY, 800, overlapHeightBottom);
      } else {
        t2 = cameraPos.get$x();
        if (typeof t2 !== 'number')
          throw $.iae(t2);
        overlapWidthLeft0 = 1600 - t2 + t3;
        t4 = cameraPos.get$x();
        if (typeof t4 !== 'number')
          throw $.iae(t4);
        overlapWidthRight0 = 800 - (1600 - t4) + t3;
        t6 = cameraPos.get$y();
        if (typeof t6 !== 'number')
          throw $.iae(t6);
        overlapHeightTop0 = 1600 - t6 + t5;
        t7 = cameraPos.get$y();
        if (typeof t7 !== 'number')
          throw $.iae(t7);
        overlapHeightBottom0 = 400 - (1600 - t7) + t5;
        overlapDestX0 = 1600 - t3;
        overlapDestY0 = overlapDestY1;
        t1.drawImage$9(this.bgCanvas, srcX, srcY, overlapWidthLeft0, overlapHeightTop0, cameraPos.get$x(), cameraPos.get$y(), overlapWidthLeft0, overlapHeightTop0);
        t1.drawImage$9(this.bgCanvas, 0, srcY, overlapWidthRight0, overlapHeightTop0, overlapDestX0, cameraPos.get$y(), overlapWidthRight0, overlapHeightTop0);
        t1.drawImage$9(this.bgCanvas, srcX, 0, overlapWidthLeft0, overlapHeightBottom0, cameraPos.get$x(), overlapDestY0, overlapWidthLeft0, overlapHeightBottom0);
        t1.drawImage$9(this.bgCanvas, 0, 0, overlapWidthRight0, overlapHeightBottom0, overlapDestX0, overlapDestY0, overlapWidthRight0, overlapHeightBottom0);
      }
    }
    t1.closePath$0();
  } finally {
    t1.restore$0();
  }
}
};

$$.HudRenderSystem = {"": ["context2d>", "player", "status", "_systemBit", "world", "_actives", "_all", "_excluded", "_one", "_liblib1$_dummy", "_passive"],
 "super": "PlayerStatusProcessingSystem",
 processSystem$0: function() {
  var t1, t2, t3;
  t1 = this.context2d;
  t1.save$0();
  t1.transform$6(1, 0, 0, 1, 90, 12);
  try {
    t1.beginPath$0();
    t1.set$fillStyle("black");
    t1.fillRect$4(0, 0, 200, 15);
    t1.set$fillStyle("green");
    t2 = this.status;
    t3 = t2.get$health();
    if (typeof t3 !== 'number')
      throw $.iae(t3);
    t3 = 200 * t3;
    t2 = t2.get$maxHealth();
    if (typeof t2 !== 'number')
      throw $.iae(t2);
    t1.fillRect$4(0, 0, t3 / t2, 15);
    t1.closePath$0();
  } finally {
    t1.restore$0();
  }
  $.ImageCache_withImage("hud_dummy.png", new $.HudRenderSystem_processSystem_anon(this));
}
};

$$.MiniMapRenderSystem = {"": ["context2d>", "transformMapper>", "renderableMapper>", "bodyMapper>", "_systemBit", "world", "_actives", "_all", "_excluded", "_one", "_liblib1$_dummy", "_passive"],
 "super": "EntitySystem",
 initialize$0: function() {
  var t1, t2, t3;
  t1 = $.Transform$hack();
  this.transformMapper = $.ComponentMapper$($.getInterceptor(t1).get$runtimeType(t1), this.world, 'Transform');
  t2 = $.MiniMapRenderable$hack();
  this.renderableMapper = $.ComponentMapper$($.getInterceptor(t2).get$runtimeType(t2), this.world, 'MiniMapRenderable');
  t3 = $.CircularBody$hack();
  this.bodyMapper = $.ComponentMapper$($.getInterceptor(t3).get$runtimeType(t3), this.world, 'CircularBody');
},
 processEntities$1: function(entities) {
  var t1, t2;
  t1 = this.context2d;
  t1.save$0();
  t1.transform$6(0.05, 0, 0, 0.05, 710, 10);
  try {
    t1.set$fillStyle("black");
    t1.beginPath$0();
    t1.fillRect$4(0, 0, 1600, 1600);
    t1.closePath$0();
    t2 = entities;
    $.getInterceptor(t2).forEach$1(t2, new $.MiniMapRenderSystem_processEntities_anon(this));
  } finally {
    t1.restore$0();
  }
},
 checkProcessing$0: function() {
  return true;
}
};

$$.PlayerControlSystem = {"": ["ACCELERATE", "DECELERATE", "LEFT", "RIGHT", "SHOOT", "accelerate", "decelerate", "turnLeft", "turnRight", "shoot<", "targetX", "targetY", "velocityMapper", "transformMapper>", "cannonMapper", "tagManager", "canvas", "player", "status", "_systemBit", "world", "_actives", "_all", "_excluded", "_one", "_liblib1$_dummy", "_passive"],
 "super": "PlayerStatusProcessingSystem",
 initialize$0: function() {
  var t1, t2, t3, t4, t5, t6;
  $.PlayerStatusProcessingSystem.prototype.initialize$0.call(this);
  t1 = $.Velocity$hack();
  this.velocityMapper = $.ComponentMapper$($.getInterceptor(t1).get$runtimeType(t1), this.world, 'Velocity');
  t2 = $.Transform$hack();
  this.transformMapper = $.ComponentMapper$($.getInterceptor(t2).get$runtimeType(t2), this.world, 'Transform');
  t3 = $.Cannon$hack();
  this.cannonMapper = $.ComponentMapper$($.getInterceptor(t3).get$runtimeType(t3), this.world, 'Cannon');
  t4 = this.world;
  t5 = $.TagManager$();
  this.tagManager = t4.getManager$1($.getInterceptor(t5).get$runtimeType(t5));
  t6 = $.window().get$on().get$keyDown();
  $.getInterceptor(t6).add$1(t6, this.get$handleKeyDown());
  t6 = $.window().get$on().get$keyUp();
  $.getInterceptor(t6).add$1(t6, this.get$handleKeyUp());
},
 processEntities$1: function(entities) {
  var player, velocity, transform, cannon, t1, t2, t3, t4;
  player = this.tagManager.getEntity$1("PLAYER");
  velocity = this.velocityMapper.get$1(player);
  transform = this.transformMapper.get$1(player);
  cannon = this.cannonMapper.get$1(player);
  if (this.accelerate) {
    t1 = velocity.get$x();
    t2 = $.TrigUtil_cos(transform.get$angle());
    if (typeof t2 !== 'number')
      throw $.iae(t2);
    velocity.set$x($.add(t1, 0.05 * t2));
    t3 = velocity.get$y();
    t4 = $.TrigUtil_sin(transform.get$angle());
    if (typeof t4 !== 'number')
      throw $.iae(t4);
    velocity.set$y($.add(t3, 0.05 * t4));
  } else if (this.decelerate) {
    velocity.set$x($.mul(velocity.get$x(), 0.98));
    velocity.set$y($.mul(velocity.get$y(), 0.98));
  }
  if (this.turnLeft)
    transform.set$angle($.mod($.sub(transform.get$angle(), 0.05), 6.283185307179586));
  else if (this.turnRight)
    transform.set$angle($.mod($.add(transform.get$angle(), 0.05), 6.283185307179586));
  if (this.shoot === true)
    cannon.set$shoot(true);
  else
    cannon.set$shoot(false);
},
 handleKeyDown$1: function(e) {
  var keyCode = e.get$keyCode();
  if ($.eqB(keyCode, this.ACCELERATE)) {
    this.accelerate = true;
    this.decelerate = false;
  } else if ($.eqB(keyCode, this.DECELERATE)) {
    this.accelerate = false;
    this.decelerate = true;
  } else if ($.eqB(keyCode, this.LEFT)) {
    this.turnLeft = true;
    this.turnRight = false;
  } else if ($.eqB(keyCode, this.RIGHT)) {
    this.turnLeft = false;
    this.turnRight = true;
  } else if ($.eqB(keyCode, this.SHOOT))
    this.shoot = true;
},
 get$handleKeyDown: function() { return new $.BoundClosure(this, 'handleKeyDown$1'); },
 handleKeyUp$1: function(e) {
  var keyCode = e.get$keyCode();
  if ($.eqB(keyCode, this.ACCELERATE))
    this.accelerate = false;
  else if ($.eqB(keyCode, this.DECELERATE))
    this.decelerate = false;
  else if ($.eqB(keyCode, this.LEFT))
    this.turnLeft = false;
  else if ($.eqB(keyCode, this.RIGHT))
    this.turnRight = false;
  else if ($.eqB(keyCode, this.SHOOT))
    this.shoot = false;
},
 get$handleKeyUp: function() { return new $.BoundClosure(this, 'handleKeyUp$1'); },
 checkProcessing$0: function() {
  return $.gt(this.status.get$health(), 0);
}
};

$$.AbstractWorkerEvents = {"": ["_ptr"],
 "super": "Events",
 get$error: function() {
  return this.operator$index$1("error");
}
};

$$.AudioContextEvents = {"": ["_ptr"],
 "super": "Events",
 get$complete: function() {
  return this.operator$index$1("complete");
},
 complete$1: function(arg0) { return this.get$complete().call$1(arg0); }
};

$$.BatteryManagerEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.BodyElementEvents = {"": ["_ptr"],
 "super": "ElementEvents",
 get$error: function() {
  return this.operator$index$1("error");
},
 get$load: function() {
  return this.operator$index$1("load");
},
 load$0: function() { return this.get$load().call$0(); },
 get$message: function() {
  return this.operator$index$1("message");
}
};

$$.DOMApplicationCacheEvents = {"": ["_ptr"],
 "super": "Events",
 get$error: function() {
  return this.operator$index$1("error");
}
};

$$.DedicatedWorkerContextEvents = {"": ["_ptr"],
 "super": "WorkerContextEvents",
 get$message: function() {
  return this.operator$index$1("message");
}
};

$$.DocumentEvents = {"": ["_ptr"],
 "super": "ElementEvents",
 get$abort: function() {
  return this.operator$index$1("abort");
},
 get$error: function() {
  return this.operator$index$1("error");
},
 get$keyDown: function() {
  return this.operator$index$1("keydown");
},
 get$keyUp: function() {
  return this.operator$index$1("keyup");
},
 get$load: function() {
  return this.operator$index$1("load");
},
 load$0: function() { return this.get$load().call$0(); },
 get$reset: function() {
  return this.operator$index$1("reset");
},
 reset$0: function() { return this.get$reset().call$0(); }
};

$$.ElementEvents = {"": ["_ptr"],
 "super": "Events",
 get$abort: function() {
  return this.operator$index$1("abort");
},
 get$error: function() {
  return this.operator$index$1("error");
},
 get$keyDown: function() {
  return this.operator$index$1("keydown");
},
 get$keyUp: function() {
  return this.operator$index$1("keyup");
},
 get$load: function() {
  return this.operator$index$1("load");
},
 load$0: function() { return this.get$load().call$0(); },
 get$reset: function() {
  return this.operator$index$1("reset");
},
 reset$0: function() { return this.get$reset().call$0(); }
};

$$.EventSourceEvents = {"": ["_ptr"],
 "super": "Events",
 get$error: function() {
  return this.operator$index$1("error");
},
 get$message: function() {
  return this.operator$index$1("message");
},
 get$open: function() {
  return this.operator$index$1("open");
},
 open$2: function(arg0, arg1) { return this.get$open().call$2(arg0, arg1); }
};

$$.Events = {"": ["_ptr"],
 "super": "Object",
 operator$index$1: function(type) {
  return $.EventListenerList$(this._ptr, type);
}
};

$$.EventListenerList = {"": ["_ptr", "_type"],
 "super": "Object",
 add$2: function(listener, useCapture) {
  this._ptr.$$dom_addEventListener$3(this._type, listener, useCapture);
  return this;
},
 add$1: function(listener) {
  return this.add$2(listener,false)
},
 remove$2: function(listener, useCapture) {
  this._ptr.$$dom_removeEventListener$3(this._type, listener, useCapture);
  return this;
},
 remove$1: function(listener) {
  return this.remove$2(listener,false)
}
};

$$.FileReaderEvents = {"": ["_ptr"],
 "super": "Events",
 get$abort: function() {
  return this.operator$index$1("abort");
},
 get$error: function() {
  return this.operator$index$1("error");
},
 get$load: function() {
  return this.operator$index$1("load");
},
 load$0: function() { return this.get$load().call$0(); }
};

$$.FileWriterEvents = {"": ["_ptr"],
 "super": "Events",
 get$abort: function() {
  return this.operator$index$1("abort");
},
 get$error: function() {
  return this.operator$index$1("error");
}
};

$$.FrameSetElementEvents = {"": ["_ptr"],
 "super": "ElementEvents",
 get$error: function() {
  return this.operator$index$1("error");
},
 get$load: function() {
  return this.operator$index$1("load");
},
 load$0: function() { return this.get$load().call$0(); },
 get$message: function() {
  return this.operator$index$1("message");
}
};

$$.HttpRequestEvents = {"": ["_ptr"],
 "super": "Events",
 get$abort: function() {
  return this.operator$index$1("abort");
},
 get$error: function() {
  return this.operator$index$1("error");
},
 get$load: function() {
  return this.operator$index$1("load");
},
 load$0: function() { return this.get$load().call$0(); }
};

$$.HttpRequestUploadEvents = {"": ["_ptr"],
 "super": "Events",
 get$abort: function() {
  return this.operator$index$1("abort");
},
 get$error: function() {
  return this.operator$index$1("error");
},
 get$load: function() {
  return this.operator$index$1("load");
},
 load$0: function() { return this.get$load().call$0(); }
};

$$.IDBDatabaseEvents = {"": ["_ptr"],
 "super": "Events",
 get$abort: function() {
  return this.operator$index$1("abort");
},
 get$error: function() {
  return this.operator$index$1("error");
}
};

$$.IDBOpenDBRequestEvents = {"": ["_ptr"],
 "super": "IDBRequestEvents"
};

$$.IDBRequestEvents = {"": ["_ptr"],
 "super": "Events",
 get$error: function() {
  return this.operator$index$1("error");
}
};

$$.IDBTransactionEvents = {"": ["_ptr"],
 "super": "Events",
 get$abort: function() {
  return this.operator$index$1("abort");
},
 get$complete: function() {
  return this.operator$index$1("complete");
},
 complete$1: function(arg0) { return this.get$complete().call$1(arg0); },
 get$error: function() {
  return this.operator$index$1("error");
}
};

$$.IDBVersionChangeRequestEvents = {"": ["_ptr"],
 "super": "IDBRequestEvents"
};

$$.InputElementEvents = {"": ["_ptr"],
 "super": "ElementEvents"
};

$$.LocalWindowEvents = {"": ["_ptr"],
 "super": "Events",
 get$abort: function() {
  return this.operator$index$1("abort");
},
 get$error: function() {
  return this.operator$index$1("error");
},
 get$keyDown: function() {
  return this.operator$index$1("keydown");
},
 get$keyUp: function() {
  return this.operator$index$1("keyup");
},
 get$load: function() {
  return this.operator$index$1("load");
},
 load$0: function() { return this.get$load().call$0(); },
 get$message: function() {
  return this.operator$index$1("message");
},
 get$reset: function() {
  return this.operator$index$1("reset");
},
 reset$0: function() { return this.get$reset().call$0(); }
};

$$.MediaElementEvents = {"": ["_ptr"],
 "super": "ElementEvents"
};

$$.MediaStreamEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.MediaStreamTrackEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.MediaStreamTrackListEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.MessagePortEvents = {"": ["_ptr"],
 "super": "Events",
 get$message: function() {
  return this.operator$index$1("message");
}
};

$$.NotificationEvents = {"": ["_ptr"],
 "super": "Events",
 get$close: function() {
  return this.operator$index$1("close");
},
 close$0: function() { return this.get$close().call$0(); },
 get$error: function() {
  return this.operator$index$1("error");
}
};

$$.PeerConnection00Events = {"": ["_ptr"],
 "super": "Events",
 get$open: function() {
  return this.operator$index$1("open");
},
 open$2: function(arg0, arg1) { return this.get$open().call$2(arg0, arg1); }
};

$$.RTCDataChannelEvents = {"": ["_ptr"],
 "super": "Events",
 get$close: function() {
  return this.operator$index$1("close");
},
 close$0: function() { return this.get$close().call$0(); },
 get$error: function() {
  return this.operator$index$1("error");
},
 get$message: function() {
  return this.operator$index$1("message");
},
 get$open: function() {
  return this.operator$index$1("open");
},
 open$2: function(arg0, arg1) { return this.get$open().call$2(arg0, arg1); }
};

$$.RTCPeerConnectionEvents = {"": ["_ptr"],
 "super": "Events",
 get$open: function() {
  return this.operator$index$1("open");
},
 open$2: function(arg0, arg1) { return this.get$open().call$2(arg0, arg1); }
};

$$.ScriptProcessorNodeEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.SharedWorkerContextEvents = {"": ["_ptr"],
 "super": "WorkerContextEvents",
 get$connect: function() {
  return this.operator$index$1("connect");
},
 connect$3: function(arg0, arg1, arg2) { return this.get$connect().call$3(arg0, arg1, arg2); }
};

$$.SpeechRecognitionEvents = {"": ["_ptr"],
 "super": "Events",
 get$error: function() {
  return this.operator$index$1("error");
},
 get$start: function() {
  return this.operator$index$1("start");
},
 start$1: function(arg0) { return this.get$start().call$1(arg0); },
 start$3: function(arg0, arg1, arg2) { return this.get$start().call$3(arg0, arg1, arg2); }
};

$$.TextTrackEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.TextTrackCueEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.TextTrackListEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.WebSocketEvents = {"": ["_ptr"],
 "super": "Events",
 get$close: function() {
  return this.operator$index$1("close");
},
 close$0: function() { return this.get$close().call$0(); },
 get$error: function() {
  return this.operator$index$1("error");
},
 get$message: function() {
  return this.operator$index$1("message");
},
 get$open: function() {
  return this.operator$index$1("open");
},
 open$2: function(arg0, arg1) { return this.get$open().call$2(arg0, arg1); }
};

$$.WorkerEvents = {"": ["_ptr"],
 "super": "AbstractWorkerEvents",
 get$message: function() {
  return this.operator$index$1("message");
}
};

$$.WorkerContextEvents = {"": ["_ptr"],
 "super": "Events",
 get$error: function() {
  return this.operator$index$1("error");
}
};

$$._MeasurementScheduler = {"": ["_callback>"],
 "super": "Object",
 _callback$0: function() { return this._callback.call$0(); },
 _callback$2: function(arg0, arg1) { return this._callback.call$2(arg0, arg1); },
 maybeSchedule$0: function() {
  if (this._nextMeasurementFrameScheduled)
    return;
  this._nextMeasurementFrameScheduled = true;
  this._schedule$0();
},
 _onCallback$0: function() {
  if (!this._nextMeasurementFrameScheduled)
    return;
  this._nextMeasurementFrameScheduled = false;
  this._callback$0();
}
};

$$._PostMessageScheduler = {"": ["_MEASUREMENT_MESSAGE", "_nextMeasurementFrameScheduled", "_callback"],
 "super": "_MeasurementScheduler",
 _schedule$0: function() {
  $.window().postMessage$2(this._MEASUREMENT_MESSAGE, "*");
},
 _handleMessage$1: function(e) {
  this._onCallback$0();
},
 get$_handleMessage: function() { return new $.BoundClosure(this, '_handleMessage$1'); },
 _PostMessageScheduler$1: function(callback) {
  var t1 = $.window().get$on().get$message();
  $.getInterceptor(t1).add$1(t1, this.get$_handleMessage());
}
};

$$._MutationObserverScheduler = {"": ["_observer", "_dummy", "_nextMeasurementFrameScheduled", "_callback"],
 "super": "_MeasurementScheduler",
 _schedule$0: function() {
  var t1 = this._dummy.get$hidden() !== true;
  this._dummy.set$hidden(t1);
},
 _handleMutation$2: function(mutations, observer) {
  this._onCallback$0();
},
 get$_handleMutation: function() { return new $.BoundClosure1(this, '_handleMutation$2'); },
 _MutationObserverScheduler$1: function(callback) {
  this._observer = $.MutationObserver_MutationObserver(this.get$_handleMutation());
  this._dummy = $.DivElement_DivElement();
  this._observer.observe$2$attributes(this._dummy, true);
}
};

$$._DOMWindowCrossFrame = {"": ["_window"],
 "super": "Object",
 get$location: function() {
  return $._LocationCrossFrame__createSafe(this._window.location);
},
 close$0: function() {
  return this._window.close();
},
 postMessage$3: function(message, targetOrigin, messagePorts) {
  var t1, t2;
  t1 = messagePorts == null;
  t2 = this._window;
  if (t1)
    t2.postMessage(message,targetOrigin);
  else
    t2.postMessage(message,targetOrigin,messagePorts);
},
 postMessage$2: function(message,targetOrigin) {
  return this.postMessage$3(message,targetOrigin,null)
}
};

$$._LocationCrossFrame = {"": ["_location>"],
 "super": "Object",
 is$Location: function() { return true; }
};

$$._LocationWrapper = {"": ["_ptr"],
 "super": "Object",
 get$href: function() {
  return $._LocationWrapper__get(this._ptr, "href");
},
 toString$0: function() {
  return this._ptr.toString();
},
 is$Location: function() { return true; }
};

$$.FixedSizeListIterator = {"": ["_liblib$_length", "_array", "_pos"],
 "super": "_VariableSizeListIterator",
 get$hasNext: function() {
  return $.gt(this._liblib$_length, this._pos);
}
};

$$._VariableSizeListIterator = {
 "super": "Object",
 get$hasNext: function() {
  var t1 = this._array;
  return $.gt($.getInterceptor(t1).get$length(t1), this._pos);
},
 next$0: function() {
  var t1, t3;
  if (this.get$hasNext() !== true)
    throw $.$$throw($.StateError$("No more elements"));
  t1 = this._array;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this.next$0$bailout(1, t1);
  t3 = this._pos;
  this._pos = t3 + 1;
  if (t3 < 0 || t3 >= t1.length)
    throw $.ioore(t3);
  return t1[t3];
},
 next$0$bailout: function(state0, t1) {
  var t3 = this._pos;
  this._pos = t3 + 1;
  return $.index(t1, t3);
}
};

$$._Manager = {"": ["nextIsolateId=", "currentManagerId>", "nextManagerId", "currentContext=", "rootContext=", "topEventLoop>", "fromCommandLine>", "isWorker>", "supportsWorkers", "isolates>", "mainManager>", "managers>"],
 "super": "Object",
 get$useWorkers: function() {
  return this.supportsWorkers;
},
 get$needSerialization: function() {
  return this.get$useWorkers();
},
 _nativeDetectEnvironment$0: function() {
  this.isWorker = $isWorker;
  this.supportsWorkers = $supportsWorkers;
  this.fromCommandLine = typeof(window) == 'undefined';
},
 _nativeInitWorkerMessageHandler$0: function() {
  $globalThis.onmessage = function (e) {
  _IsolateNatives._processWorkerMessage(this.mainManager, e);
};
},
 maybeCloseWorker$0: function() {
  var t1 = this.isolates;
  if ($.getInterceptor(t1).get$isEmpty(t1) === true)
    this.mainManager.postMessage$1($._serializeMessage($.makeLiteralMap(["command", "close"])));
},
 _Manager$0: function() {
  this._nativeDetectEnvironment$0();
  this.topEventLoop = $._EventLoop$();
  this.isolates = $.Map_Map('$int', '_IsolateContext');
  this.managers = $.Map_Map('$int', '_ManagerStub');
  if (this.isWorker === true) {
    this.mainManager = $._MainManagerStub$();
    this._nativeInitWorkerMessageHandler$0();
  }
}
};

$$._IsolateContext = {"": ["id>", "ports>", "isolateStatics"],
 "super": "Object",
 initGlobals$0: function() {
  $initGlobals(this);
},
 eval$1: function(code) {
  var old, result, t1;
  old = $._globalState().get$currentContext();
  $._globalState().set$currentContext(this);
  this._setGlobals$0();
  result = null;
  try {
    result = code.call$0();
  } finally {
    t1 = old;
    $._globalState().set$currentContext(t1);
    if (!(old == null))
      old._setGlobals$0();
  }
  return result;
},
 _setGlobals$0: function() {
  $setGlobals(this);
},
 lookup$1: function(portId) {
  return $.index(this.ports, portId);
},
 register$2: function(portId, port) {
  if (this.ports.containsKey$1(portId) === true)
    throw $.$$throw($.Exception_Exception("Registry: ports must be registered only once."));
  $.indexSet(this.ports, portId, port);
  $.indexSet($._globalState().get$isolates(), this.id, this);
},
 unregister$1: function(portId) {
  var t1;
  this.ports.remove$1(portId);
  t1 = this.ports;
  if ($.getInterceptor(t1).get$isEmpty(t1) === true)
    $._globalState().get$isolates().remove$1(this.id);
},
 _IsolateContext$0: function() {
  var t1, t2;
  t1 = $._globalState();
  t2 = t1.get$nextIsolateId();
  t1.set$nextIsolateId($.add(t2, 1));
  this.id = t2;
  this.ports = $.Map_Map('$int', 'ReceivePort');
  this.initGlobals$0();
}
};

$$._EventLoop = {"": ["events"],
 "super": "Object",
 enqueue$3: function(isolate, fn, msg) {
  var t1 = this.events;
  $.getInterceptor(t1).addLast$1(t1, $._IsolateEvent$(isolate, fn, msg));
},
 dequeue$0: function() {
  var t1 = this.events;
  if ($.getInterceptor(t1).get$isEmpty(t1) === true)
    return;
  return t1.removeFirst$0();
},
 runIteration$0: function() {
  var event$, t1, t2;
  event$ = this.dequeue$0();
  if (event$ == null) {
    if ($._globalState().get$isWorker() === true)
      $._globalState().maybeCloseWorker$0();
    else {
      if (!($._globalState().get$rootContext() == null))
        if ($._globalState().get$isolates().containsKey$1($._globalState().get$rootContext().get$id()) === true)
          if ($._globalState().get$fromCommandLine() === true) {
            t1 = $._globalState().get$rootContext().get$ports();
            t2 = $.getInterceptor(t1).get$isEmpty(t1) === true;
            t1 = t2;
          } else
            t1 = false;
        else
          t1 = false;
      else
        t1 = false;
      if (t1)
        throw $.$$throw($.Exception_Exception("Program exited with open ReceivePorts."));
    }
    return false;
  }
  event$.process$0();
  return true;
},
 _runHelper$0: function() {
  if (!($._window() == null))
    new $._EventLoop__runHelper_next(this).call$0();
  else
    for (; this.runIteration$0() === true;)
      ;
},
 run$0: function(exception) {
  var t1, e, trace;
  if ($._globalState().get$isWorker() !== true)
    this._runHelper$0();
  else
    try {
      this._runHelper$0();
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      trace = $.getTraceFromException(exception);
      $._globalState().get$mainManager().postMessage$1($._serializeMessage($.makeLiteralMap(["command", "error", "msg", $.S(e) + "\n" + $.S(trace)])));
    }

}
};

$$._IsolateEvent = {"": ["isolate", "fn", "message>"],
 "super": "Object",
 process$0: function() {
  this.isolate.eval$1(this.fn);
}
};

$$._MainManagerStub = {
 "super": "Object",
 get$id: function() {
  return 0;
},
 postMessage$1: function(msg) {
  $globalThis.postMessage(msg);
}
};

$$._BaseSendPort = {"": ["_isolateId>"],
 "super": "Object",
 _checkReplyTo$1: function(replyTo) {
  if (!(replyTo == null) && !(typeof replyTo === 'object' && replyTo !== null && !!replyTo.is$_NativeJsSendPort) && !(typeof replyTo === 'object' && replyTo !== null && !!replyTo.is$_WorkerSendPort) && !(typeof replyTo === 'object' && replyTo !== null && !!replyTo.is$_BufferingSendPort))
    throw $.$$throw($.Exception_Exception("SendPort.send: Illegal replyTo port type"));
},
 call$1: function(message) {
  var completer, port;
  completer = $.Completer_Completer();
  port = $._ReceivePortImpl$();
  this.send$2(message, port.toSendPort$0());
  port.receive$1(new $._BaseSendPort_call_anon(completer, port));
  return completer.get$future();
},
 is$SendPort: true
};

$$._NativeJsSendPort = {"": ["_receivePort>", "_isolateId"],
 "super": "_BaseSendPort",
 send$2: function(message, replyTo) {
  $._waitForPendingPorts([message, replyTo], new $._NativeJsSendPort_send_anon(replyTo, message, this));
},
 operator$eq$1: function(other) {
  return typeof other === 'object' && other !== null && !!other.is$_NativeJsSendPort && $.eqB(this._receivePort, other._receivePort);
},
 get$hashCode: function() {
  return this._receivePort.get$_liblib3$_id();
},
 is$_NativeJsSendPort: true,
 is$SendPort: true
};

$$._WorkerSendPort = {"": ["_workerId>", "_receivePortId", "_isolateId"],
 "super": "_BaseSendPort",
 send$2: function(message, replyTo) {
  $._waitForPendingPorts([message, replyTo], new $._WorkerSendPort_send_anon(replyTo, this, message));
},
 operator$eq$1: function(other) {
  var t1;
  if (typeof other === 'object' && other !== null && !!other.is$_WorkerSendPort)
    t1 = $.eqB(this._workerId, other._workerId) && $.eqB(this._isolateId, other._isolateId) && $.eqB(this._receivePortId, other._receivePortId);
  else
    t1 = false;
  return t1;
},
 get$hashCode: function() {
  return $.xor($.xor($.shl(this._workerId, 16), $.shl(this._isolateId, 8)), this._receivePortId);
},
 is$_WorkerSendPort: true,
 is$SendPort: true
};

$$._ReceivePortImpl = {"": ["_liblib3$_id>", "_liblib3$_callback>"],
 "super": "Object",
 _liblib3$_callback$0: function() { return this._liblib3$_callback.call$0(); },
 _liblib3$_callback$2: function(arg0, arg1) { return this._liblib3$_callback.call$2(arg0, arg1); },
 receive$1: function(onMessage) {
  this._liblib3$_callback = onMessage;
},
 close$0: function() {
  this._liblib3$_callback = null;
  $._globalState().get$currentContext().unregister$1(this._liblib3$_id);
},
 toSendPort$0: function() {
  return $._NativeJsSendPort$(this, $._globalState().get$currentContext().get$id());
},
 _ReceivePortImpl$0: function() {
  $._globalState().get$currentContext().register$2(this._liblib3$_id, this);
}
};

$$._PendingSendPortFinder = {"": ["ports>", "_visited"],
 "super": "_MessageTraverser",
 visitPrimitive$1: function(x) {
},
 visitList$1: function(list) {
  if (!($.index(this._visited, list) == null))
    return;
  $.indexSet(this._visited, list, true);
  $.getInterceptor(list).forEach$1(list, new $._PendingSendPortFinder_visitList_anon(this));
},
 visitMap$1: function(map) {
  var t1;
  if (!($.index(this._visited, map) == null))
    return;
  $.indexSet(this._visited, map, true);
  t1 = map.get$values();
  $.getInterceptor(t1).forEach$1(t1, new $._PendingSendPortFinder_visitMap_anon(this));
},
 visitSendPort$1: function(port) {
  var t1;
  if (!!port.is$_BufferingSendPort && port._port == null) {
    t1 = this.ports;
    $.getInterceptor(t1).add$1(t1, port.get$_futurePort());
  }
},
 _PendingSendPortFinder$0: function() {
  this._visited = $._JsVisitedMap$();
}
};

$$._JsSerializer = {"": ["_nextFreeRefId", "_visited"],
 "super": "_Serializer",
 visitSendPort$1: function(x) {
  if (typeof x === 'object' && x !== null && !!x.is$_NativeJsSendPort)
    return this.visitNativeJsSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$_WorkerSendPort)
    return ["sendport", x._workerId, x._isolateId, x._receivePortId];
  if (typeof x === 'object' && x !== null && !!x.is$_BufferingSendPort)
    return this.visitBufferingSendPort$1(x);
  throw $.$$throw("Illegal underlying port " + $.S(x));
},
 visitNativeJsSendPort$1: function(port) {
  return ["sendport", $._globalState().get$currentManagerId(), port._isolateId, port._receivePort.get$_liblib3$_id()];
},
 visitBufferingSendPort$1: function(port) {
  var t1 = port._port;
  if (!(t1 == null))
    return this.visitSendPort$1(t1);
  else
    throw $.$$throw("internal error: must call _waitForPendingPorts to ensure all ports are resolved at this point.");
},
 _JsSerializer$0: function() {
  this._visited = $._JsVisitedMap$();
}
};

$$._JsCopier = {"": ["_visited"],
 "super": "_Copier",
 visitSendPort$1: function(x) {
  if (typeof x === 'object' && x !== null && !!x.is$_NativeJsSendPort)
    return this.visitNativeJsSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$_WorkerSendPort)
    return this.visitWorkerSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$_BufferingSendPort)
    return this.visitBufferingSendPort$1(x);
  throw $.$$throw("Illegal underlying port " + $.S(this.get$p()));
},
 visitNativeJsSendPort$1: function(port) {
  return $._NativeJsSendPort$(port._receivePort, port._isolateId);
},
 visitWorkerSendPort$1: function(port) {
  return $._WorkerSendPort$(port._workerId, port._isolateId, port._receivePortId);
},
 visitBufferingSendPort$1: function(port) {
  var t1 = port._port;
  if (!(t1 == null))
    return this.visitSendPort$1(t1);
  else
    throw $.$$throw("internal error: must call _waitForPendingPorts to ensure all ports are resolved at this point.");
},
 _JsCopier$0: function() {
  this._visited = $._JsVisitedMap$();
}
};

$$._JsDeserializer = {"": ["_deserialized"],
 "super": "_Deserializer",
 deserializeSendPort$1: function(x) {
  var managerId, isolateId, receivePortId, isolate;
  managerId = $.index(x, 1);
  isolateId = $.index(x, 2);
  receivePortId = $.index(x, 3);
  if ($.eqB(managerId, $._globalState().get$currentManagerId())) {
    isolate = $.index($._globalState().get$isolates(), isolateId);
    if (isolate == null)
      return;
    return $._NativeJsSendPort$(isolate.lookup$1(receivePortId), isolateId);
  } else
    return $._WorkerSendPort$(managerId, isolateId, receivePortId);
}
};

$$._JsVisitedMap = {"": ["tagged"],
 "super": "Object",
 operator$index$1: function(object) {
  return object['__MessageTraverser__attached_info__'];
},
 oprator$indexSet$2: function(object, info) {
  var t1 = this.tagged;
  $.getInterceptor(t1).add$1(t1, object);
  object['__MessageTraverser__attached_info__'] = info;
},
 reset$0: function() {
  var t1 = $.List_List(null);
  $.setRuntimeTypeInfo(t1, []);
  this.tagged = t1;
},
 cleanup$0: function() {
  var t1, length$, i;
  t1 = this.tagged;
  length$ = $.getInterceptor(t1).get$length(t1);
  if (typeof length$ !== 'number')
    return this.cleanup$0$bailout(1, length$);
  i = 0;
  for (; i < length$; ++i)
    $.index(this.tagged, i)['__MessageTraverser__attached_info__'] = null;
  this.tagged = null;
},
 cleanup$0$bailout: function(state0, length$) {
  var i = 0;
  for (; $.ltB(i, length$); ++i)
    $.index(this.tagged, i)['__MessageTraverser__attached_info__'] = null;
  this.tagged = null;
}
};

$$._MessageTraverserVisitedMap = {
 "super": "Object",
 operator$index$1: function(object) {
  return;
},
 oprator$indexSet$2: function(object, info) {
},
 reset$0: function() {
},
 cleanup$0: function() {
}
};

$$._MessageTraverser = {
 "super": "Object",
 traverse$1: function(x) {
  var t1, result;
  t1 = x;
  if (t1 == null || typeof t1 === 'string' || typeof t1 === 'number' || typeof t1 === 'boolean')
    return this.visitPrimitive$1(x);
  this._visited.reset$0();
  result = null;
  try {
    result = this._dispatch$1(x);
  } finally {
    this._visited.cleanup$0();
  }
  return result;
},
 _dispatch$1: function(x) {
  if (x == null || typeof x === 'string' || typeof x === 'number' || typeof x === 'boolean')
    return this.visitPrimitive$1(x);
  if (typeof x === 'object' && x !== null && (x.constructor === Array || x.is$List()))
    return this.visitList$1(x);
  if (typeof x === 'object' && x !== null && x.is$Map())
    return this.visitMap$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$SendPort)
    return this.visitSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$SendPortSync)
    return this.visitSendPortSync$1(x);
  return this.visitObject$1(x);
},
 visitObject$1: function(x) {
  throw $.$$throw("Message serialization: Illegal value " + $.S(x) + " passed");
}
};

$$._Copier = {
 "super": "_MessageTraverser",
 visitPrimitive$1: function(x) {
  return x;
},
 visitList$1: function(list) {
  var copy, len, i;
  if (typeof list !== 'object' || list === null || list.constructor !== Array && !list.is$JavaScriptIndexingBehavior())
    return this.visitList$1$bailout(1, list);
  copy = $.index(this._visited, list);
  if (!(copy == null))
    return copy;
  len = list.length;
  copy = $.List_List(len);
  $.setRuntimeTypeInfo(copy, []);
  $.indexSet(this._visited, list, copy);
  for (i = 0; i < len; ++i) {
    if (i >= list.length)
      throw $.ioore(i);
    copy[i] = this._dispatch$1(list[i]);
  }
  return copy;
},
 visitList$1$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      list = env0;
      break;
    case 2:
      len = env1;
      list = env0;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      copy = $.index(this._visited, list);
      if (!(copy == null))
        return copy;
      len = $.getInterceptor(list).get$length(list);
    case 2:
      var list, copy, len, i, t1;
      state0 = 0;
      copy = $.List_List(len);
      $.setRuntimeTypeInfo(copy, []);
      $.indexSet(this._visited, list, copy);
      for (i = 0; $.ltB(i, len); ++i) {
        t1 = this._dispatch$1($.index(list, i));
        if (i >= copy.length)
          throw $.ioore(i);
        copy[i] = t1;
      }
      return copy;
  }
},
 visitMap$1: function(map) {
  var t1, t2;
  t1 = {};
  t1.copy_10 = $.index(this._visited, map);
  t2 = t1.copy_10;
  if (!(t2 == null))
    return t2;
  t1.copy_10 = $.Map_Map();
  $.indexSet(this._visited, map, t1.copy_10);
  $.getInterceptor(map).forEach$1(map, new $._Copier_visitMap_anon(t1, this));
  return t1.copy_10;
}
};

$$._Serializer = {
 "super": "_MessageTraverser",
 visitPrimitive$1: function(x) {
  return x;
},
 visitList$1: function(list) {
  var copyId, id;
  copyId = $.index(this._visited, list);
  if (!(copyId == null))
    return ["ref", copyId];
  id = this._nextFreeRefId;
  this._nextFreeRefId = id + 1;
  $.indexSet(this._visited, list, id);
  return ["list", id, this._serializeList$1(list)];
},
 visitMap$1: function(map) {
  var copyId, id;
  copyId = $.index(this._visited, map);
  if (!(copyId == null))
    return ["ref", copyId];
  id = this._nextFreeRefId;
  this._nextFreeRefId = id + 1;
  $.indexSet(this._visited, map, id);
  return ["map", id, this._serializeList$1(map.get$keys()), this._serializeList$1(map.get$values())];
},
 _serializeList$1: function(list) {
  var len, result, i;
  if (typeof list !== 'string' && (typeof list !== 'object' || list === null || list.constructor !== Array && !list.is$JavaScriptIndexingBehavior()))
    return this._serializeList$1$bailout(1, list);
  len = list.length;
  result = $.List_List(len);
  $.setRuntimeTypeInfo(result, []);
  for (i = 0; i < len; ++i) {
    if (i >= list.length)
      throw $.ioore(i);
    result[i] = this._dispatch$1(list[i]);
  }
  return result;
},
 _serializeList$1$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      list = env0;
      break;
    case 2:
      len = env1;
      list = env0;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      len = $.getInterceptor(list).get$length(list);
    case 2:
      var list, len, result, i, t1;
      state0 = 0;
      result = $.List_List(len);
      $.setRuntimeTypeInfo(result, []);
      for (i = 0; $.ltB(i, len); ++i) {
        t1 = this._dispatch$1($.index(list, i));
        if (i >= result.length)
          throw $.ioore(i);
        result[i] = t1;
      }
      return result;
  }
}
};

$$._Deserializer = {
 "super": "Object",
 deserialize$1: function(x) {
  if (x == null || typeof x === 'string' || typeof x === 'number' || typeof x === 'boolean')
    return x;
  this._deserialized = $.HashMap_HashMap();
  return this._deserializeHelper$1(x);
},
 _deserializeHelper$1: function(x) {
  if (x == null || typeof x === 'string' || typeof x === 'number' || typeof x === 'boolean')
    return x;
  switch ($.index(x, 0)) {
    case "ref":
      return this._deserializeRef$1(x);
    case "list":
      return this._deserializeList$1(x);
    case "map":
      return this._deserializeMap$1(x);
    case "sendport":
      return this.deserializeSendPort$1(x);
    default:
      return this.deserializeObject$1(x);
  }
},
 _deserializeRef$1: function(x) {
  var id = $.index(x, 1);
  return $.index(this._deserialized, id);
},
 _deserializeList$1: function(x) {
  var id, dartList, len, i, t1;
  id = $.index(x, 1);
  dartList = $.index(x, 2);
  if (typeof dartList !== 'object' || dartList === null || (dartList.constructor !== Array || !!dartList.immutable$list) && !dartList.is$JavaScriptIndexingBehavior())
    return this._deserializeList$1$bailout(1, dartList, id);
  $.indexSet(this._deserialized, id, dartList);
  len = dartList.length;
  for (i = 0; i < len; ++i) {
    if (i >= dartList.length)
      throw $.ioore(i);
    t1 = this._deserializeHelper$1(dartList[i]);
    if (i >= dartList.length)
      throw $.ioore(i);
    dartList[i] = t1;
  }
  return dartList;
},
 _deserializeList$1$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      id = env1;
      dartList = env0;
      break;
    case 2:
      len = env1;
      dartList = env0;
      break;
  }
  switch (state0) {
    case 0:
      id = $.index(x, 1);
      dartList = $.index(x, 2);
    case 1:
      state0 = 0;
      $.indexSet(this._deserialized, id, dartList);
      len = $.getInterceptor(dartList).get$length(dartList);
    case 2:
      var id, dartList, len, i;
      state0 = 0;
      for (i = 0; $.ltB(i, len); ++i)
        $.indexSet(dartList, i, this._deserializeHelper$1($.index(dartList, i)));
      return dartList;
  }
},
 _deserializeMap$1: function(x) {
  var result, id, keys, values, len, i, key;
  result = $.Map_Map();
  id = $.index(x, 1);
  $.indexSet(this._deserialized, id, result);
  keys = $.index(x, 2);
  if (typeof keys !== 'string' && (typeof keys !== 'object' || keys === null || keys.constructor !== Array && !keys.is$JavaScriptIndexingBehavior()))
    return this._deserializeMap$1$bailout(1, x, result, keys);
  values = $.index(x, 3);
  if (typeof values !== 'string' && (typeof values !== 'object' || values === null || values.constructor !== Array && !values.is$JavaScriptIndexingBehavior()))
    return this._deserializeMap$1$bailout(2, values, result, keys);
  len = keys.length;
  for (i = 0; i < len; ++i) {
    if (i >= keys.length)
      throw $.ioore(i);
    key = this._deserializeHelper$1(keys[i]);
    if (i >= values.length)
      throw $.ioore(i);
    $.indexSet(result, key, this._deserializeHelper$1(values[i]));
  }
  return result;
},
 _deserializeMap$1$bailout: function(state0, env0, env1, env2, env3) {
  switch (state0) {
    case 1:
      keys = env2;
      result = env1;
      x = env0;
      break;
    case 2:
      keys = env2;
      result = env1;
      values = env0;
      break;
    case 3:
      keys = env3;
      result = env2;
      len = env1;
      values = env0;
      break;
  }
  switch (state0) {
    case 0:
      result = $.Map_Map();
      id = $.index(x, 1);
      $.indexSet(this._deserialized, id, result);
      keys = $.index(x, 2);
    case 1:
      state0 = 0;
      values = $.index(x, 3);
    case 2:
      state0 = 0;
      len = $.getInterceptor(keys).get$length(keys);
    case 3:
      var result, id, keys, x, values, len, i;
      state0 = 0;
      for (i = 0; $.ltB(i, len); ++i)
        $.indexSet(result, this._deserializeHelper$1($.index(keys, i)), this._deserializeHelper$1($.index(values, i)));
      return result;
  }
},
 deserializeObject$1: function(x) {
  throw $.$$throw("Unexpected serialized object");
}
};

$$._Timer = {"": ["_once", "_handle"],
 "super": "Object",
 _Timer$repeating$2: function(milliSeconds, callback) {
  this._handle = $._window().setInterval$2(new $.anon0(this, callback), milliSeconds);
},
 _Timer$2: function(milliSeconds, callback) {
  this._handle = $._window().setTimeout$2(new $.anon(callback, this), milliSeconds);
}
};

$$._Random = {
 "super": "Object",
 nextInt$1: function(max) {
  if (max < 0)
    throw $.$$throw($.ArgumentError$("negative max: " + $.S(max)));
  if (max > 4294967295)
    max = 4294967295;
  return (Math.random() * max) >>> 0;
},
 nextDouble$0: function() {
  return Math.random();
},
 nextBool$0: function() {
  return Math.random() < 0.5;
}
};

$$.ElementInstanceEvents = {"": ["_ptr"],
 "super": "Events",
 get$abort: function() {
  return this.operator$index$1("abort");
},
 get$error: function() {
  return this.operator$index$1("error");
},
 get$keyDown: function() {
  return this.operator$index$1("keydown");
},
 get$keyUp: function() {
  return this.operator$index$1("keyup");
},
 get$load: function() {
  return this.operator$index$1("load");
},
 load$0: function() { return this.get$load().call$0(); },
 get$reset: function() {
  return this.operator$index$1("reset");
},
 reset$0: function() { return this.get$reset().call$0(); }
};

$$.Bag = {"": ["_data", "_size"],
 "super": "Object",
 operator$index$1: function(index) {
  var t1 = this._data;
  if (index !== (index | 0))
    throw $.iae(index);
  if (index < 0 || index >= t1.length)
    throw $.ioore(index);
  return t1[index];
},
 get$size: function() {
  return this._size;
},
 isEmpty$0: function() {
  return $.eq(this._size, 0);
},
 get$isEmpty: function() { return new $.BoundClosure2(this, 'isEmpty$0'); },
 forEach$1: function(f) {
  var i, t1;
  for (i = 0; $.ltB(i, this._size); ++i) {
    t1 = this._data;
    if (i >= t1.length)
      throw $.ioore(i);
    f.call$1(t1[i]);
  }
},
 removeLast$0: function() {
  var t1, t2, o;
  if ($.gtB(this.get$size(), 0)) {
    t1 = this._data;
    t2 = $.sub(this._size, 1);
    this._size = t2;
    if (t2 !== (t2 | 0))
      throw $.iae(t2);
    if (t2 < 0 || t2 >= t1.length)
      throw $.ioore(t2);
    o = t1[t2];
    t2 = this._data;
    t1 = this._size;
    if (t1 !== (t1 | 0))
      throw $.iae(t1);
    if (t1 < 0 || t1 >= t2.length)
      throw $.ioore(t1);
    t2[t1] = null;
    return o;
  }
  return;
},
 remove$1: function(o) {
  var i, t1, t2, t3;
  for (i = 0; $.ltB(i, this._size); ++i) {
    t1 = this._data;
    if (i >= t1.length)
      throw $.ioore(i);
    if ($.eqB(o, t1[i])) {
      t1 = this._data;
      t2 = $.sub(this._size, 1);
      this._size = t2;
      if (t2 !== (t2 | 0))
        throw $.iae(t2);
      t3 = t1.length;
      if (t2 < 0 || t2 >= t3)
        throw $.ioore(t2);
      t2 = t1[t2];
      if (i >= t3)
        throw $.ioore(i);
      t1[i] = t2;
      t2 = this._data;
      t1 = this._size;
      if (t1 !== (t1 | 0))
        throw $.iae(t1);
      if (t1 < 0 || t1 >= t2.length)
        throw $.ioore(t1);
      t2[t1] = null;
      return true;
    }
  }
  return false;
},
 contains$1: function(o) {
  var i, t1;
  for (i = 0; $.gtB(this._size, i); ++i) {
    t1 = this._data;
    if (i >= t1.length)
      throw $.ioore(i);
    if ($.eqB(o, t1[i]))
      return true;
  }
  return false;
},
 get$capacity: function() {
  return this._data.length;
},
 add$1: function(o) {
  var t1, t3, t2;
  t1 = this._size;
  if (typeof t1 !== 'number')
    return this.add$1$bailout0(1, o, t1);
  t3 = this._data.length;
  if (t1 === t3) {
    t1 = t3 * 3 / 2 + 1;
    this._growTo$1($.getInterceptor(t1).toInt$0(t1));
  }
  t1 = this._data;
  t2 = this._size;
  if (typeof t2 !== 'number')
    return this.add$1$bailout0(2, o, t1, t2);
  this._size = t2 + 1;
  if (t2 !== (t2 | 0))
    throw $.iae(t2);
  if (t2 < 0 || t2 >= t1.length)
    throw $.ioore(t2);
  t1[t2] = o;
},
 add$1$bailout0: function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      t1 = env1;
      o = env0;
      break;
    case 2:
      t2 = env2;
      t1 = env1;
      o = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = this._size;
    case 1:
      state0 = 0;
      if ($.eqB(t1, this._data.length)) {
        t1 = this._data.length * 3 / 2 + 1;
        this._growTo$1($.getInterceptor(t1).toInt$0(t1));
      }
      t1 = this._data;
      t2 = this._size;
    case 2:
      var t1, o, t2;
      state0 = 0;
      this._size = $.add(t2, 1);
      if (t2 !== (t2 | 0))
        throw $.iae(t2);
      if (t2 < 0 || t2 >= t1.length)
        throw $.ioore(t2);
      t1[t2] = o;
  }
},
 oprator$indexSet$2: function(index, o) {
  var t1;
  if ($.geB(index, this._data.length)) {
    this._growTo$1($.mul(index, 2));
    this._size = $.add(index, 1);
  } else if ($.geB(index, this._size))
    this._size = $.add(index, 1);
  t1 = this._data;
  if (index !== (index | 0))
    throw $.iae(index);
  if (index < 0 || index >= t1.length)
    throw $.ioore(index);
  t1[index] = o;
},
 _growTo$1: function(newCapacity) {
  var oldData, t1;
  oldData = this._data;
  t1 = $.List_List(newCapacity);
  $.setRuntimeTypeInfo(t1, []);
  this._data = t1;
  $.Arrays_copy(oldData, 0, this._data, 0, oldData.length);
},
 clear$0: function() {
  var i, t1;
  for (i = 0; $.ltB(i, this._size); ++i) {
    t1 = this._data;
    if (i >= t1.length)
      throw $.ioore(i);
    t1[i] = null;
  }
  this._size = 0;
},
 toString$0: function() {
  return $.Collections_collectionToString(this._data);
},
 isIndexWithinBounds$1: function(index) {
  return $.lt(index, this.get$capacity());
},
 Bag$1$capacity: function(capacity) {
  var t1 = $.List_List(capacity);
  $.setRuntimeTypeInfo(t1, []);
  this._data = t1;
}
};

$$.Component = {
 "super": "Object"
};

$$.ComponentMapper = {"": ["_liblib1$_type", "_components"],
 "super": "Object",
 get$1: function(e) {
  var t1, t3;
  t1 = this._components;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this.get$1$bailout(1, e, t1);
  t3 = e.get$id();
  if (t3 !== (t3 | 0))
    throw $.iae(t3);
  if (t3 < 0 || t3 >= t1.length)
    throw $.ioore(t3);
  return t1[t3];
},
 get$1$bailout: function(state0, e, t1) {
  return $.index(t1, e.get$id());
},
 getSafe$1: function(e) {
  var t1, t3;
  if (this._components.isIndexWithinBounds$1(e.get$id()) === true) {
    t1 = this._components;
    if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
      return this.getSafe$1$bailout(1, e, t1);
    t3 = e.get$id();
    if (t3 !== (t3 | 0))
      throw $.iae(t3);
    if (t3 < 0 || t3 >= t1.length)
      throw $.ioore(t3);
    return t1[t3];
  }
  return;
},
 getSafe$1$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      t1 = env1;
      e = env0;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      var t1, e;
      if (state0 === 1 || state0 === 0 && this._components.isIndexWithinBounds$1(e.get$id()) === true)
        switch (state0) {
          case 0:
            t1 = this._components;
          case 1:
            state0 = 0;
            return $.index(t1, e.get$id());
        }
      return;
  }
},
 ComponentMapper$2: function(componentType, world) {
  this._liblib1$_type = $.ComponentTypeManager_getTypeFor(componentType);
  this._components = world.get$componentManager().getComponentsByType$1(this._liblib1$_type);
}
};

$$.ComponentManager = {"": ["_componentsByType", "_deleted", "_world"],
 "super": "Manager",
 initialize$0: function() {
},
 _removeComponentsOfEntity$1: function(e) {
  this._forComponentsOfEntity$2(e, new $.ComponentManager__removeComponentsOfEntity_anon(e));
  e.set$_typeBits(0);
},
 _addComponent$3: function(e, type, component) {
  var index, t1, components;
  index = type.get$id();
  t1 = this._componentsByType;
  components = $.ltB(index, t1.get$size()) ? t1.operator$index$1(index) : null;
  if (components == null) {
    components = $.Bag$(16, 'Component');
    t1.oprator$indexSet$2(index, components);
  }
  $.indexSet(components, e.id, component);
  e._addTypeBit$1(type.get$bit());
},
 getComponentsByType$1: function(type) {
  var index, t1, components;
  index = type.get$id();
  t1 = this._componentsByType;
  components = t1.operator$index$1(index);
  if (components == null) {
    components = $.Bag$(16, 'Component');
    t1.oprator$indexSet$2(index, components);
  }
  return components;
},
 _forComponentsOfEntity$2: function(e, f) {
  var componentBits, t1, index;
  componentBits = e.get$_typeBits();
  if (componentBits !== (componentBits | 0))
    return this._forComponentsOfEntity$2$bailout(1, f, componentBits);
  for (t1 = this._componentsByType, index = 0; componentBits > 0;) {
    if ((componentBits & 1) === 1)
      f.call$1(t1.operator$index$1(index));
    ++index;
    componentBits = $.shr(componentBits, 1);
  }
},
 _forComponentsOfEntity$2$bailout: function(state0, f, componentBits) {
  var t1, index;
  for (t1 = this._componentsByType, index = 0; $.gtB(componentBits, 0);) {
    if ($.eqB($.and(componentBits, 1), 1))
      f.call$1(t1.operator$index$1(index));
    ++index;
    componentBits = $.shr(componentBits, 1);
  }
},
 deleted$1: function(e) {
  var t1 = this._deleted;
  $.getInterceptor(t1).add$1(t1, e);
},
 clean$0: function() {
  var t1 = this._deleted;
  $.getInterceptor(t1).forEach$1(t1, new $.ComponentManager_clean_anon(this));
  t1 = this._deleted;
  $.getInterceptor(t1).clear$0(t1);
}
};

$$.ComponentType = {"": ["_bit", "_id>"],
 "super": "Object",
 _init$0: function() {
  var t1, t2;
  t1 = $.ComponentType__nextBit;
  this._bit = t1;
  $.ComponentType__nextBit = $.shl(t1, 1);
  t2 = $.ComponentType__nextId;
  $.ComponentType__nextId = $.add(t2, 1);
  this._id = t2;
},
 get$bit: function() {
  return this._bit;
},
 get$id: function() {
  return this._id;
},
 ComponentType$0: function() {
  this._init$0();
}
};

$$.Aspect = {"": ["_all", "_excluded", "_one"],
 "super": "Object",
 allOf$2: function(requiredComponentType, componentTypes) {
  this._all = this._updateBitMask$3(this._all, requiredComponentType, componentTypes);
  return this;
},
 allOf$1: function(requiredComponentType) {
  return this.allOf$2(requiredComponentType,null)
},
 exclude$2: function(requiredComponentType, componentTypes) {
  this._excluded = this._updateBitMask$3(this._excluded, requiredComponentType, componentTypes);
  return this;
},
 exclude$1: function(requiredComponentType) {
  return this.exclude$2(requiredComponentType,null)
},
 get$all: function() {
  return this._all;
},
 get$excluded: function() {
  return this._excluded;
},
 get$one: function() {
  return this._one;
},
 _updateBitMask$3: function(mask, requiredComponentType, componentTypes) {
  var t1 = {};
  t1.mask_1 = mask;
  t1.mask_1 = $.or(t1.mask_1, $.ComponentTypeManager_getTypeFor(requiredComponentType).get$bit());
  if (!(null == componentTypes))
    $.getInterceptor(componentTypes).forEach$1(componentTypes, new $.Aspect__updateBitMask_anon(t1));
  return t1.mask_1;
}
};

$$.Entity = {"": ["id>", "_uniqueId", "_typeBits=", "_systemBits>", "_world<", "_entityManager", "_componentManager"],
 "super": "Object",
 _addTypeBit$1: function(bit) {
  this._typeBits = $.or(this._typeBits, bit);
},
 _addSystemBit$1: function(bit) {
  var t1 = this._systemBits;
  if (typeof bit !== 'number')
    throw $.iae(bit);
  this._systemBits = (t1 | bit) >>> 0;
},
 _removeSystemBit$1: function(bit) {
  var t1, t2;
  t1 = this._systemBits;
  t2 = $.not(bit);
  if (typeof t2 !== 'number')
    throw $.iae(t2);
  this._systemBits = (t1 & t2) >>> 0;
},
 toString$0: function() {
  return "Entity[" + $.S(this.id) + "]";
},
 addComponent$1: function(component) {
  this._componentManager._addComponent$3(this, $.ComponentTypeManager_getTypeFor($.getInterceptor(component).get$runtimeType(component)), component);
},
 addToWorld$0: function() {
  this._world.addEntity$1(this);
},
 deleteFromWorld$0: function() {
  this._world.deleteEntity$1(this);
},
 Entity$2: function(_world, id) {
  this._entityManager = this._world.get$entityManager();
  this._componentManager = this._world.get$componentManager();
}
};

$$.EntityManager = {"": ["_entities", "_disabled", "_active", "_added", "_created", "_deleted", "_identifierPool", "_world"],
 "super": "Manager",
 initialize$0: function() {
},
 _createEntityInstance$0: function() {
  var e = $.Entity$(this._world, this._identifierPool.checkOut$0());
  this._created = this._created + 1;
  return e;
},
 added$1: function(e) {
  this._active = this._active + 1;
  this._added = this._added + 1;
  this._entities.oprator$indexSet$2(e.get$id(), e);
},
 enabled$1: function(e) {
  this._disabled.oprator$indexSet$2(e.get$id(), false);
},
 disabled$1: function(e) {
  this._disabled.oprator$indexSet$2(e.get$id(), true);
},
 deleted$1: function(e) {
  this._entities.oprator$indexSet$2(e.get$id(), null);
  this._disabled.oprator$indexSet$2(e.get$id(), false);
  this._identifierPool.checkIn$1(e.get$id());
  this._active = this._active - 1;
  this._deleted = this._deleted + 1;
},
 _getEntity$1: function(entityId) {
  return this._entities.operator$index$1(entityId);
},
 get$activeEntityCount: function() {
  return this._active;
}
};

$$._IdentifierPool = {"": ["_ids", "_nextAvailableId"],
 "super": "Object",
 checkOut$0: function() {
  var t1 = this._ids;
  if ($.gtB(t1.get$size(), 0))
    return $.getInterceptor(t1).removeLast$0(t1);
  t1 = this._nextAvailableId;
  this._nextAvailableId = t1 + 1;
  return t1;
},
 checkIn$1: function(id) {
  var t1 = this._ids;
  $.getInterceptor(t1).add$1(t1, id);
}
};

$$.EntitySystem = {"": ["world<", "_passive<"],
 "super": "Object",
 get$passive: function() {
  return this._passive;
},
 begin$0: function() {
},
 process$0: function() {
  if (this.checkProcessing$0() === true) {
    this.begin$0();
    this.processEntities$1(this._actives);
    this.end$0();
  }
},
 end$0: function() {
},
 initialize$0: function() {
},
 inserted$1: function(entity) {
},
 removed$1: function(entity) {
},
 _check$1: function(e) {
  var contains, interest, t1;
  if (this._liblib1$_dummy === true)
    return;
  contains = this._contains$1(e);
  interest = $.eq($.and(this._all, e.get$_typeBits()), this._all);
  t1 = this._one;
  if ($.gtB(t1, 0) && interest === true)
    interest = $.gt($.and(t1, e.get$_typeBits()), 0);
  if ($.gtB(this._excluded, 0) && interest === true)
    interest = $.eq($.and(this._excluded, e.get$_typeBits()), 0);
  t1 = interest === true;
  if (t1 && contains !== true)
    this._insertToSystem$1(e);
  else if (!t1 && contains === true)
    this._removeFromSystem$1(e);
},
 _contains$1: function(e) {
  return $.eq($.and(this._systemBit, e.get$_systemBits()), this._systemBit);
},
 _insertToSystem$1: function(e) {
  var t1 = this._actives;
  $.getInterceptor(t1).add$1(t1, e);
  e._addSystemBit$1(this._systemBit);
  this.inserted$1(e);
},
 _removeFromSystem$1: function(e) {
  this._actives.remove$1(e);
  e._removeSystemBit$1(this._systemBit);
  this.removed$1(e);
},
 added$1: function(e) {
  this._check$1(e);
},
 changed$1: function(e) {
  this._check$1(e);
},
 enabled$1: function(e) {
  this._check$1(e);
},
 deleted$1: function(e) {
  if (this._contains$1(e) === true)
    this._removeFromSystem$1(e);
},
 disabled$1: function(e) {
  if (this._contains$1(e) === true)
    this._removeFromSystem$1(e);
},
 EntitySystem$1: function(aspect) {
  this._liblib1$_dummy = $.eqB(this._all, 0) && $.eqB(this._one, 0);
  this._systemBit = $._SystemBitManager__getBitFor(this.get$runtimeType());
}
};

$$.EntityProcessingSystem = {
 "super": "EntitySystem",
 processEntities$1: function(entities) {
  $.getInterceptor(entities).forEach$1(entities, new $.EntityProcessingSystem_processEntities_anon(this));
},
 checkProcessing$0: function() {
  return true;
}
};

$$.VoidEntitySystem = {
 "super": "EntitySystem",
 processEntities$1: function(entities) {
  this.processSystem$0();
},
 checkProcessing$0: function() {
  return true;
}
};

$$.Manager = {"": ["_world<"],
 "super": "Object",
 added$1: function(e) {
},
 changed$1: function(e) {
},
 deleted$1: function(e) {
},
 disabled$1: function(e) {
},
 enabled$1: function(e) {
}
};

$$.GroupManager = {"": ["_entitiesByGroup>", "_groupsByEntity", "_world"],
 "super": "Manager",
 initialize$0: function() {
},
 add$2: function(e, group) {
  var t1, entities, groups;
  t1 = this._entitiesByGroup;
  entities = $.index(t1, group);
  if (entities == null) {
    entities = $.Bag$(16, 'Entity');
    $.indexSet(t1, group, entities);
  }
  $.getInterceptor(entities).add$1(entities, e);
  t1 = this._groupsByEntity;
  if (typeof t1 !== 'object' || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.is$JavaScriptIndexingBehavior())
    return this.add$2$bailout(1, e, group, t1);
  if (e !== (e | 0))
    throw $.iae(e);
  if (e < 0 || e >= t1.length)
    throw $.ioore(e);
  groups = t1[e];
  if (groups == null) {
    groups = $.Bag$(16, 'String');
    if (e >= t1.length)
      throw $.ioore(e);
    t1[e] = groups;
  }
  $.getInterceptor(groups).add$1(groups, group);
},
 add$2$bailout: function(state0, e, group, t1) {
  var groups = $.index(t1, e);
  if (groups == null) {
    groups = $.Bag$(16, 'String');
    $.indexSet(t1, e, groups);
  }
  $.getInterceptor(groups).add$1(groups, group);
},
 removeFromAllGroups$1: function(e) {
  var groups = $.index(this._groupsByEntity, e);
  if (!(groups == null)) {
    $.getInterceptor(groups).forEach$1(groups, new $.GroupManager_removeFromAllGroups_anon(e, this));
    $.getInterceptor(groups).clear$0(groups);
  }
},
 getEntities$1: function(group) {
  var t1, entities;
  t1 = this._entitiesByGroup;
  entities = $.index(t1, group);
  if (entities == null) {
    entities = $.Bag$(16, 'Entity');
    $.indexSet(t1, group, entities);
  }
  return entities;
},
 deleted$1: function(e) {
  this.removeFromAllGroups$1(e);
}
};

$$.TagManager = {"": ["_entitiesByTag", "_tagsByEntity", "_world"],
 "super": "Manager",
 register$2: function(tag, e) {
  $.indexSet(this._entitiesByTag, tag, e);
  $.indexSet(this._tagsByEntity, e, tag);
},
 unregister$1: function(tag) {
  this._tagsByEntity.remove$1(this._entitiesByTag.remove$1(tag));
},
 getEntity$1: function(tag) {
  return $.index(this._entitiesByTag, tag);
},
 deleted$1: function(e) {
  var removedTag = this._tagsByEntity.remove$1(e);
  if (!(removedTag == null))
    this._entitiesByTag.remove$1(removedTag);
},
 initialize$0: function() {
}
};

$$.World = {"": ["_entityManager", "_componentManager", "_added", "_changed", "_deleted", "_enable", "_disable", "_systems", "_systemsBag>", "_managers", "_managersBag>", "delta="],
 "super": "Object",
 initialize$0: function() {
  var t1 = this._managersBag;
  $.getInterceptor(t1).forEach$1(t1, new $.World_initialize_anon());
  t1 = this._systemsBag;
  $.getInterceptor(t1).forEach$1(t1, new $.World_initialize_anon0());
},
 get$entityManager: function() {
  return this._entityManager;
},
 get$componentManager: function() {
  return this._componentManager;
},
 addManager$1: function(manager) {
  var t1;
  $.indexSet(this._managers, $.getInterceptor(manager).get$runtimeType(manager), manager);
  t1 = this._managersBag;
  $.getInterceptor(t1).add$1(t1, manager);
  manager.set$_world(this);
},
 getManager$1: function(managerType) {
  return $.index(this._managers, managerType);
},
 createEntity$0: function() {
  return this._entityManager._createEntityInstance$0();
},
 getEntity$1: function(entityId) {
  return this._entityManager._getEntity$1(entityId);
},
 addSystem$2$passive: function(system, passive) {
  var t1;
  system.set$world(this);
  system.set$_passive(passive);
  $.indexSet(this._systems, $.getInterceptor(system).get$runtimeType(system), system);
  t1 = this._systemsBag;
  $.getInterceptor(t1).add$1(t1, system);
  return system;
},
 addSystem$1: function(system) {
  return this.addSystem$2$passive(system,false)
},
 _check$2: function(entities, perform) {
  $.getInterceptor(entities).forEach$1(entities, new $.World__check_anon(perform, this));
  $.getInterceptor(entities).clear$0(entities);
},
 process$0: function() {
  this.processEntityChanges$0();
  this._componentManager.clean$0();
  var t1 = this._systemsBag;
  $.getInterceptor(t1).forEach$1(t1, new $.World_process_anon());
},
 processEntityChanges$0: function() {
  this._check$2(this._added, new $.World_processEntityChanges_anon());
  this._check$2(this._changed, new $.World_processEntityChanges_anon0());
  this._check$2(this._disable, new $.World_processEntityChanges_anon1());
  this._check$2(this._enable, new $.World_processEntityChanges_anon2());
  this._check$2(this._deleted, new $.World_processEntityChanges_anon3());
},
 addEntity$1: function(e) {
  var t1 = this._added;
  $.getInterceptor(t1).add$1(t1, e);
},
 deleteEntity$1: function(e) {
  var t1 = this._deleted;
  if ($.getInterceptor(t1).contains$1(t1, e) !== true)
    $.getInterceptor(t1).add$1(t1, e);
},
 World$0: function() {
  this.addManager$1(this._entityManager);
  this.addManager$1(this._componentManager);
}
};

$$.AudioClip = {"": ["_manager", "_name", "_url", "_liblib2$_buffer>", "_hasError", "_errorString", "_isReadyToPlay"],
 "super": "Object",
 get$url: function() {
  return this._url;
},
 _onDecode$2: function(buffer, completer) {
  if (buffer == null) {
    this._hasError = true;
    this._errorString = "Error decoding buffer.";
    completer.complete$1(this);
    return;
  }
  this._hasError = false;
  this._errorString = "OK";
  this._liblib2$_buffer = buffer;
  this._isReadyToPlay = true;
  completer.complete$1(this);
},
 _onRequestSuccess$2: function(request, completer) {
  var response = request.get$response();
  this._manager._context.decodeAudioData$3(response, new $.AudioClip__onRequestSuccess_anon(completer, this), new $.AudioClip__onRequestSuccess_anon0(completer, this));
},
 _onRequestError$2: function(request, completer) {
  this._hasError = true;
  this._errorString = "Error fetching data";
  completer.complete$1(this);
},
 load$0: function() {
  var request, completer, t1;
  if (this.get$url() == null) {
    this._hasError = true;
    this._errorString = "No URL set.";
    return $.Future_Future$immediate(this, 'AudioClip');
  }
  this._isReadyToPlay = false;
  this._liblib2$_buffer = null;
  request = $.HttpRequest_HttpRequest();
  completer = $.Completer_Completer('AudioClip');
  request.set$responseType("arraybuffer");
  t1 = request.get$on().get$load();
  $.getInterceptor(t1).add$1(t1, new $.AudioClip_load_anon(completer, this, request));
  t1 = request.get$on().get$error();
  $.getInterceptor(t1).add$1(t1, new $.AudioClip_load_anon0(completer, this, request));
  t1 = request.get$on().get$abort();
  $.getInterceptor(t1).add$1(t1, new $.AudioClip_load_anon1(completer, this, request));
  request.open$2("GET", $.S(this._manager.baseURL) + "/" + $.S(this.get$url()));
  request.send$0();
  return completer.get$future();
},
 get$load: function() { return new $.BoundClosure2(this, 'load$0'); },
 get$length: function() {
  var t1 = this._liblib2$_buffer;
  if (t1 == null)
    return 0;
  return t1.get$duration();
}
};

$$.AudioSource = {"": ["_manager", "_name", "_output", "_gainNode", "_panNode", "_sounds", "_mutedVolume", "_isPaused", "_liblib2$_x", "_liblib2$_y", "_z", "_positional"],
 "super": "Object",
 _setupNodes$0: function() {
  var t1, t2, t3;
  this._panNode.disconnect$1(0);
  this._gainNode.disconnect$1(0);
  t1 = this._positional === true;
  t2 = this._gainNode;
  t3 = this._output;
  if (t1) {
    t2.connect$3(this._panNode, 0, 0);
    this._panNode.connect$3(t3, 0, 0);
  } else
    t2.connect$3(t3, 0, 0);
},
 set$positional: function(b) {
  this._positional = b;
  this._setupNodes$0();
},
 playOnceIn$2: function(delay, clip) {
  var sound, t1;
  sound = $.AudioSound$_internal(this, clip, false);
  t1 = this._sounds;
  $.getInterceptor(t1).add$1(t1, sound);
  sound.play$1(delay);
  sound.set$pause(this.get$pause());
  return sound;
},
 playLoopedIn$2: function(delay, clip) {
  var sound, t1;
  sound = $.AudioSound$_internal(this, clip, true);
  t1 = this._sounds;
  $.getInterceptor(t1).add$1(t1, sound);
  sound.play$1(delay);
  sound.set$pause(this.get$pause());
  return sound;
},
 _scanSounds$0: function() {
  var t1, i, sound, last, t2;
  t1 = this._sounds;
  i = $.sub($.getInterceptor(t1).get$length(t1), 1);
  if (typeof i !== 'number')
    return this._scanSounds$0$bailout(1, i);
  for (; i >= 0; --i) {
    sound = $.index(this._sounds, i);
    if (sound.get$isFinished() === true) {
      t1 = this._sounds;
      last = $.sub($.getInterceptor(t1).get$length(t1), 1);
      t2 = this._sounds;
      $.indexSet(t2, i, $.index(t2, last));
      t2 = this._sounds;
      $.getInterceptor(t2).removeLast$0(t2);
      $.print("removing sound.");
      sound.stop$0();
    }
  }
},
 _scanSounds$0$bailout: function(state0, i) {
  var sound, t1, last, t2;
  for (; $.geB(i, 0); i = $.sub(i, 1)) {
    sound = $.index(this._sounds, i);
    if (sound.get$isFinished() === true) {
      t1 = this._sounds;
      last = $.sub($.getInterceptor(t1).get$length(t1), 1);
      t2 = this._sounds;
      $.indexSet(t2, i, $.index(t2, last));
      t2 = this._sounds;
      $.getInterceptor(t2).removeLast$0(t2);
      $.print("removing sound.");
      sound.stop$0();
    }
  }
},
 get$pause: function() {
  return this._isPaused;
},
 set$pause: function(b) {
  if (b === true) {
    if (this._isPaused)
      return;
    this._pause$0();
    this._isPaused = true;
  } else {
    if (!this._isPaused)
      return;
    this._resume$0();
    this._isPaused = false;
  }
},
 _pause$0: function() {
  this._scanSounds$0();
  var t1 = this._sounds;
  $.getInterceptor(t1).forEach$1(t1, new $.AudioSource__pause_anon());
},
 _resume$0: function() {
  this._scanSounds$0();
  var t1 = this._sounds;
  $.getInterceptor(t1).forEach$1(t1, new $.AudioSource__resume_anon());
},
 stop$0: function() {
  var t1 = this._sounds;
  $.getInterceptor(t1).forEach$1(t1, new $.AudioSource_stop_anon());
  this._scanSounds$0();
},
 get$x: function() {
  return this._liblib2$_x;
},
 get$y: function() {
  return this._liblib2$_y;
},
 AudioSource$_internal$3: function(_manager, _name, _output) {
  var t1, t2;
  t1 = this._manager;
  this._gainNode = t1._context.createGain$0();
  this._panNode = t1._context.createPanner$0();
  this._panNode.set$coneOuterGain(1);
  this._setupNodes$0();
  t2 = $.List_List(null, 'AudioSound');
  $.setRuntimeTypeInfo(t2, ['AudioSound']);
  this._sounds = t2;
}
};

$$.AudioSound = {"": ["_source", "_clip", "_loop", "_sourceNode", "_pausedTime", "_startTime", "_scheduledTime", "_volume"],
 "super": "Object",
 get$isFinished: function() {
  var t1 = this._sourceNode;
  return t1 == null ? false : $.eq(t1.get$playbackState(), 3);
},
 _setupSourceNodeForPlayback$0: function() {
  var t1, t2, t3;
  t1 = this._source;
  this._sourceNode = t1._manager._context.createBufferSource$0();
  t2 = this._clip;
  if (!(t2 == null) && !(t2.get$_liblib2$_buffer() == null)) {
    t3 = t2.get$_liblib2$_buffer();
    this._sourceNode.set$buffer(t3);
    this._sourceNode.set$loopStart(0);
    t3 = t2.get$_liblib2$_buffer().get$duration();
    this._sourceNode.set$loopEnd(t3);
  }
  t2 = this._volume;
  this._sourceNode.get$gain().set$value(t2);
  t2 = this._loop;
  this._sourceNode.set$loop(t2);
  this._sourceNode.connect$3(t1._gainNode, 0, 0);
},
 set$pause: function(b) {
  if (b === true) {
    if (!(this._pausedTime == null))
      return;
    this._pause$0();
  } else {
    if (this._pausedTime == null)
      return;
    this._resume$0();
  }
},
 _computePausedTime$0: function() {
  var now, delta;
  now = this._source._manager._context.get$currentTime();
  delta = $.sub(now, this._startTime);
  if ($.ltB(now, this._scheduledTime))
    return $.sub(now, this._scheduledTime);
  if (this._loop)
    return $.mod(delta, this._sourceNode.get$buffer().get$duration());
  return delta;
},
 _pause$0: function() {
  if (this._startTime == null)
    return;
  $.print("Sound.pause");
  var t1 = this._sourceNode;
  if (!(t1 == null))
    $.print($.S(t1.get$playbackState()));
  if (!(this._sourceNode == null)) {
    this._pausedTime = this._computePausedTime$0();
    t1 = this._sourceNode;
    if (!(t1 == null))
      t1.stop$1(0);
    this._sourceNode = null;
    $.print("paused at " + $.S(this._pausedTime));
  }
},
 _resume$0: function() {
  var t1, t2, t3, t4, t5;
  if (this._pausedTime == null)
    return;
  $.print("Sound.resume");
  t1 = this._sourceNode;
  if (!(t1 == null))
    $.print($.S(t1.get$playbackState()));
  this._setupSourceNodeForPlayback$0();
  t1 = $.ltB(this._pausedTime, 0);
  t2 = this._pausedTime;
  t3 = this._source;
  if (t1) {
    this._pausedTime = $.neg(t2);
    $.print("Scheduling to play sound in " + $.S(this._pausedTime) + ".");
    t1 = t3._manager;
    this._scheduledTime = $.add(t1._context.get$currentTime(), this._pausedTime);
    t3 = this._sourceNode;
    t3.start$3(this._scheduledTime, 0, t3.get$buffer().get$duration());
    this._startTime = t1._context.get$currentTime();
  } else {
    $.print("Starting to play at offset " + $.S(t2));
    t1 = t3._manager;
    this._scheduledTime = t1._context.get$currentTime();
    t3 = this._sourceNode;
    t4 = this._scheduledTime;
    t5 = this._pausedTime;
    t3.start$3(t4, t5, $.sub(t3.get$buffer().get$duration(), t5));
    this._startTime = $.sub(t1._context.get$currentTime(), this._pausedTime);
  }
  this._pausedTime = null;
},
 play$1: function(when) {
  var t1 = this._sourceNode;
  if (!(t1 == null))
    t1.stop$1(0);
  this._sourceNode = null;
  this._setupSourceNodeForPlayback$0();
  t1 = this._source._manager;
  this._scheduledTime = $.add(t1._context.get$currentTime(), when);
  this._sourceNode.start$1(this._scheduledTime);
  this._startTime = t1._context.get$currentTime();
},
 stop$0: function() {
  var t1 = this._sourceNode;
  if (!(t1 == null))
    t1.stop$1(0);
  this._sourceNode = null;
  this._startTime = null;
  this._scheduledTime = null;
  this._pausedTime = null;
},
 AudioSound$_internal$3: function(_source, _clip, _loop) {
  this._setupSourceNodeForPlayback$0();
}
};

$$.AudioMusic = {"": ["_manager", "_source", "_sound", "_clip"],
 "super": "Object",
 set$pause: function(b) {
  var t1 = this._sound;
  if (!(t1 == null))
    t1.set$pause(b);
},
 stop$0: function() {
  var t1 = this._sound;
  if (!(t1 == null)) {
    t1.stop$0();
    this._sound = null;
  }
},
 AudioMusic$_internal$2: function(_manager, output) {
  this._source = $.AudioSource$_internal(this._manager, "music", output);
  this._source.set$positional(false);
}
};

$$.AudioManager = {"": ["_context", "_destination", "_listener", "_masterGain", "_musicGain", "_sourceGain", "baseURL<", "_clips", "_sources", "_music", "_mutedVolume", "_musicPaused", "_sourcesPaused"],
 "super": "Object",
 makeClip$2: function(name$, url) {
  var t1, clip;
  t1 = this._clips;
  clip = $.index(t1, name$);
  if (!(clip == null))
    return clip;
  clip = $.AudioClip$_internal(this, name$, url);
  $.indexSet(t1, name$, clip);
  return clip;
},
 makeSource$1: function(name$) {
  var t1, source;
  t1 = this._sources;
  source = $.index(t1, name$);
  if (!(source == null))
    return source;
  source = $.AudioSource$_internal(this, name$, this._sourceGain);
  $.indexSet(t1, name$, source);
  return source;
},
 playClipFromSource$3: function(sourceName, clipName, looped) {
  return this.playClipFromSourceIn$4(0, sourceName, clipName, looped);
},
 playClipFromSource$2: function(sourceName,clipName) {
  return this.playClipFromSource$3(sourceName,clipName,false)
},
 playClipFromSourceIn$4: function(delay, sourceName, clipName, looped) {
  var source, clip;
  source = $.index(this._sources, sourceName);
  if (source == null) {
    $.print("Could not find source " + $.S(sourceName));
    return;
  }
  clip = $.index(this._clips, clipName);
  if (clip == null) {
    $.print("Could not find clip " + $.S(clipName));
    return;
  }
  if (looped === true)
    return source.playLoopedIn$2(delay, clip);
  else
    return source.playOnceIn$2(delay, clip);
},
 AudioManager$0: function() {
  this._context = $.AudioContext_AudioContext();
  this._destination = this._context.get$destination();
  this._listener = this._context.get$listener();
  this._masterGain = this._context.createGain$0();
  this._musicGain = this._context.createGain$0();
  this._sourceGain = this._context.createGain$0();
  this._masterGain.connect$3(this._destination, 0, 0);
  this._musicGain.connect$3(this._masterGain, 0, 0);
  this._sourceGain.connect$3(this._masterGain, 0, 0);
  this._music = $.AudioMusic$_internal(this, this._musicGain);
}
};

$$.main_anon = {"": ["hudContainer_1", "gameContainer_0"],
 "super": "Closure",
 call$0: function() {
  var t1, t2;
  t1 = this.gameContainer_0;
  t1.set$width(800);
  t1.set$height(400);
  t2 = this.hudContainer_1;
  t2.set$width(800);
  t2.set$height(100);
  $.Game$(t1, t2).start$0();
}
};

$$.Maps__emitMap_anon = {"": ["box_0", "visiting_3", "result_2"],
 "super": "Closure",
 call$2: function(k, v) {
  var t1, t2;
  t1 = this.box_0;
  if (t1.first_1 !== true) {
    t2 = this.result_2;
    $.getInterceptor(t2).add$1(t2, ", ");
  }
  t1.first_1 = false;
  t1 = this.result_2;
  t2 = this.visiting_3;
  $.Collections__emitObject(k, t1, t2);
  $.getInterceptor(t1).add$1(t1, ": ");
  $.Collections__emitObject(v, t1, t2);
}
};

$$._convertDartToNative_PrepareForStructuredClone_findSlot = {"": ["copies_3", "values_2"],
 "super": "Closure",
 call$1: function(value) {
  var t1, length$, i, t2;
  t1 = this.values_2;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this.call$1$bailout0(1, value, t1);
  length$ = t1.length;
  for (i = 0; i < length$; ++i) {
    t2 = t1[i];
    if (t2 == null ? value == null : t2 === value)
      return i;
  }
  $.getInterceptor(t1).add$1(t1, value);
  t1 = this.copies_3;
  $.getInterceptor(t1).add$1(t1, null);
  return length$;
},
 call$1$bailout0: function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      t1 = env1;
      value = env0;
      break;
    case 2:
      length$ = env2;
      t1 = env1;
      value = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = this.values_2;
    case 1:
      state0 = 0;
      length$ = $.getInterceptor(t1).get$length(t1);
    case 2:
      var t1, value, length$, i, t2;
      state0 = 0;
      for (i = 0; $.ltB(i, length$); ++i) {
        t2 = $.index(t1, i);
        if (t2 == null ? value == null : t2 === value)
          return i;
      }
      $.getInterceptor(t1).add$1(t1, value);
      t1 = this.copies_3;
      $.getInterceptor(t1).add$1(t1, null);
      return length$;
  }
}
};

$$._convertDartToNative_PrepareForStructuredClone_readSlot = {"": ["copies_4"],
 "super": "Closure",
 call$1: function(i) {
  return $.index(this.copies_4, i);
}
};

$$._convertDartToNative_PrepareForStructuredClone_writeSlot = {"": ["copies_5"],
 "super": "Closure",
 call$2: function(i, x) {
  $.indexSet(this.copies_5, i, x);
}
};

$$._convertDartToNative_PrepareForStructuredClone_cleanupSlots = {
 "super": "Closure",
 call$0: function() {
}
};

$$._convertDartToNative_PrepareForStructuredClone_walk = {"": ["findSlot_8", "writeSlot_7", "readSlot_6"],
 "super": "Closure",
 call$1: function(e) {
  var t1, slot, t2, length$, copy, t3, i, element, elementCopy, copy0, j, t4;
  t1 = {};
  if (e == null)
    return e;
  if (typeof e === 'boolean')
    return e;
  if (typeof e === 'number')
    return e;
  if (typeof e === 'string')
    return e;
  if (typeof e === 'object' && e !== null && !!e.is$Date)
    throw $.$$throw($.UnimplementedError$("structured clone of Date"));
  if (typeof e === 'object' && e !== null && !!e.is$RegExp)
    throw $.$$throw($.UnimplementedError$("structured clone of RegExp"));
  if (typeof e === 'object' && e !== null && e.is$File())
    return e;
  if (typeof e === 'object' && e !== null && e.is$Blob())
    return e;
  if (typeof e === 'object' && e !== null && e.is$_FileList())
    return e;
  if (typeof e === 'object' && e !== null && e.is$ImageData())
    return e;
  if (typeof e === 'object' && e !== null && e.is$ArrayBuffer())
    return e;
  if (typeof e === 'object' && e !== null && e.is$ArrayBufferView())
    return e;
  if (typeof e === 'object' && e !== null && e.is$Map()) {
    slot = this.findSlot_8.call$1(e);
    t1.copy_1 = this.readSlot_6.call$1(slot);
    t2 = t1.copy_1;
    if (!(t2 == null))
      return t2;
    t1.copy_1 = {};
    this.writeSlot_7.call$2(slot, t1.copy_1);
    $.getInterceptor(e).forEach$1(e, new $._convertDartToNative_PrepareForStructuredClone_walk_anon(this, t1));
    return t1.copy_1;
  }
  if (typeof e === 'object' && e !== null && (e.constructor === Array || e.is$List())) {
    if (typeof e !== 'object' || e === null || (e.constructor !== Array || !!e.immutable$list) && !e.is$JavaScriptIndexingBehavior())
      return this.call$1$bailout(1, e);
    length$ = e.length;
    slot = this.findSlot_8.call$1(e);
    t2 = this.readSlot_6;
    copy = t2.call$1(slot);
    if (!(copy == null)) {
      if (true === copy) {
        copy = new Array(length$);
        this.writeSlot_7.call$2(slot, copy);
      }
      return copy;
    }
    t1 = e instanceof Array && !!!(e.immutable$list);
    t3 = this.writeSlot_7;
    if (t1) {
      t3.call$2(slot, true);
      for (i = 0; i < length$; ++i) {
        if (i >= e.length)
          throw $.ioore(i);
        element = e[i];
        elementCopy = this.call$1(element);
        if (!(elementCopy == null ? element == null : elementCopy === element)) {
          copy0 = t2.call$1(slot);
          if (true === copy0) {
            copy0 = new Array(length$);
            t3.call$2(slot, copy0);
          }
          if (typeof copy0 !== 'object' || copy0 === null || (copy0.constructor !== Array || !!copy0.immutable$list) && !copy0.is$JavaScriptIndexingBehavior())
            return this.call$1$bailout(3, e, t3, elementCopy, length$, copy0, slot, i, copy, t2);
          for (t1 = e.length, t2 = copy0.length, j = 0; j < i; ++j) {
            if (j >= t1)
              throw $.ioore(j);
            t4 = e[j];
            if (j >= t2)
              throw $.ioore(j);
            copy0[j] = t4;
          }
          if (i >= t2)
            throw $.ioore(i);
          copy0[i] = elementCopy;
          ++i;
          copy = copy0;
          break;
        }
      }
      if (copy == null) {
        t3.call$2(slot, e);
        copy = e;
      }
    } else {
      copy = new Array(length$);
      t3.call$2(slot, copy);
      i = 0;
    }
    if (typeof copy !== 'object' || copy === null || (copy.constructor !== Array || !!copy.immutable$list) && !copy.is$JavaScriptIndexingBehavior())
      return this.call$1$bailout(4, e, length$, copy, i);
    for (; i < length$; ++i) {
      if (i >= e.length)
        throw $.ioore(i);
      t1 = this.call$1(e[i]);
      if (i >= copy.length)
        throw $.ioore(i);
      copy[i] = t1;
    }
    return copy;
  }
  throw $.$$throw($.UnimplementedError$("structured clone of other type"));
},
 call$1$bailout: function(state0, env0, env1, env2, env3, env4, env5, env6, env7, env8) {
  switch (state0) {
    case 1:
      e = env0;
      break;
    case 2:
      length$ = env1;
      e = env0;
      break;
    case 3:
      t3 = env8;
      copy = env7;
      i = env6;
      slot = env5;
      copy0 = env4;
      length$ = env3;
      elementCopy = env2;
      t2 = env1;
      e = env0;
      break;
    case 4:
      i = env3;
      copy = env2;
      length$ = env1;
      e = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = {};
      if (e == null)
        return e;
      if (typeof e === 'boolean')
        return e;
      if (typeof e === 'number')
        return e;
      if (typeof e === 'string')
        return e;
      if (typeof e === 'object' && e !== null && !!e.is$Date)
        throw $.$$throw($.UnimplementedError$("structured clone of Date"));
      if (typeof e === 'object' && e !== null && !!e.is$RegExp)
        throw $.$$throw($.UnimplementedError$("structured clone of RegExp"));
      if (typeof e === 'object' && e !== null && e.is$File())
        return e;
      if (typeof e === 'object' && e !== null && e.is$Blob())
        return e;
      if (typeof e === 'object' && e !== null && e.is$_FileList())
        return e;
      if (typeof e === 'object' && e !== null && e.is$ImageData())
        return e;
      if (typeof e === 'object' && e !== null && e.is$ArrayBuffer())
        return e;
      if (typeof e === 'object' && e !== null && e.is$ArrayBufferView())
        return e;
      if (typeof e === 'object' && e !== null && e.is$Map()) {
        slot = this.findSlot_8.call$1(e);
        t1.copy_1 = this.readSlot_6.call$1(slot);
        t2 = t1.copy_1;
        if (!(t2 == null))
          return t2;
        t1.copy_1 = {};
        this.writeSlot_7.call$2(slot, t1.copy_1);
        $.getInterceptor(e).forEach$1(e, new $._convertDartToNative_PrepareForStructuredClone_walk_anon(this, t1));
        return t1.copy_1;
      }
    default:
      var t1, slot, t2, e, length$, t3, copy, i, element, elementCopy, copy0, j;
      if (state0 === 4 || state0 === 3 || state0 === 2 || state0 === 1 || state0 === 0 && typeof e === 'object' && e !== null && (e.constructor === Array || e.is$List()))
        switch (state0) {
          case 0:
          case 1:
            state0 = 0;
            length$ = $.getInterceptor(e).get$length(e);
          case 2:
            state0 = 0;
            slot = this.findSlot_8.call$1(e);
            t3 = this.readSlot_6;
            copy = t3.call$1(slot);
            if (!(copy == null)) {
              if (true === copy) {
                copy = new Array(length$);
                this.writeSlot_7.call$2(slot, copy);
              }
              return copy;
            }
            t1 = e instanceof Array && !!!(e.immutable$list);
            t2 = this.writeSlot_7;
          case 3:
            if (state0 === 3 || state0 === 0 && t1)
              switch (state0) {
                case 0:
                  t2.call$2(slot, true);
                  i = 0;
                case 3:
                  L0:
                    while (true)
                      switch (state0) {
                        case 0:
                          if (!$.ltB(i, length$))
                            break L0;
                          element = $.index(e, i);
                          elementCopy = this.call$1(element);
                        case 3:
                          if (state0 === 3 || state0 === 0 && !(elementCopy == null ? element == null : elementCopy === element))
                            switch (state0) {
                              case 0:
                                copy0 = t3.call$1(slot);
                                if (true === copy0) {
                                  copy0 = new Array(length$);
                                  t2.call$2(slot, copy0);
                                }
                              case 3:
                                state0 = 0;
                                for (j = 0; j < i; ++j)
                                  $.indexSet(copy0, j, $.index(e, j));
                                $.indexSet(copy0, i, elementCopy);
                                ++i;
                                copy = copy0;
                                break L0;
                            }
                          ++i;
                      }
                  if (copy == null) {
                    t2.call$2(slot, e);
                    copy = e;
                  }
              }
            else {
              copy = new Array(length$);
              t2.call$2(slot, copy);
              i = 0;
            }
          case 4:
            state0 = 0;
            for (; $.ltB(i, length$); ++i)
              $.indexSet(copy, i, this.call$1($.index(e, i)));
            return copy;
        }
      throw $.$$throw($.UnimplementedError$("structured clone of other type"));
  }
}
};

$$._convertDartToNative_PrepareForStructuredClone_walk_anon = {"": ["walk_9", "box_0"],
 "super": "Closure",
 call$2: function(key, value) {
  this.box_0.copy_1[key] = this.walk_9.call$1(value);
}
};

$$.DoubleLinkedQueue_length_anon = {"": ["box_0"],
 "super": "Closure",
 call$1: function(element) {
  var t1 = this.box_0;
  t1.counter_1 = $.add(t1.counter_1, 1);
}
};

$$._LinkedHashMapImpl_forEach_anon = {"": ["f_0"],
 "super": "Closure",
 call$1: function(entry) {
  this.f_0.call$2(entry.get$key(), entry.get$value());
}
};

$$.NoSuchMethodError_toString_anon = {"": ["box_0"],
 "super": "Closure",
 call$2: function(key, value) {
  var t1, t2;
  t1 = this.box_0;
  if ($.gtB(t1.i_2, 0)) {
    t2 = t1.sb_1;
    $.getInterceptor(t2).add$1(t2, ", ");
  }
  t2 = t1.sb_1;
  $.getInterceptor(t2).add$1(t2, key);
  t2 = t1.sb_1;
  $.getInterceptor(t2).add$1(t2, ": ");
  t2 = t1.sb_1;
  $.getInterceptor(t2).add$1(t2, $.Error_safeToString(value));
  t1.i_2 = $.add(t1.i_2, 1);
}
};

$$.invokeClosure_anon = {"": ["closure_0"],
 "super": "Closure",
 call$0: function() {
  return this.closure_0.call$0();
}
};

$$.invokeClosure_anon0 = {"": ["arg1_2", "closure_1"],
 "super": "Closure",
 call$0: function() {
  return this.closure_1.call$1(this.arg1_2);
}
};

$$.invokeClosure_anon1 = {"": ["arg1_5", "arg2_4", "closure_3"],
 "super": "Closure",
 call$0: function() {
  return this.closure_3.call$2(this.arg1_5, this.arg2_4);
}
};

$$.MutationObserver_observe_anon = {"": ["parsedOptions_0"],
 "super": "Closure",
 call$2: function(k, v) {
  if ($.CTC9.containsKey$1(k) === true)
    this.parsedOptions_0[k] = true === v;
  else if ($.eqB(k, "attributeFilter"))
    this.parsedOptions_0[k] = v;
  else
    throw $.$$throw($.ArgumentError$("Illegal MutationObserver.observe option '" + $.S(k) + "'"));
}
};

$$.MutationObserver_observe_override = {"": ["parsedOptions_1"],
 "super": "Closure",
 call$2: function(key, value) {
  if (!(value == null))
    this.parsedOptions_1[key] = value;
}
};

$$.ConstantMap_forEach_anon = {"": ["this_1", "f_0"],
 "super": "Closure",
 call$1: function(key) {
  return this.f_0.call$2(key, $.index(this.this_1, key));
}
};

$$.Aspect__updateBitMask_anon = {"": ["box_0"],
 "super": "Closure",
 call$1: function(componentType) {
  var t1 = this.box_0;
  t1.mask_1 = $.or(t1.mask_1, $.ComponentTypeManager_getTypeFor(componentType).get$bit());
}
};

$$.World_process_anon = {
 "super": "Closure",
 call$1: function(system) {
  if (system.get$passive() !== true)
    system.process$0();
}
};

$$.ComponentManager_clean_anon = {"": ["this_0"],
 "super": "Closure",
 call$1: function(entity) {
  return this.this_0._removeComponentsOfEntity$1(entity);
}
};

$$.ComponentManager__removeComponentsOfEntity_anon = {"": ["e_0"],
 "super": "Closure",
 call$1: function(components) {
  $.indexSet(components, this.e_0.get$id(), null);
  return;
}
};

$$.World_processEntityChanges_anon = {
 "super": "Closure",
 call$2: function(observer, entity) {
  return observer.added$1(entity);
}
};

$$.World_processEntityChanges_anon0 = {
 "super": "Closure",
 call$2: function(observer, entity) {
  return observer.changed$1(entity);
}
};

$$.World_processEntityChanges_anon1 = {
 "super": "Closure",
 call$2: function(observer, entity) {
  return observer.disabled$1(entity);
}
};

$$.World_processEntityChanges_anon2 = {
 "super": "Closure",
 call$2: function(observer, entity) {
  return observer.enabled$1(entity);
}
};

$$.World_processEntityChanges_anon3 = {
 "super": "Closure",
 call$2: function(observer, entity) {
  return observer.deleted$1(entity);
}
};

$$.World__check_anon = {"": ["perform_1", "this_0"],
 "super": "Closure",
 call$1: function(entity) {
  var t1, t2, t3, t4;
  t1 = this.this_0;
  t2 = t1.get$_managersBag();
  t3 = $.getInterceptor(t2);
  t4 = this.perform_1;
  t3.forEach$1(t2, new $.World__check__anon(t4, entity));
  t1 = t1.get$_systemsBag();
  $.getInterceptor(t1).forEach$1(t1, new $.World__check__anon0(t4, entity));
}
};

$$.World__check__anon = {"": ["perform_3", "entity_2"],
 "super": "Closure",
 call$1: function(manager) {
  return this.perform_3.call$2(manager, this.entity_2);
}
};

$$.World__check__anon0 = {"": ["perform_5", "entity_4"],
 "super": "Closure",
 call$1: function(system) {
  return this.perform_5.call$2(system, this.entity_4);
}
};

$$.GroupManager_removeFromAllGroups_anon = {"": ["e_1", "this_0"],
 "super": "Closure",
 call$1: function(group) {
  var entities = $.index(this.this_0.get$_entitiesByGroup(), group);
  if (!(entities == null))
    entities.remove$1(this.e_1);
}
};

$$.HudRenderSystem_processSystem_anon = {"": ["this_0"],
 "super": "Closure",
 call$1: function(image) {
  return this.this_0.get$context2d().drawImage$5(image, 0, 0, 800, 100);
}
};

$$.ImageCache_withImage_anon = {"": ["box_0", "action_3", "imageName_2"],
 "super": "Closure",
 call$1: function(event$) {
  var t1, t2;
  t1 = this.action_3;
  t2 = this.box_0;
  t1.call$1(t2.image_1);
  $.indexSet($.get$ImageCache_loadedImages(), this.imageName_2, t2.image_1);
}
};

$$.EntityProcessingSystem_processEntities_anon = {"": ["this_0"],
 "super": "Closure",
 call$1: function(entity) {
  return this.this_0.processEntity$1(entity);
}
};

$$.BulletSpawningSystem_fireBullet_getVelocityAfterRecoil = {"": ["shooterMass_1", "cannon_0"],
 "super": "Closure",
 call$2: function(shooterVel, bulletVelMultiplier) {
  var t1, p1, t2;
  t1 = this.shooterMass_1;
  p1 = $.mul(shooterVel, t1.get$value());
  t2 = this.cannon_0;
  return $.div($.sub(p1, $.mul($.mul(t2.get$bulletSpeed(), bulletVelMultiplier), t2.get$bulletMass())), t1.get$value());
}
};

$$.OnScreenProcessingSystem_processEntities_anon = {"": ["entitiesOnScreen_2", "cameraPos_1", "this_0"],
 "super": "Closure",
 call$1: function(entity) {
  var t1, pos, t2;
  t1 = this.this_0;
  pos = t1.get$transformMapper().get$1(entity);
  t2 = this.cameraPos_1;
  if (t1.isWithtinXRange$2(pos, t2) === true && t1.isWithtinYRange$2(pos, t2) === true) {
    t1 = this.entitiesOnScreen_2;
    $.getInterceptor(t1).add$1(t1, entity);
  }
}
};

$$.OnScreenEntityProcessingSystem_processEntitiesOnScreen_anon = {"": ["this_0"],
 "super": "Closure",
 call$1: function(entity) {
  return this.this_0.processEntityOnScreen$1(entity);
}
};

$$.SpatialRenderingSystem_processEntityOnScreen_anon = {"": ["spatial_2", "entity_1", "this_0"],
 "super": "Closure",
 call$1: function(image) {
  return this.this_0.drawImage$3(image, this.entity_1, this.spatial_2);
}
};

$$.MiniMapRenderSystem_processEntities_anon = {"": ["this_0"],
 "super": "Closure",
 call$1: function(entity) {
  var t1, transform, renderable, body, t2;
  t1 = this.this_0;
  transform = t1.get$transformMapper().get$1(entity);
  renderable = t1.get$renderableMapper().get$1(entity);
  body = t1.get$bodyMapper().get$1(entity);
  t2 = renderable.get$color();
  t1.get$context2d().set$fillStyle(t2);
  t2 = renderable.get$color();
  t1.get$context2d().set$strokeStyle(t2);
  t1.get$context2d().beginPath$0();
  t1.get$context2d().fillRect$4($.sub(transform.get$x(), $.div(body.get$radius(), 2)), $.sub(transform.get$y(), $.div(body.get$radius(), 2)), body.get$radius(), body.get$radius());
  t1.get$context2d().closePath$0();
}
};

$$.World_initialize_anon = {
 "super": "Closure",
 call$1: function(manager) {
  return manager.initialize$0();
}
};

$$.World_initialize_anon0 = {
 "super": "Closure",
 call$1: function(system) {
  return system.initialize$0();
}
};

$$.BackgroundRenderSystem_initBackground_anon = {"": ["bgContext_2", "transformMapper_1", "spatialMapper_0"],
 "super": "Closure",
 call$1: function(entity) {
  var transform = this.transformMapper_1.get$1(entity);
  $.ImageCache_withImage(this.spatialMapper_0.get$1(entity).get$resource(), new $.BackgroundRenderSystem_initBackground__anon(this.bgContext_2, transform));
  entity.deleteFromWorld$0();
}
};

$$.BackgroundRenderSystem_initBackground__anon = {"": ["bgContext_4", "transform_3"],
 "super": "Closure",
 call$1: function(image) {
  var t1, t2;
  t1 = this.bgContext_4;
  t1.beginPath$0();
  t2 = this.transform_3;
  t1.drawImage$5(image, $.sub(t2.get$x(), $.tdiv(image.get$width(), 2)), $.sub(t2.get$y(), $.tdiv(image.get$height(), 2)), image.get$width(), image.get$height());
  t1.closePath$0();
}
};

$$.AudioClip_load_anon = {"": ["completer_2", "this_1", "request_0"],
 "super": "Closure",
 call$1: function(e) {
  return this.this_1._onRequestSuccess$2(this.request_0, this.completer_2);
}
};

$$.AudioClip_load_anon0 = {"": ["completer_5", "this_4", "request_3"],
 "super": "Closure",
 call$1: function(e) {
  return this.this_4._onRequestError$2(this.request_3, this.completer_5);
}
};

$$.AudioClip_load_anon1 = {"": ["completer_8", "this_7", "request_6"],
 "super": "Closure",
 call$1: function(e) {
  return this.this_7._onRequestError$2(this.request_6, this.completer_8);
}
};

$$.AudioClip__onRequestSuccess_anon = {"": ["completer_1", "this_0"],
 "super": "Closure",
 call$1: function(b) {
  return this.this_0._onDecode$2(b, this.completer_1);
}
};

$$.AudioClip__onRequestSuccess_anon0 = {"": ["completer_3", "this_2"],
 "super": "Closure",
 call$1: function(b) {
  return this.this_2._onDecode$2(b, this.completer_3);
}
};

$$.AudioSource__resume_anon = {
 "super": "Closure",
 call$1: function(sound) {
  sound.set$pause(false);
}
};

$$.AudioSource_stop_anon = {
 "super": "Closure",
 call$1: function(sound) {
  sound.stop$0();
}
};

$$.AudioSource__pause_anon = {
 "super": "Closure",
 call$1: function(sound) {
  sound.set$pause(true);
}
};

$$.startRootIsolate_anon = {
 "super": "Closure",
 call$0: function() {
  $._TimerFactory__factory = $._timerFactory;
  return;
}
};

$$._BaseSendPort_call_anon = {"": ["completer_1", "port_0"],
 "super": "Closure",
 call$2: function(value, ignoreReplyTo) {
  var t1, t2;
  this.port_0.close$0();
  t1 = typeof value === 'object' && value !== null && !!value.is$Exception;
  t2 = this.completer_1;
  if (t1)
    t2.completeException$1(value);
  else
    t2.complete$1(value);
}
};

$$._WorkerSendPort_send_anon = {"": ["replyTo_2", "this_1", "message_0"],
 "super": "Closure",
 call$0: function() {
  var t1, t2, workerMessage, t3;
  t1 = this.this_1;
  t2 = this.replyTo_2;
  t1._checkReplyTo$1(t2);
  workerMessage = $._serializeMessage($.makeLiteralMap(["command", "message", "port", t1, "msg", this.message_0, "replyTo", t2]));
  t2 = $._globalState().get$isWorker() === true;
  t3 = $._globalState;
  if (t2)
    t3().get$mainManager().postMessage$1(workerMessage);
  else
    $.index(t3().get$managers(), t1.get$_workerId()).postMessage$1(workerMessage);
}
};

$$._waitForPendingPorts_anon = {"": ["callback_0"],
 "super": "Closure",
 call$1: function(_) {
  return this.callback_0.call$0();
}
};

$$.Futures_wait_anon = {"": ["result_5", "completer_4", "box_0", "values_3", "pos_2"],
 "super": "Closure",
 call$1: function(value) {
  var t1, t2, remaining;
  t1 = this.values_3;
  $.indexSet(t1, this.pos_2, value);
  t2 = this.box_0;
  remaining = $.sub(t2.remaining_1, 1);
  t2.remaining_1 = remaining;
  if ($.eqB(remaining, 0) && this.result_5.get$isComplete() !== true)
    this.completer_4.complete$1(t1);
}
};

$$.Futures_wait_anon0 = {"": ["result_8", "completer_7", "future_6"],
 "super": "Closure",
 call$1: function(exception) {
  if (this.result_8.get$isComplete() !== true)
    this.completer_7.completeException$2(exception, this.future_6.get$stackTrace());
  return true;
}
};

$$._PendingSendPortFinder_visitMap_anon = {"": ["this_0"],
 "super": "Closure",
 call$1: function(e) {
  return this.this_0._dispatch$1(e);
}
};

$$.Storage_values_anon = {"": ["values_0"],
 "super": "Closure",
 call$2: function(k, v) {
  var t1 = this.values_0;
  return $.getInterceptor(t1).add$1(t1, v);
}
};

$$._LinkedHashMapImpl_values_anon = {"": ["box_0", "list_2"],
 "super": "Closure",
 call$1: function(entry) {
  var t1, t2, t3;
  t1 = this.list_2;
  t2 = this.box_0;
  t3 = t2.index_1;
  t2.index_1 = $.add(t3, 1);
  $.indexSet(t1, t3, entry.get$value());
}
};

$$._HashMapImpl_values_anon = {"": ["box_0", "list_2"],
 "super": "Closure",
 call$2: function(key, value) {
  var t1, t2, t3;
  t1 = this.list_2;
  t2 = this.box_0;
  t3 = t2.i_1;
  t2.i_1 = $.add(t3, 1);
  $.indexSet(t1, t3, value);
}
};

$$.ConstantMap_values_anon = {"": ["result_1", "this_0"],
 "super": "Closure",
 call$1: function(key) {
  var t1 = this.result_1;
  return $.getInterceptor(t1).add$1(t1, $.index(this.this_0, key));
}
};

$$._PendingSendPortFinder_visitList_anon = {"": ["this_0"],
 "super": "Closure",
 call$1: function(e) {
  return this.this_0._dispatch$1(e);
}
};

$$._NativeJsSendPort_send_anon = {"": ["replyTo_5", "message_4", "this_3"],
 "super": "Closure",
 call$0: function() {
  var t1, t2, t3, isolate, shouldSerialize, msg;
  t1 = {};
  t2 = this.this_3;
  t3 = this.replyTo_5;
  t2._checkReplyTo$1(t3);
  isolate = $.index($._globalState().get$isolates(), t2.get$_isolateId());
  if (isolate == null)
    return;
  if (t2.get$_receivePort().get$_liblib3$_callback() == null)
    return;
  shouldSerialize = !($._globalState().get$currentContext() == null) && !$.eqB($._globalState().get$currentContext().get$id(), t2.get$_isolateId());
  msg = this.message_4;
  t1.msg_1 = msg;
  t1.reply_2 = t3;
  if (shouldSerialize) {
    t1.msg_1 = $._serializeMessage(t1.msg_1);
    t1.reply_2 = $._serializeMessage(t1.reply_2);
  }
  $._globalState().get$topEventLoop().enqueue$3(isolate, new $._NativeJsSendPort_send__anon(t2, shouldSerialize, t1), "receive " + $.S(msg));
}
};

$$._NativeJsSendPort_send__anon = {"": ["this_7", "shouldSerialize_6", "box_0"],
 "super": "Closure",
 call$0: function() {
  var t1, t2;
  t1 = this.this_7;
  if (!(t1.get$_receivePort().get$_liblib3$_callback() == null)) {
    if (this.shouldSerialize_6 === true) {
      t2 = this.box_0;
      t2.msg_1 = $._deserializeMessage(t2.msg_1);
      t2.reply_2 = $._deserializeMessage(t2.reply_2);
    }
    t1 = t1.get$_receivePort();
    t2 = this.box_0;
    t1._liblib3$_callback$2(t2.msg_1, t2.reply_2);
  }
}
};

$$.Storage_keys_anon = {"": ["keys_0"],
 "super": "Closure",
 call$2: function(k, v) {
  var t1 = this.keys_0;
  return $.getInterceptor(t1).add$1(t1, k);
}
};

$$._LinkedHashMapImpl_keys_anon = {"": ["box_0", "list_2"],
 "super": "Closure",
 call$1: function(entry) {
  var t1, t2, t3;
  t1 = this.list_2;
  t2 = this.box_0;
  t3 = t2.index_10;
  t2.index_10 = $.add(t3, 1);
  $.indexSet(t1, t3, entry.get$key());
}
};

$$._HashMapImpl_keys_anon = {"": ["list_2", "box_0"],
 "super": "Closure",
 call$2: function(key, value) {
  var t1, t2, t3;
  t1 = this.list_2;
  t2 = this.box_0;
  t3 = t2.i_10;
  t2.i_10 = $.add(t3, 1);
  $.indexSet(t1, t3, key);
}
};

$$._Copier_visitMap_anon = {"": ["box_0", "this_2"],
 "super": "Closure",
 call$2: function(key, val) {
  var t1, t2;
  t1 = this.box_0.copy_10;
  t2 = this.this_2;
  $.indexSet(t1, t2._dispatch$1(key), t2._dispatch$1(val));
}
};

$$._EventLoop__runHelper_next = {"": ["this_0"],
 "super": "Closure",
 call$0: function() {
  if (this.this_0.runIteration$0() !== true)
    return;
  $._window().setTimeout$2(this, 0);
}
};

$$.anon = {"": ["callback_1", "this_0"],
 "super": "Closure",
 call$0: function() {
  return this.callback_1.call$1(this.this_0);
}
};

$$.anon0 = {"": ["this_1", "callback_0"],
 "super": "Closure",
 call$0: function() {
  return this.callback_0.call$1(this.this_1);
}
};

$$.BoundClosure = {'':
['self', 'target'],
'super': 'Closure',
call$1: function(p0) { return this.self[this.target](p0); }
};
$$.BoundClosure0 = {'':
['self', 'target'],
'super': 'Closure',
call$3: function(p0, p1, p2) { return this.self[this.target](p0, p1, p2); }
};
$$.BoundClosure1 = {'':
['self', 'target'],
'super': 'Closure',
call$2: function(p0, p1) { return this.self[this.target](p0, p1); }
};
$$.BoundClosure2 = {'':
['self', 'target'],
'super': 'Closure',
call$0: function() { return this.self[this.target](); }
};
$.add = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a + b : $.add$slow(a, b);
};

$.sub = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a - b : $.sub$slow(a, b);
};

$.div = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a / b : $.div$slow(a, b);
};

$.mul = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a * b : $.mul$slow(a, b);
};

$.gt = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a > b : $.gt$slow(a, b);
};

$.lt = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a < b : $.lt$slow(a, b);
};

$.le = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a <= b : $.le$slow(a, b);
};

$.gtB = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a > b : $.gt$slow(a, b) === true;
};

$.geB = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a >= b : $.ge$slow(a, b) === true;
};

$.ltB = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a < b : $.lt$slow(a, b) === true;
};

$.leB = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a <= b : $.le$slow(a, b) === true;
};

$.index = function(a, index) {
  var key;
  if (typeof a == "string" || a.constructor === Array) {
    key = index >>> 0;
    if (key === index && key < a.length)
      return a[key];
  }
  return $.index$slow(a, index);
};

$.indexSet = function(a, index, value) {
  var key;
  if (a.constructor === Array && !a.immutable$list) {
    key = index >>> 0;
    if (key === index && key < a.length) {
      a[key] = value;
      return;
    }
  }
  $.indexSet$slow(a, index, value);
};

$.checkNumbers = function(a, b) {
  if (typeof a === 'number')
    if (typeof b === 'number')
      return true;
    else
      throw $.$$throw($.ArgumentError$(b));
  return false;
};

$.isJsArray = function(value) {
  return !(value == null) && value.constructor === Array;
};

$.add$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a + b;
  return a.operator$add$1(b);
};

$.div$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a / b;
  return a.operator$div$1(b);
};

$.mul$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a * b;
  return a.operator$mul$1(b);
};

$.sub$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a - b;
  return a.operator$sub$1(b);
};

$.mod = function(a, b) {
  var result;
  if ($.checkNumbers(a, b)) {
    result = a % b;
    if (result === 0)
      return 0;
    if (result > 0)
      return result;
    if (b < 0)
      return result - b;
    else
      return result + b;
  }
  return a.operator$mod$1(b);
};

$.tdiv = function(a, b) {
  var t1;
  if ($.checkNumbers(a, b)) {
    t1 = a / b;
    return $.getInterceptor(t1).truncate$0(t1);
  }
  return a.operator$tdiv$1(b);
};

$.eq = function(a, b) {
  if (a == null)
    return b == null;
  if (b == null)
    return false;
  if (typeof a === "object")
    if (!!a.operator$eq$1)
      return $.getInterceptor(a).operator$eq$1(a, b);
  return a === b;
};

$.eqB = function(a, b) {
  if (a == null)
    return b == null;
  if (b == null)
    return false;
  if (typeof a === "object")
    if (!!a.operator$eq$1)
      return $.getInterceptor(a).operator$eq$1(a, b) === true;
  return a === b;
};

$.gt$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a > b;
  return a.operator$gt$1(b);
};

$.ge$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a >= b;
  return a.operator$ge$1(b);
};

$.lt$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a < b;
  return a.operator$lt$1(b);
};

$.IDBOpenDBRequestEvents$ = function(_ptr) {
  return new $.IDBOpenDBRequestEvents(_ptr);
};

$.shl = function(a, b) {
  if ($.checkNumbers(a, b)) {
    if (b < 0)
      throw $.$$throw($.ArgumentError$(b));
    if (b > 31)
      return 0;
    return (a << b) >>> 0;
  }
  return a.operator$shl$1(b);
};

$.shr = function(a, b) {
  if ($.checkNumbers(a, b)) {
    if (b < 0)
      throw $.$$throw($.ArgumentError$(b));
    if (a > 0) {
      if (b > 31)
        return 0;
      return a >>> b;
    }
    if (b > 31)
      b = 31;
    return (a >> b) >>> 0;
  }
  return a.operator$shr$1(b);
};

$.and = function(a, b) {
  if ($.checkNumbers(a, b))
    return (a & b) >>> 0;
  return a.operator$and$1(b);
};

$.or = function(a, b) {
  if ($.checkNumbers(a, b))
    return (a | b) >>> 0;
  return a.operator$or$1(b);
};

$.IDBRequestEvents$ = function(_ptr) {
  return new $.IDBRequestEvents(_ptr);
};

$.le$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a <= b;
  return a.operator$le$1(b);
};

$.neg = function(a) {
  if (typeof a === "number")
    return -a;
  return a.operator$negate$0();
};

$.index$slow = function(a, index) {
  var t1;
  if (!(typeof a === 'string'))
    t1 = !(a == null) && a.constructor === Array;
  else
    t1 = true;
  if (t1) {
    if (!(typeof index === 'number' && Math.floor(index) === index)) {
      if (!(typeof index === 'number'))
        throw $.$$throw($.ArgumentError$(index));
      if (!($.getInterceptor(index).truncate$0(index) === index))
        throw $.$$throw($.ArgumentError$(index));
    }
    if ($.ltB(index, 0) || $.geB(index, $.getInterceptor(a).get$length(a)))
      throw $.$$throw($.RangeError$value(index));
    return a[index];
  }
  return a.operator$index$1(index);
};

$.indexSet$slow = function(a, index, value) {
  if (!(a == null) && a.constructor === Array) {
    if (!(typeof index === 'number' && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index < 0 || $.geB(index, $.getInterceptor(a).get$length(a)))
      throw $.$$throw($.RangeError$value(index));
    $.checkMutable(a, "indexed set");
    a[index] = value;
    return;
  }
  a.oprator$indexSet$2(index, value);
};

$.checkMutable = function(list, reason) {
  if (!!(list.immutable$list))
    throw $.$$throw($.UnsupportedError$(reason));
};

$.checkGrowable = function(list, reason) {
  if (!!(list.fixed$length))
    throw $.$$throw($.UnsupportedError$(reason));
};

$.S = function(value) {
  var res = $.getInterceptor(value).toString$0(value);
  if (!(typeof res === 'string'))
    throw $.$$throw($.ArgumentError$(value));
  return res;
};

$.createInvocationMirror = function(name$, internalName, type, arguments$, argumentNames) {
  return $.JSInvocationMirror$(name$, internalName, type, arguments$, argumentNames);
};

$.iae = function(argument) {
  throw $.$$throw($.ArgumentError$(argument));
};

$.ioore = function(index) {
  throw $.$$throw($.RangeError$value(index));
};

$.stringLastIndexOfUnchecked = function(receiver, element, start) {
  return receiver.lastIndexOf(element, start);
};

$.checkNull = function(object) {
  if (object == null)
    throw $.$$throw($.ArgumentError$(null));
  return object;
};

$.checkNum = function(value) {
  if (!(typeof value === 'number'))
    throw $.$$throw($.ArgumentError$(value));
  return value;
};

$.AudioSound$_internal = function(_source, _clip, _loop) {
  var t1 = new $.AudioSound(_source, _clip, _loop, null, null, null, null, 1);
  t1.AudioSound$_internal$3(_source, _clip, _loop);
  return t1;
};

$.IDBTransactionEvents$ = function(_ptr) {
  return new $.IDBTransactionEvents(_ptr);
};

$.checkString = function(value) {
  if (!(typeof value === 'string'))
    throw $.$$throw($.ArgumentError$(value));
  return value;
};

$.$$throw = function(ex) {
  var jsError;
  if (ex == null)
    ex = $.CTC;
  jsError = new Error();
  jsError.name = ex;
  jsError.description = ex;
  jsError.dartException = ex;
  jsError.toString = $.toStringWrapper.call$0;
  throw jsError;
};

$.toStringWrapper = function() {
  var t1 = this.dartException;
  return $.getInterceptor(t1).toString$0(t1);
};

$.makeLiteralMap = function(keyValuePairs) {
  var iterator, result;
  iterator = $.getInterceptor(keyValuePairs).iterator$0(keyValuePairs);
  result = $.LinkedHashMap_LinkedHashMap();
  for (; iterator.get$hasNext() === true;)
    $.indexSet(result, iterator.next$0(), iterator.next$0());
  return result;
};

$.invokeClosure = function(closure, isolate, numberOfArguments, arg1, arg2) {
  if ($.eqB(numberOfArguments, 0))
    return $._callInIsolate(isolate, new $.invokeClosure_anon(closure));
  else if ($.eqB(numberOfArguments, 1))
    return $._callInIsolate(isolate, new $.invokeClosure_anon0(arg1, closure));
  else if ($.eqB(numberOfArguments, 2))
    return $._callInIsolate(isolate, new $.invokeClosure_anon1(arg1, arg2, closure));
  else
    throw $.$$throw($.Exception_Exception("Unsupported number of arguments for wrapped closure"));
};

$.unwrapException = function(ex) {
  var message, type, name$, ieErrorCode, ieFacilityNumber, t1;
  if ("dartException" in ex)
    return ex.dartException;
  message = ex.message;
  if (ex instanceof TypeError) {
    type = ex.type;
    name$ = ex.arguments ? ex.arguments[0] : "";
    if (message.indexOf("JSNull") !== -1 || $.eqB(type, "property_not_function") || $.eqB(type, "called_non_callable") || $.eqB(type, "non_object_property_call") || $.eqB(type, "non_object_property_load"))
      return $.NoSuchMethodError$(null, name$, [], $.makeLiteralMap([]), null);
    else if ($.eqB(type, "undefined_method"))
      return $.NoSuchMethodError$("", name$, [], $.makeLiteralMap([]), null);
    ieErrorCode = ex.number & 0xffff;
    ieFacilityNumber = ex.number>>16 & 0x1FFF;
    if (typeof message === 'string')
      if ($.getInterceptor(message).endsWith$1(message, "is null") === true || $.getInterceptor(message).endsWith$1(message, "is undefined") === true || $.getInterceptor(message).endsWith$1(message, "is null or undefined") === true)
        return $.NoSuchMethodError$(null, "<unknown>", [], $.makeLiteralMap([]), null);
      else {
        if (message.indexOf(" is not a function") === -1)
          t1 = ieErrorCode === 438 && ieFacilityNumber === 10;
        else
          t1 = true;
        if (t1)
          return $.NoSuchMethodError$("", "<unknown>", [], $.makeLiteralMap([]), null);
      }
    return $.Exception_Exception(typeof message === 'string' ? message : "");
  }
  if (ex instanceof RangeError) {
    if (typeof message === 'string' && message.indexOf("call stack") !== -1)
      return $.StackOverflowError$();
    return $.ArgumentError$(null);
  }
  if (typeof InternalError == 'function' && ex instanceof InternalError)
    if (typeof message === 'string' && message === "too much recursion")
      return $.StackOverflowError$();
  return ex;
};

$.convertDartClosureToJS = function(closure, arity) {
  var function$;
  if (closure == null)
    return;
  function$ = closure.$identity;
  if (!!function$)
    return function$;
  function$ = function() {
    return $.invokeClosure.call$5(closure, $._currentIsolate(), arity, arguments[0], arguments[1]);
  };
  closure.$identity = function$;
  return function$;
};

$.setRuntimeTypeInfo = function(target, typeInfo) {
  if (!(target == null))
    target.builtin$typeInfo = typeInfo;
};

$.getRuntimeTypeInfo = function(target) {
  var res;
  if (target == null)
    return;
  res = target.builtin$typeInfo;
  return res == null ? {} : res;
};

$.IDBVersionChangeRequestEvents$ = function(_ptr) {
  return new $.IDBVersionChangeRequestEvents(_ptr);
};

$.not = function(a) {
  if (typeof a === "number")
    return (~a) >>> 0;
  return a.operator$not$0();
};

$.InputElementEvents$ = function(_ptr) {
  return new $.InputElementEvents(_ptr);
};

$.getTraceFromException = function(exception) {
  return $.StackTrace$(exception.stack);
};

$.xor = function(a, b) {
  if ($.checkNumbers(a, b))
    return (a ^ b) >>> 0;
  return a.operator$xor$1(b);
};

$.Utils_doCirclesCollide = function(x1, y1, radius1, x2, y2, radius2) {
  var dx, dy, d;
  dx = $.sub(x2, x1);
  dy = $.sub(y2, y1);
  d = $.add(radius1, radius2);
  return $.lt($.add($.mul(dx, dx), $.mul(dy, dy)), $.mul(d, d));
};

$.MutationObserver_MutationObserver = function(callback) {
  return $._MutationObserverFactoryProvider_createMutationObserver(callback);
};

$.throwCyclicInit = function(staticName) {
  throw $.$$throw($.RuntimeError$("Cyclic initialization for static " + $.S(staticName)));
};

$.createRuntimeType = function(name$) {
  return $.TypeImpl$(name$);
};

$.getRuntimeTypeString = function(object) {
  var className, typeInfo, arguments$, i, argument;
  className = !(object == null) && object.constructor === Array ? "List" : object.constructor.builtin$cls;
  typeInfo = object.builtin$typeInfo;
  if (typeof typeInfo !== 'string' && (typeof typeInfo !== 'object' || typeInfo === null || typeInfo.constructor !== Array && !typeInfo.is$JavaScriptIndexingBehavior()))
    return $.getRuntimeTypeString$bailout(1, className, typeInfo);
  arguments$ = $.StringBuffer_StringBuffer("");
  for (i = 0; i < typeInfo.length; ++i) {
    if (i > 0)
      $.getInterceptor(arguments$).add$1(arguments$, ", ");
    if (i >= typeInfo.length)
      throw $.ioore(i);
    argument = typeInfo[i];
    if (argument == null)
      argument = "dynamic";
    $.getInterceptor(arguments$).add$1(arguments$, argument);
  }
  return className + "<" + $.S(arguments$) + ">";
};

$.typeNameInSafari = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === "Window")
    return "DOMWindow";
  if (name$ === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if (name$ === "WebKitMutationObserver")
    return "MutationObserver";
  if (name$ === "AudioChannelMerger")
    return "ChannelMergerNode";
  if (name$ === "AudioChannelSplitter")
    return "ChannelSplitterNode";
  if (name$ === "AudioGainNode")
    return "GainNode";
  if (name$ === "AudioPannerNode")
    return "PannerNode";
  if (name$ === "JavaScriptAudioNode")
    return "ScriptProcessorNode";
  if (name$ === "Oscillator")
    return "OscillatorNode";
  if (name$ === "RealtimeAnalyserNode")
    return "AnalyserNode";
  return name$;
};

$.typeNameInOpera = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === "Window")
    return "DOMWindow";
  return name$;
};

$.typeNameInFirefox = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === "Window")
    return "DOMWindow";
  if (name$ === "CSS2Properties")
    return "CSSStyleDeclaration";
  if (name$ === "DataTransfer")
    return "Clipboard";
  if (name$ === "DragEvent")
    return "MouseEvent";
  if (name$ === "GeoGeolocation")
    return "Geolocation";
  if (name$ === "MouseScrollEvent")
    return "WheelEvent";
  if (name$ === "OfflineResourceList")
    return "DOMApplicationCache";
  if (name$ === "WorkerMessageEvent")
    return "MessageEvent";
  if (name$ === "XMLDocument")
    return "Document";
  return name$;
};

$.typeNameInIE = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === "Window")
    return "DOMWindow";
  if (name$ === "Document") {
    if (!!obj.xmlVersion)
      return "Document";
    return "HTMLDocument";
  }
  if (name$ === "ApplicationCache")
    return "DOMApplicationCache";
  if (name$ === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if (name$ === "DataTransfer")
    return "Clipboard";
  if (name$ === "DragEvent")
    return "MouseEvent";
  if (name$ === "HTMLDDElement")
    return "HTMLElement";
  if (name$ === "HTMLDTElement")
    return "HTMLElement";
  if (name$ === "HTMLTableDataCellElement")
    return "HTMLTableCellElement";
  if (name$ === "HTMLTableHeaderCellElement")
    return "HTMLTableCellElement";
  if (name$ === "HTMLPhraseElement")
    return "HTMLElement";
  if (name$ === "MSStyleCSSProperties")
    return "CSSStyleDeclaration";
  if (name$ === "MouseWheelEvent")
    return "WheelEvent";
  if (name$ === "Position")
    return "Geoposition";
  return name$;
};

$.constructorNameFallback = function(object) {
  var constructor$, name$, t1, string;
  if (object == null)
    return "Null";
  constructor$ = object.constructor;
  if (typeof(constructor$) === "function") {
    name$ = constructor$.name;
    if (typeof name$ === 'string')
      t1 = !(name$ === "") && !(name$ === "Object") && !(name$ === "Function.prototype");
    else
      t1 = false;
    if (t1)
      return name$;
  }
  string = Object.prototype.toString.call(object);
  return string.substring(8, string.length - 1);
};

$.typeNameInChrome = function(obj) {
  var name$ = obj.constructor.name;
  if (name$ === "Window")
    return "DOMWindow";
  if (name$ === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if (name$ === "WebKitMutationObserver")
    return "MutationObserver";
  if (name$ === "AudioChannelMerger")
    return "ChannelMergerNode";
  if (name$ === "AudioChannelSplitter")
    return "ChannelSplitterNode";
  if (name$ === "AudioGainNode")
    return "GainNode";
  if (name$ === "AudioPannerNode")
    return "PannerNode";
  if (name$ === "JavaScriptAudioNode")
    return "ScriptProcessorNode";
  if (name$ === "Oscillator")
    return "OscillatorNode";
  if (name$ === "RealtimeAnalyserNode")
    return "AnalyserNode";
  return name$;
};

$.Future_Future$immediate = function(value, T) {
  return $._FutureImpl__FutureImpl$immediate(value, T);
};

$.getFunctionForTypeNameOf = function() {
  if (!(typeof(navigator) === "object"))
    return $.typeNameInChrome;
  var userAgent = navigator.userAgent;
  if (userAgent.indexOf("Chrome") !== -1 || userAgent.indexOf("DumpRenderTree") !== -1)
    return $.typeNameInChrome;
  else if (userAgent.indexOf("Firefox") !== -1)
    return $.typeNameInFirefox;
  else if (userAgent.indexOf("MSIE") !== -1)
    return $.typeNameInIE;
  else if (userAgent.indexOf("Opera") !== -1)
    return $.typeNameInOpera;
  else if (userAgent.indexOf("AppleWebKit") !== -1)
    return $.typeNameInSafari;
  else
    return $.constructorNameFallback;
};

$.getTypeNameOf = function(obj) {
  if ($._getTypeNameOf == null)
    $._getTypeNameOf = $.getFunctionForTypeNameOf();
  return $._getTypeNameOf.call$1(obj);
};

$.toStringForNativeObject = function(obj) {
  return "Instance of " + $.getTypeNameOf(obj);
};

$.hashCodeForNativeObject = function(object) {
  return $.Primitives_objectHashCode(object);
};

$.defineProperty = function(obj, property, value) {
  Object.defineProperty(obj, property,
      {value: value, enumerable: false, writable: true, configurable: true});
};

$.dynamicBind = function(obj, name$, methods, arguments$) {
  var tag, hasOwnProperty, method, i, entry, proto;
  tag = $.getTypeNameOf(obj);
  hasOwnProperty = Object.prototype.hasOwnProperty;
  method = $.lookupDynamicClass(hasOwnProperty, methods, tag);
  if (method == null && !($._dynamicMetadata0() == null))
    for (i = 0; i < $._dynamicMetadata0().length; ++i) {
      entry = $._dynamicMetadata0()[i];
      if (hasOwnProperty.call(entry.get$_set(), tag)) {
        method = $.lookupDynamicClass(hasOwnProperty, methods, entry.get$_tag());
        if (!(method == null))
          break;
      }
    }
  if (method == null)
    method = $.lookupDynamicClass(hasOwnProperty, methods, $.getTypeNameOf($.CTC15));
  proto = Object.getPrototypeOf(obj);
  if (method == null)
    method = function () {if (Object.getPrototypeOf(this) === proto) {throw new TypeError(name$ + " is not a function");} else {return Object.prototype[name$].apply(this, arguments);}};
  if (!hasOwnProperty.call(proto, name$))
    $.defineProperty(proto, name$, method);
  return method.apply(obj, arguments$);
};

$.lookupDynamicClass = function(hasOwnProperty, methods, className) {
  return hasOwnProperty.call(methods, className) ? methods[className] : null;
};

$.dynamicFunction = function(name$) {
  var f, methods, dartMethod, bind;
  f = Object.prototype[name$];
  if (!(f == null) && !!f.methods)
    return f.methods;
  methods = {};
  dartMethod = Object.getPrototypeOf($.CTC15)[name$];
  if (!(dartMethod == null))
    methods["Object"] = dartMethod;
  bind = function() {return $.dynamicBind.call$4(this, name$, methods, Array.prototype.slice.call(arguments));};
  bind.methods = methods;
  $.defineProperty(Object.prototype, name$, bind);
  return methods;
};

$._dynamicMetadata0 = function() {
  if (typeof($dynamicMetadata) === "undefined") {
    var t1 = [];
    $._dynamicMetadata(t1);
  }
  return $dynamicMetadata;
};

$._dynamicMetadata = function(table) {
  $dynamicMetadata = table;
};

$.dynamicSetMetadata = function(inputTable) {
  var t1 = $.buildDynamicMetadata(inputTable);
  $._dynamicMetadata(t1);
};

$.regExpExec = function(regExp, str) {
  var result = $.regExpGetNative(regExp).exec(str);
  if (result == null)
    return;
  return result;
};

$.regExpTest = function(regExp, str) {
  return $.regExpGetNative(regExp).test(str);
};

$.regExpGetNative = function(regExp) {
  var r = regExp._re;
  return r == null ? regExp._re = $.regExpMakeNative(regExp, false) : r;
};

$.buildDynamicMetadata = function(inputTable) {
  var result, i, tag, tags, set, tagNames, j;
  result = [];
  for (i = 0; i < inputTable.length; ++i) {
    tag = inputTable[i][0];
    tags = inputTable[i][1];
    set = {};
    tagNames = $.getInterceptor(tags).split$1(tags, "|");
    for (j = 0; j < tagNames.length; ++j)
      set[tagNames[j]] = true;
    $.getInterceptor(result).add$1(result, $.MetaInfo$(tag, tags, set));
  }
  return result;
};

$.regExpMakeNative = function(regExp, global, exception) {
  var pattern, multiLine, ignoreCase, sb, t1, t2, e;
  pattern = regExp.get$pattern();
  multiLine = regExp.get$multiLine();
  ignoreCase = regExp.get$ignoreCase();
  $.checkString(pattern);
  sb = $.StringBuffer_StringBuffer("");
  if (multiLine === true) {
    t1 = sb;
    $.getInterceptor(t1).add$1(t1, "m");
  }
  if (ignoreCase === true) {
    t1 = sb;
    $.getInterceptor(t1).add$1(t1, "i");
  }
  if (global === true) {
    t1 = sb;
    $.getInterceptor(t1).add$1(t1, "g");
  }
  try {
    t1 = pattern;
    t2 = sb;
    t1 = new RegExp(t1, $.getInterceptor(t2).toString$0(t2));
    return t1;
  } catch (exception) {
    t1 = $.unwrapException(exception);
    e = t1;
    throw $.$$throw($.IllegalJSRegExpException$(pattern, String(e)));
  }

};

$.allMatchesInStringUnchecked = function(needle, haystack) {
  var result, length$, patternLength, startIndex, position, endIndex;
  result = $.List_List(null, 'Match');
  $.setRuntimeTypeInfo(result, ['Match']);
  length$ = $.getInterceptor(haystack).get$length(haystack);
  patternLength = needle.length;
  for (startIndex = 0; true;) {
    position = $.getInterceptor(haystack).indexOf$2(haystack, needle, startIndex);
    if ($.eqB(position, -1))
      break;
    $.getInterceptor(result).add$1(result, $.StringMatch$(position, haystack, needle));
    endIndex = $.add(position, patternLength);
    if ($.eqB(endIndex, length$))
      break;
    else
      startIndex = $.eqB(position, endIndex) ? $.add(startIndex, 1) : endIndex;
  }
  return result;
};

$.stringContainsUnchecked = function(receiver, other, startIndex) {
  var substr, t1;
  if (typeof other === 'string')
    return !$.eqB($.getInterceptor(receiver).indexOf$2(receiver, other, startIndex), -1);
  else if (typeof other === 'object' && other !== null && !!other.is$JSSyntaxRegExp)
    return other.hasMatch$1($.getInterceptor(receiver).substring$1(receiver, startIndex));
  else {
    substr = $.getInterceptor(receiver).substring$1(receiver, startIndex);
    t1 = $.getInterceptor(other).allMatches$1(other, substr);
    return $.getInterceptor(t1).iterator$0(t1).get$hasNext();
  }
};

$.stringReplaceJS = function(receiver, replacer, to) {
  return receiver.replace(replacer, to.replace('$', '$$$$'));
};

$.stringReplaceAllUnchecked = function(receiver, from, to) {
  var result, length$, i, t1;
  if (typeof from === 'string')
    if (from === "")
      if (receiver === "")
        return to;
      else {
        result = $.StringBuffer_StringBuffer("");
        length$ = receiver.length;
        $.getInterceptor(result).add$1(result, to);
        for (i = 0; i < length$; ++i) {
          t1 = $.getInterceptor(result);
          if (i >= receiver.length)
            throw $.ioore(i);
          t1.add$1(result, receiver[i]);
          $.getInterceptor(result).add$1(result, to);
        }
        return $.getInterceptor(result).toString$0(result);
      }
    else
      return $.stringReplaceJS(receiver, $.regExpMakeNative($.JSSyntaxRegExp$(from.replace($.regExpMakeNative($.get$quoteRegExp(), true), "\\$&"), false, false), true), to);
  else if (typeof from === 'object' && from !== null && !!from.is$JSSyntaxRegExp)
    return $.stringReplaceJS(receiver, $.regExpMakeNative(from, true), to);
  else {
    $.checkNull(from);
    throw $.$$throw("String.replaceAll(Pattern) UNIMPLEMENTED");
  }
};

$.stringSplitUnchecked = function(receiver, pattern) {
  if (typeof pattern === 'string')
    return receiver.split(pattern);
  else if (typeof pattern === 'object' && pattern !== null && !!pattern.is$JSSyntaxRegExp)
    return receiver.split($.regExpGetNative(pattern));
  else
    throw $.$$throw("String.split(Pattern) UNIMPLEMENTED");
};

$.stringJoinUnchecked = function(array, separator) {
  return array.join(separator);
};

$.ElementEvents$ = function(_ptr) {
  return new $.ElementEvents(_ptr);
};

$.print = function(object) {
  $.Primitives_printString(object);
};

$.Events$ = function(_ptr) {
  return new $.Events(_ptr);
};

$.ComponentType$ = function() {
  var t1 = new $.ComponentType(0, 0);
  t1.ComponentType$0();
  return t1;
};

$.ComponentTypeManager_getTypeFor = function(componentType) {
  var type;
  if (null == $.ComponentTypeManager__componentTypes)
    $.ComponentTypeManager__componentTypes = $.Map_Map('Type', 'ComponentType');
  type = $.index($.ComponentTypeManager__componentTypes, componentType);
  if (type == null) {
    type = $.ComponentType$();
    $.indexSet($.ComponentTypeManager__componentTypes, componentType, type);
  }
  return type;
};

$.getInterceptor = function(object) {
  if (typeof object === 'string')
    return $.CTC0;
  if ($.isJsArray(object))
    return $.CTC1;
  if (typeof object === 'number' && Math.floor(object) === object)
    return $.CTC2;
  if (typeof object === 'number')
    return $.CTC3;
  if (typeof object === 'boolean')
    return $.CTC4;
  if (object == null)
    return $.CTC5;
  if (typeof object === "function")
    return $.CTC6;
  return $.CTC7;
};

$._IsolateContext$ = function() {
  var t1 = new $._IsolateContext(null, null, null);
  t1._IsolateContext$0();
  return t1;
};

$._Manager$ = function() {
  var t1 = new $._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null);
  t1._Manager$0();
  return t1;
};

$._EventLoop$ = function() {
  return new $._EventLoop($.Queue_Queue('_IsolateEvent'));
};

$.JSInvocationMirror$ = function(memberName, _internalName, _kind, _arguments, _namedArgumentNames) {
  return new $.JSInvocationMirror(memberName, _internalName, _kind, _arguments, _namedArgumentNames, null);
};

$.AbstractWorkerEvents$ = function(_ptr) {
  return new $.AbstractWorkerEvents(_ptr);
};

$.MediaStreamEvents$ = function(_ptr) {
  return new $.MediaStreamEvents(_ptr);
};

$.LocalWindow__isDartLocation = function(thing, exception) {
  var t1;
  try {
    t1 = thing;
    t1 = typeof t1 === 'object' && t1 !== null && t1.is$Location();
    return t1;
  } catch (exception) {
    $.unwrapException(exception);
    return false;
  }

};

$.main = function() {
  var gameContainer, hudContainer;
  gameContainer = $.query("#gamecontainer");
  hudContainer = $.query("#hudcontainer");
  $.window().requestLayoutFrame$1(new $.main_anon(hudContainer, gameContainer));
};

$._Timer$ = function(milliSeconds, callback) {
  var t1 = new $._Timer(true, null);
  t1._Timer$2(milliSeconds, callback);
  return t1;
};

$._Timer$repeating = function(milliSeconds, callback) {
  var t1 = new $._Timer(false, null);
  t1._Timer$repeating$2(milliSeconds, callback);
  return t1;
};

$.generateRandomVelocity = function(minSpeed, maxSpeed) {
  var t1, randomNumber, velx;
  t1 = $.get$random().nextDouble$0();
  if (typeof t1 !== 'number')
    throw $.iae(t1);
  randomNumber = minSpeed + maxSpeed * t1;
  velx = randomNumber * ($.get$random().nextBool$0() === true ? 1 : -1);
  t1 = $.get$random().nextDouble$0();
  if (typeof t1 !== 'number')
    throw $.iae(t1);
  randomNumber = minSpeed + maxSpeed * t1;
  return $.Velocity$(velx, randomNumber * ($.get$random().nextBool$0() === true ? 1 : -1));
};

$._LocationWrapper$ = function(_ptr) {
  return new $._LocationWrapper(_ptr);
};

$.AudioContextEvents$ = function(_ptr) {
  return new $.AudioContextEvents(_ptr);
};

$._ExceptionImplementation$ = function(message) {
  return new $._ExceptionImplementation(message);
};

$.window = function() {
  return window;
};

$.Queue_Queue = function(E) {
  return $.DoubleLinkedQueue$(E);
};

$.document = function() {
  return document;
};

$.query = function(selector) {
  return $.document().query$1(selector);
};

$._LocationWrapper__get = function(p, m) {
  return p[m];
};

$.MediaElementEvents$ = function(_ptr) {
  return new $.MediaElementEvents(_ptr);
};

$._IsolateEvent$ = function(isolate, fn, message) {
  return new $._IsolateEvent(isolate, fn, message);
};

$.LocalWindowEvents$ = function(_ptr) {
  return new $.LocalWindowEvents(_ptr);
};

$._MainManagerStub$ = function() {
  return new $._MainManagerStub();
};

$._JsSerializer$ = function() {
  var t1 = new $._JsSerializer(0, $._MessageTraverserVisitedMap$());
  t1._JsSerializer$0();
  return t1;
};

$._browserPrefix = function() {
  if ($._cachedBrowserPrefix == null)
    if ($._Device_isFirefox() === true)
      $._cachedBrowserPrefix = "-moz-";
    else if ($._Device_isIE() === true)
      $._cachedBrowserPrefix = "-ms-";
    else if ($._Device_isOpera() === true)
      $._cachedBrowserPrefix = "-o-";
    else
      $._cachedBrowserPrefix = "-webkit-";
  return $._cachedBrowserPrefix;
};

$._NativeJsSendPort$ = function(_receivePort, isolateId) {
  return new $._NativeJsSendPort(_receivePort, isolateId);
};

$.ElementInstanceEvents$ = function(_ptr) {
  return new $.ElementInstanceEvents(_ptr);
};

$._WorkerSendPort$ = function(_workerId, isolateId, _receivePortId) {
  return new $._WorkerSendPort(_workerId, _receivePortId, isolateId);
};

$.BatteryManagerEvents$ = function(_ptr) {
  return new $.BatteryManagerEvents(_ptr);
};

$._MessageTraverserVisitedMap$ = function() {
  return new $._MessageTraverserVisitedMap();
};

$._JsCopier$ = function() {
  var t1 = new $._JsCopier($._MessageTraverserVisitedMap$());
  t1._JsCopier$0();
  return t1;
};

$.BodyElementEvents$ = function(_ptr) {
  return new $.BodyElementEvents(_ptr);
};

$._JsVisitedMap$ = function() {
  return new $._JsVisitedMap(null);
};

$.Completer_Completer = function(T) {
  return $._CompleterImpl$(T);
};

$._ReceivePortImpl$ = function() {
  var t1 = $._ReceivePortImpl__nextFreeId;
  $._ReceivePortImpl__nextFreeId = $.add(t1, 1);
  t1 = new $._ReceivePortImpl(t1, null);
  t1._ReceivePortImpl$0();
  return t1;
};

$._PendingSendPortFinder$ = function() {
  var t1 = $._MessageTraverserVisitedMap$();
  t1 = new $._PendingSendPortFinder([], t1);
  t1._PendingSendPortFinder$0();
  return t1;
};

$.Futures_wait = function(futures) {
  var t1, completer, result, values, i, future;
  t1 = {};
  if (typeof futures !== 'string' && (typeof futures !== 'object' || futures === null || futures.constructor !== Array && !futures.is$JavaScriptIndexingBehavior()))
    return $.Futures_wait$bailout(1, futures, t1);
  if ($.getInterceptor(futures).get$isEmpty(futures) === true)
    return $.Future_Future$immediate($.CTC16, 'List');
  completer = $.Completer_Completer('List');
  result = completer.get$future();
  t1.remaining_1 = futures.length;
  values = $.List_List(futures.length);
  $.setRuntimeTypeInfo(values, []);
  for (i = 0; i < futures.length; ++i) {
    future = futures[i];
    future.then$1(new $.Futures_wait_anon(result, completer, t1, values, i));
    future.handleException$1(new $.Futures_wait_anon0(result, completer, future));
  }
  return result;
};

$.MediaStreamTrackEvents$ = function(_ptr) {
  return new $.MediaStreamTrackEvents(_ptr);
};

$._CompleterImpl$ = function(T) {
  var t1 = new $._CompleterImpl($._FutureImpl$());
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$.MediaStreamTrackListEvents$ = function(_ptr) {
  return new $.MediaStreamTrackListEvents(_ptr);
};

$._FutureImpl$ = function(T) {
  var t1 = new $._FutureImpl(false, null, null, null, false, false, [], [], []);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._FutureImpl__FutureImpl$immediate = function(value, T) {
  var res = $._FutureImpl$();
  res._setValue$1(value);
  return res;
};

$.MessagePortEvents$ = function(_ptr) {
  return new $.MessagePortEvents(_ptr);
};

$.ImageElement_ImageElement = function(height, src, width) {
  var e = $.document().$$dom_createElement$1("img");
  if (!(src == null))
    e.set$src(src);
  if (!(width == null))
    e.set$width(width);
  if (!(height == null))
    e.set$height(height);
  return e;
};

$.FutureAlreadyCompleteException$ = function() {
  return new $.FutureAlreadyCompleteException();
};

$.FutureUnhandledException$ = function(source, stackTrace) {
  return new $.FutureUnhandledException(source, stackTrace);
};

$._DOMWindowCrossFrame$ = function(_window) {
  return new $._DOMWindowCrossFrame(_window);
};

$._DOMWindowCrossFrame__createSafe = function(w) {
  var t1 = $.window();
  if (w == null ? t1 == null : w === t1)
    return w;
  else
    return $._DOMWindowCrossFrame$(w);
};

$.FutureNotCompleteException$ = function() {
  return new $.FutureNotCompleteException();
};

$._addMeasurementFrameCallback = function(callback) {
  var t1;
  if ($._pendingMeasurementFrameCallbacks == null) {
    $._pendingMeasurementFrameCallbacks = [];
    $._maybeScheduleMeasurementFrame();
  }
  t1 = $._pendingMeasurementFrameCallbacks;
  $.getInterceptor(t1).add$1(t1, callback);
};

$._completeMeasurementFutures = function(exception) {
  var t1, request, t2, e, completedRequests, readyMeasurementFrameCallbacks, t3, t4;
  t1 = $._pendingRequests;
  if (!(t1 == null))
    for (t1 = $.getInterceptor(t1).iterator$0(t1); t1.get$hasNext() === true;) {
      request = t1.next$0();
      try {
        t2 = request.computeValue$0();
        request.set$value(t2);
      } catch (exception) {
        t2 = $.unwrapException(exception);
        e = t2;
        t2 = e;
        request.set$value(t2);
        request.set$exception(true);
      }

    }
  completedRequests = $._pendingRequests;
  readyMeasurementFrameCallbacks = $._pendingMeasurementFrameCallbacks;
  $._pendingRequests = null;
  $._pendingMeasurementFrameCallbacks = null;
  if (!(completedRequests == null))
    for (t1 = $.getInterceptor(completedRequests).iterator$0(completedRequests); t1.get$hasNext() === true;) {
      t2 = t1.next$0();
      t3 = t2.get$exception() === true;
      t4 = t2.get$completer();
      if (t3)
        t4.completeException$1(t2.get$value());
      else
        t4.complete$1(t2.get$value());
    }
  if (!(readyMeasurementFrameCallbacks == null))
    for (t1 = $.getInterceptor(readyMeasurementFrameCallbacks).iterator$0(readyMeasurementFrameCallbacks); t1.get$hasNext() === true;)
      t1.next$0().call$0();
};

$._maybeScheduleMeasurementFrame = function() {
  if ($._measurementScheduler == null)
    $._measurementScheduler = $._MeasurementScheduler__MeasurementScheduler$best($._completeMeasurementFutures);
  $._measurementScheduler.maybeSchedule$0();
};

$._convertDartToNative_PrepareForStructuredClone = function(value) {
  var values, copies, t1, t2, t3, t4, copy;
  values = [];
  copies = [];
  t1 = new $._convertDartToNative_PrepareForStructuredClone_findSlot(copies, values);
  t2 = new $._convertDartToNative_PrepareForStructuredClone_readSlot(copies);
  t3 = new $._convertDartToNative_PrepareForStructuredClone_writeSlot(copies);
  t4 = new $._convertDartToNative_PrepareForStructuredClone_cleanupSlots();
  copy = new $._convertDartToNative_PrepareForStructuredClone_walk(t1, t3, t2).call$1(value);
  t4.call$0();
  return copy;
};

$._JsDeserializer$ = function() {
  return new $._JsDeserializer(null);
};

$._callInIsolate = function(isolate, function$) {
  isolate.eval$1(function$);
  $._globalState().get$topEventLoop().run$0();
};

$._currentIsolate = function() {
  return $._globalState().get$currentContext();
};

$.startRootIsolate = function(entry) {
  var t1, rootContext;
  t1 = $._Manager$();
  $._globalState0(t1);
  if ($._globalState().get$isWorker() === true)
    return;
  rootContext = $._IsolateContext$();
  $._globalState().set$rootContext(rootContext);
  $globals = rootContext.isolateStatics;
  $static_init();
  $._globalState().set$currentContext(rootContext);
  if (!($._window() == null))
    rootContext.eval$1(new $.startRootIsolate_anon());
  rootContext.eval$1(entry);
  $._globalState().get$topEventLoop().run$0();
};

$._globalState = function() {
  return $globalState;
};

$._globalState0 = function(val) {
  $globalState = val;
};

$._waitForPendingPorts = function(message, callback) {
  var finder = $._PendingSendPortFinder$();
  finder.traverse$1(message);
  $.Futures_wait(finder.ports).then$1(new $._waitForPendingPorts_anon(callback));
};

$._serializeMessage = function(message) {
  if ($._globalState().get$needSerialization() === true)
    return $._JsSerializer$().traverse$1(message);
  else
    return $._JsCopier$().traverse$1(message);
};

$._deserializeMessage = function(message) {
  if ($._globalState().get$needSerialization() === true)
    return $._JsDeserializer$().deserialize$1(message);
  else
    return message;
};

$._window = function() {
  return typeof window != "undefined" ? window : null;
};

$._timerFactory = function(millis, callback, repeating) {
  return repeating === true ? $._Timer$repeating(millis, callback) : $._Timer$(millis, callback);
};

$.atan2 = function(a, b) {
  return Math.atan2($.checkNum(a), $.checkNum(b));
};

$.sin = function(x) {
  return Math.sin($.checkNum(x));
};

$.cos = function(x) {
  return Math.cos($.checkNum(x));
};

$.NotificationEvents$ = function(_ptr) {
  return new $.NotificationEvents(_ptr);
};

$.DoubleLinkedQueue$ = function(E) {
  var t1 = new $.DoubleLinkedQueue(null);
  $.setRuntimeTypeInfo(t1, [E]);
  t1.DoubleLinkedQueue$0();
  return t1;
};

$.sqrt = function(x) {
  return Math.sqrt($.checkNum(x));
};

$._DoubleLinkedQueueIterator$ = function(_sentinel, E) {
  var t1 = new $._DoubleLinkedQueueIterator(_sentinel, null);
  $.setRuntimeTypeInfo(t1, [E]);
  t1._DoubleLinkedQueueIterator$1(_sentinel);
  return t1;
};

$._DoubleLinkedQueueEntrySentinel$ = function(E) {
  var t1 = new $._DoubleLinkedQueueEntrySentinel(null, null, null);
  $.setRuntimeTypeInfo(t1, [E]);
  t1.DoubleLinkedQueueEntry$1(null);
  t1._DoubleLinkedQueueEntrySentinel$0();
  return t1;
};

$.DoubleLinkedQueueEntry$ = function(e, E) {
  var t1 = new $.DoubleLinkedQueueEntry(null, null, null);
  $.setRuntimeTypeInfo(t1, [E]);
  t1.DoubleLinkedQueueEntry$1(e);
  return t1;
};

$.PeerConnection00Events$ = function(_ptr) {
  return new $.PeerConnection00Events(_ptr);
};

$.HttpRequest_HttpRequest = function() {
  return new XMLHttpRequest();
};

$.TypeImpl$ = function(typeName) {
  return new $.TypeImpl(typeName);
};

$.RTCDataChannelEvents$ = function(_ptr) {
  return new $.RTCDataChannelEvents(_ptr);
};

$.RTCPeerConnectionEvents$ = function(_ptr) {
  return new $.RTCPeerConnectionEvents(_ptr);
};

$._SystemBitManager__getBitFor = function(esType) {
  var bit, t1;
  if (null == $._SystemBitManager__systemBits)
    $._SystemBitManager__systemBits = $.Map_Map('Type', '$int');
  bit = $.index($._SystemBitManager__systemBits, esType);
  if (bit == null) {
    t1 = $._SystemBitManager__POS;
    if (typeof t1 !== 'number')
      throw $.iae(t1);
    bit = $.shl(1, t1);
    $._SystemBitManager__POS = $.add($._SystemBitManager__POS, 1);
    $.indexSet($._SystemBitManager__systemBits, esType, bit);
  }
  return bit;
};

$._IdentifierPool$ = function() {
  return new $._IdentifierPool($.Bag$(16, '$int'), 0);
};

$.AudioClip$_internal = function(_manager, _name, _url) {
  return new $.AudioClip(_manager, _name, _url, null, false, "", false);
};

$.List_List = function(length$, E) {
  return $.Primitives_newList(length$);
};

$.AudioSource$_internal = function(_manager, _name, _output) {
  var t1 = new $.AudioSource(_manager, _name, _output, null, null, null, null, false, 0, 0, 0, true);
  t1.AudioSource$_internal$3(_manager, _name, _output);
  return t1;
};

$.World$ = function() {
  var t1 = new $.World($.EntityManager$(), $.ComponentManager$(), $.Bag$(16, 'Entity'), $.Bag$(16, 'Entity'), $.Bag$(16, 'Entity'), $.Bag$(16, 'Entity'), $.Bag$(16, 'Entity'), $.Map_Map('Type', 'EntitySystem'), $.Bag$(16, 'EntitySystem'), $.Map_Map('Type', 'Manager'), $.Bag$(16, 'Manager'), null);
  t1.World$0();
  return t1;
};

$.Map_Map = function(K, V) {
  return $._HashMapImpl$(K, V);
};

$.AudioMusic$_internal = function(_manager, output) {
  var t1 = new $.AudioMusic(_manager, null, null, null);
  t1.AudioMusic$_internal$2(_manager, output);
  return t1;
};

$.Game$ = function(gameCanvas, hudCanvas) {
  var t1 = new $.Game(gameCanvas, hudCanvas, null, null, 0, null);
  t1.Game$2(gameCanvas, hudCanvas);
  return t1;
};

$.AudioManager$ = function() {
  var t1 = new $.AudioManager(null, null, null, null, null, null, "", $.Map_Map('String', 'AudioClip'), $.Map_Map('String', 'AudioSource'), null, null, false, false);
  t1.AudioManager$0();
  return t1;
};

$.ScriptProcessorNodeEvents$ = function(_ptr) {
  return new $.ScriptProcessorNodeEvents(_ptr);
};

$.SharedWorkerContextEvents$ = function(_ptr) {
  return new $.SharedWorkerContextEvents(_ptr);
};

$.AudioManagerDummy$ = function() {
  return new $.AudioManagerDummy();
};

$.ListIterator$ = function(list, T) {
  var t1 = new $.ListIterator(0, list);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$.UnsupportedError$ = function(message) {
  return new $.UnsupportedError(message);
};

$.Error_safeToString = function(object) {
  var t1;
  if (typeof object === 'number' && Math.floor(object) === object || typeof object === 'number' || typeof object === 'boolean' || null == object)
    return $.getInterceptor(object).toString$0(object);
  if (typeof object === 'string') {
    t1 = $.getInterceptor(object).replaceAll$2(object, "\\", "\\\\");
    t1 = $.getInterceptor(t1).replaceAll$2(t1, "\n", "\\n");
    t1 = $.getInterceptor(t1).replaceAll$2(t1, "\r", "\\r");
    return "\"" + $.S($.getInterceptor(t1).replaceAll$2(t1, "\"", "\\\"")) + "\"";
  }
  return $.Primitives_objectToString(object);
};

$.UnimplementedError$ = function(message) {
  return new $.UnimplementedError(message);
};

$.SpeechRecognitionEvents$ = function(_ptr) {
  return new $.SpeechRecognitionEvents(_ptr);
};

$.DivElement_DivElement = function() {
  return $.document().$$dom_createElement$1("div");
};

$.RegExp_RegExp = function(pattern, ignoreCase, multiLine) {
  return $.JSSyntaxRegExp$(pattern, ignoreCase, multiLine);
};

$._Collections_contains = function(iterable, element) {
  var t1;
  for (t1 = $.getInterceptor(iterable).iterator$0(iterable); t1.get$hasNext() === true;)
    if ($.eqB(t1.next$0(), element))
      return true;
  return false;
};

$._LocationCrossFrame$ = function(_location) {
  return new $._LocationCrossFrame(_location);
};

$._LocationCrossFrame__createSafe = function(location$) {
  var t1 = $.window().get$location();
  if (location$ == null ? t1 == null : location$ === t1)
    return location$;
  else
    return $._LocationCrossFrame$(location$);
};

$.FixedSizeListIterator$ = function(array, T) {
  var t1 = new $.FixedSizeListIterator($.getInterceptor(array).get$length(array), array, 0);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$.StateError$ = function(message) {
  return new $.StateError(message);
};

$.Collections_forEach = function(iterable, f) {
  var t1;
  for (t1 = $.getInterceptor(iterable).iterator$0(iterable); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
};

$.Collections_collectionToString = function(c) {
  var result, t1;
  result = $.StringBuffer_StringBuffer("");
  t1 = $.List_List(null);
  $.setRuntimeTypeInfo(t1, []);
  $.Collections__emitCollection(c, result, t1);
  return $.getInterceptor(result).toString$0(result);
};

$.Collections__emitCollection = function(c, result, visiting) {
  var isList, t1, first, t2;
  $.getInterceptor(visiting).add$1(visiting, c);
  isList = typeof c === 'object' && c !== null && (c.constructor === Array || c.is$List());
  t1 = $.getInterceptor(result);
  t1.add$1(result, isList ? "[" : "{");
  for (t1 = $.getInterceptor(c).iterator$0(c), first = true; t1.get$hasNext() === true; first = false) {
    t2 = t1.next$0();
    if (!first)
      $.getInterceptor(result).add$1(result, ", ");
    $.Collections__emitObject(t2, result, visiting);
  }
  t1 = $.getInterceptor(result);
  t1.add$1(result, isList ? "]" : "}");
  $.getInterceptor(visiting).removeLast$0(visiting);
};

$.Collections__emitObject = function(o, result, visiting) {
  var t1;
  if (typeof o === 'object' && o !== null && (o.constructor === Array || o.is$Collection()))
    if ($.Collections__containsRef(visiting, o)) {
      t1 = $.getInterceptor(result);
      t1.add$1(result, typeof o === 'object' && o !== null && (o.constructor === Array || o.is$List()) ? "[...]" : "{...}");
    } else
      $.Collections__emitCollection(o, result, visiting);
  else if (typeof o === 'object' && o !== null && o.is$Map())
    if ($.Collections__containsRef(visiting, o))
      $.getInterceptor(result).add$1(result, "{...}");
    else
      $.Maps__emitMap(o, result, visiting);
  else
    $.getInterceptor(result).add$1(result, o);
};

$.Collections__containsRef = function(c, ref) {
  var t1, t2;
  for (t1 = $.getInterceptor(c).iterator$0(c); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    if (t2 == null ? ref == null : t2 === ref)
      return true;
  }
  return false;
};

$._AudioContextFactoryProvider_createAudioContext = function() {
  return new (window.AudioContext || window.webkitAudioContext)();
};

$.NoSuchMethodError$ = function(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames) {
  return new $.NoSuchMethodError(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames);
};

$.TextTrackEvents$ = function(_ptr) {
  return new $.TextTrackEvents(_ptr);
};

$._MeasurementScheduler__MeasurementScheduler$best = function(callback) {
  if (!!(window.MutationObserver || window.WebKitMutationObserver))
    return $._MutationObserverScheduler$(callback);
  return $._PostMessageScheduler$(callback);
};

$.TextTrackCueEvents$ = function(_ptr) {
  return new $.TextTrackCueEvents(_ptr);
};

$.MetaInfo$ = function(_tag, _tags, _set) {
  return new $.MetaInfo(_tag, _tags, _set);
};

$._MutationObserverScheduler$ = function(callback) {
  var t1 = new $._MutationObserverScheduler(null, null, false, callback);
  t1._MutationObserverScheduler$1(callback);
  return t1;
};

$._PostMessageScheduler$ = function(callback) {
  var t1 = new $._PostMessageScheduler("DART-MEASURE", false, callback);
  t1._PostMessageScheduler$1(callback);
  return t1;
};

$.ArgumentError$ = function(message) {
  return new $.ArgumentError(message);
};

$.EventListenerList$ = function(_ptr, _type) {
  return new $.EventListenerList(_ptr, _type);
};

$.TextTrackListEvents$ = function(_ptr) {
  return new $.TextTrackListEvents(_ptr);
};

$.RuntimeError$ = function(message) {
  return new $.RuntimeError(message);
};

$.DOMApplicationCacheEvents$ = function(_ptr) {
  return new $.DOMApplicationCacheEvents(_ptr);
};

$.Primitives_objectHashCode = function(object) {
  var hash = object.$identityHash;
  if (hash == null) {
    hash = $.add($.Primitives_hashCodeSeed, 1);
    $.Primitives_hashCodeSeed = hash;
    object.$identityHash = hash;
  }
  return hash;
};

$.Primitives_printString = function(string) {
  if ("\nThis program is using an experimental feature called \"mirrors\".  As\ncurrently implemented, mirrors do not work with minification, and will\ncause spurious errors depending on how code was optimized.\n\nThe authors of this program are aware of these problems and have\ndecided the thrill of using an experimental feature is outweighing the\nrisks.  Furthermore, the authors of this program understand that\nlong-term, to fix the problems mentioned above, mirrors may have\nnegative impact on size and performance of Dart programs compiled to\nJavaScript.\n" === string)
    $.Primitives_mirrorsEnabled = true;
  else if (typeof dartPrint == "function") {
    dartPrint(string);
    return;
  }
  if (typeof window == "object") {
    if (typeof console == "object")
      console.log(string);
    return;
  }
  if (typeof print == "function") {
    print(string);
    return;
  }
  throw 'Unable to print message: ' + String(string);
};

$.Primitives_objectTypeName = function(object) {
  var name$, decompiled;
  name$ = $.constructorNameFallback(object);
  if ($.eqB(name$, "Object")) {
    decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === 'string')
      name$ = decompiled;
  }
  return $.getInterceptor(name$).charCodeAt$1(name$, 0) === 36 ? $.getInterceptor(name$).substring$1(name$, 1) : name$;
};

$.Primitives_objectToString = function(object) {
  return "Instance of '" + $.S($.Primitives_objectTypeName(object)) + "'";
};

$.Primitives_newList = function(length$) {
  var result;
  if (length$ == null)
    return new Array();
  if (!(typeof length$ === 'number' && Math.floor(length$) === length$) || length$ < 0)
    throw $.$$throw($.ArgumentError$(length$));
  result = new Array(length$);
  result.fixed$length = true;
  return result;
};

$.RangeError$value = function(value) {
  return new $.RangeError("value " + $.S(value));
};

$.Maps_mapToString = function(m) {
  var result, t1;
  result = $.StringBuffer_StringBuffer("");
  t1 = $.List_List(null);
  $.setRuntimeTypeInfo(t1, []);
  $.Maps__emitMap(m, result, t1);
  return $.getInterceptor(result).toString$0(result);
};

$.Maps__emitMap = function(m, result, visiting) {
  var t1 = {};
  $.getInterceptor(visiting).add$1(visiting, m);
  $.getInterceptor(result).add$1(result, "{");
  t1.first_1 = true;
  $.getInterceptor(m).forEach$1(m, new $.Maps__emitMap_anon(t1, visiting, result));
  $.getInterceptor(result).add$1(result, "}");
  $.getInterceptor(visiting).removeLast$0(visiting);
};

$.StringBuffer_StringBuffer = function(content$) {
  return $._StringBufferImpl$(content$);
};

$.StackOverflowError$ = function() {
  return new $.StackOverflowError();
};

$._StringBufferImpl$ = function(content$) {
  var t1 = new $._StringBufferImpl(null, null);
  t1._StringBufferImpl$1(content$);
  return t1;
};

$.LinkedHashMap_LinkedHashMap = function(K, V) {
  return $._LinkedHashMapImpl$(K, V);
};

$.Strings__toJsStringArray = function(strings) {
  var length$, i, string, array;
  if (typeof strings !== 'string' && (typeof strings !== 'object' || strings === null || strings.constructor !== Array && !strings.is$JavaScriptIndexingBehavior()))
    return $.Strings__toJsStringArray$bailout(1, strings);
  $.checkNull(strings);
  length$ = strings.length;
  if ($.isJsArray(strings)) {
    for (i = 0; i < length$; ++i) {
      if (i >= strings.length)
        throw $.ioore(i);
      string = strings[i];
      if (!(typeof string === 'string'))
        throw $.$$throw($.ArgumentError$(string));
    }
    array = strings;
  } else {
    array = $.List_List(length$);
    for (i = 0; i < length$; ++i) {
      if (i >= strings.length)
        throw $.ioore(i);
      string = strings[i];
      if (!(typeof string === 'string'))
        throw $.$$throw($.ArgumentError$(string));
      array[i] = string;
    }
  }
  return array;
};

$._LinkedHashMapImpl$ = function(K, V) {
  var t1 = new $._LinkedHashMapImpl(null, null);
  $.setRuntimeTypeInfo(t1, [K, V]);
  t1._LinkedHashMapImpl$0();
  return t1;
};

$._KeyValuePair$ = function(key, value, K, V) {
  var t1 = new $._KeyValuePair(key, value);
  $.setRuntimeTypeInfo(t1, [K, V]);
  return t1;
};

$.CanvasElement_CanvasElement = function(height, width) {
  var e = $.document().$$dom_createElement$1("canvas");
  if (!(width == null))
    e.set$width(width);
  if (!(height == null))
    e.set$height(height);
  return e;
};

$.JSSyntaxRegExp$ = function(pattern, ignoreCase, multiLine) {
  return new $.JSSyntaxRegExp(pattern, multiLine, ignoreCase);
};

$.StackTrace$ = function(stack) {
  return new $.StackTrace(stack);
};

$.JSSyntaxRegExp__globalVersionOf = function(other) {
  var t1, t2, re;
  t1 = other.get$pattern();
  t2 = other.get$multiLine();
  re = $.JSSyntaxRegExp$(t1, other.get$ignoreCase(), t2);
  re._re = $.regExpMakeNative(re, true);
  return re;
};

$.IllegalJSRegExpException$ = function(_pattern, _errmsg) {
  return new $.IllegalJSRegExpException(_pattern, _errmsg);
};

$.Exception_Exception = function(message) {
  return $._ExceptionImplementation$(message);
};

$._MutationObserverFactoryProvider_createMutationObserver = function(callback) {
  callback = $.convertDartClosureToJS(callback, 2);
    var constructor =
        window.MutationObserver || window.WebKitMutationObserver ||
        window.MozMutationObserver;
    return new constructor(callback);
  
};

$.DedicatedWorkerContextEvents$ = function(_ptr) {
  return new $.DedicatedWorkerContextEvents(_ptr);
};

$.WorkerContextEvents$ = function(_ptr) {
  return new $.WorkerContextEvents(_ptr);
};

$.EntityManager$ = function() {
  return new $.EntityManager($.Bag$(16, 'Entity'), $.Bag$(16, 'bool'), 0, 0, 0, 0, $._IdentifierPool$(), null);
};

$.ComponentManager$ = function() {
  return new $.ComponentManager($.Bag$(16, 'Bag<Component>'), $.Bag$(16, 'Entity'), null);
};

$.Bag$ = function(capacity, E) {
  var t1 = new $.Bag(null, 0);
  $.setRuntimeTypeInfo(t1, [E]);
  t1.Bag$1$capacity(capacity);
  return t1;
};

$.Entity$ = function(_world, id) {
  var t1 = new $.Entity(id, 0, 0, 0, _world, null, null);
  t1.Entity$2(_world, id);
  return t1;
};

$.GroupManager$ = function() {
  return new $.GroupManager($.Map_Map('String', 'Bag<Entity>'), $.Map_Map('Entity', 'Bag<String>'), null);
};

$.DocumentEvents$ = function(_ptr) {
  return new $.DocumentEvents(_ptr);
};

$.TagManager$ = function() {
  return new $.TagManager($.Map_Map('String', 'Entity'), $.Map_Map('Entity', 'String'), null);
};

$.Transform$hack = function() {
  return new $.Transform(null, null, null, null);
};

$.Transform$ = function(x, y, angle, rotationRate) {
  return new $.Transform($.mod(x, 1600), $.mod(y, 1600), angle, rotationRate);
};

$.Velocity$hack = function() {
  return new $.Velocity(null, null);
};

$.Velocity$ = function(x, y) {
  return new $.Velocity(x, y);
};

$.Spatial$hack = function() {
  return new $.Spatial(null, null, null, null, null, null, null);
};

$.Spatial$ = function(resource, scale) {
  var t1 = new $.Spatial(resource, null, null, null, null, null, scale);
  t1.Spatial$2$scale(resource, scale);
  return t1;
};

$.Spatial$asSprite = function(resource, x, y, width, height, scale) {
  var t1 = new $.Spatial(resource, null, width, height, x, y, scale);
  t1.Spatial$asSprite$6$scale(resource, x, y, width, height, scale);
  return t1;
};

$.CircularBody$hack = function() {
  return new $.CircularBody(null);
};

$.CircularBody$ = function(radius) {
  return new $.CircularBody(radius);
};

$.Mass$hack = function() {
  return new $.Mass(null);
};

$.Mass$ = function(value) {
  return new $.Mass(value);
};

$.Status$ = function(maxHealth, maxVelocity) {
  var t1 = new $.Status(null, maxHealth, maxVelocity, false);
  t1.Status$2$maxHealth$maxVelocity(maxHealth, maxVelocity);
  return t1;
};

$.Status$hack = function() {
  return new $.Status(null, null, null, false);
};

$.MiniMapRenderable$hack = function() {
  return new $.MiniMapRenderable(null);
};

$.MiniMapRenderable$ = function(color) {
  return new $.MiniMapRenderable(color);
};

$.Cannon$hack = function() {
  return new $.Cannon(false, 0, 0, null, null);
};

$.Cannon$ = function(bulletMass, bulletSpeed, cooldownTime) {
  return new $.Cannon(false, 0, cooldownTime, bulletSpeed, bulletMass);
};

$.CameraPosition$hack = function() {
  return new $.CameraPosition(null, null, null, null);
};

$.CameraPosition$ = function(x, y) {
  return new $.CameraPosition($.mod(x, 1600), $.mod(y, 1600), 0, 0);
};

$.Background$hack = function() {
  return new $.Background();
};

$.Background$ = function() {
  return new $.Background();
};

$.Upgrade$hack = function() {
  return new $.Upgrade();
};

$.Upgrade$ = function() {
  return new $.Upgrade();
};

$.EventSourceEvents$ = function(_ptr) {
  return new $.EventSourceEvents(_ptr);
};

$.PlayerControlSystem$ = function(canvas) {
  var t1, t2;
  t1 = $.Aspect_getEmpty();
  t2 = new $.PlayerControlSystem(87, 83, 65, 68, 74, false, false, false, false, false, 0, 0, null, null, null, null, canvas, null, null, 0, null, $.Bag$(16, 'Entity'), t1.get$all(), t1.get$excluded(), t1.get$one(), null, null);
  t2.EntitySystem$1(t1);
  return t2;
};

$.ComponentMapper$ = function(componentType, world, A) {
  var t1 = new $.ComponentMapper(null, null);
  $.setRuntimeTypeInfo(t1, [A]);
  t1.ComponentMapper$2(componentType, world);
  return t1;
};

$.Aspect_getAspectForAllOf = function(requiredComponentType, componentTypes) {
  var aspect = $.Aspect$();
  aspect.allOf$2(requiredComponentType, componentTypes);
  return aspect;
};

$.Aspect_getEmpty = function() {
  return $.Aspect$();
};

$.Aspect$ = function() {
  return new $.Aspect(0, 0, 0);
};

$.MovementSystem$ = function() {
  var t1, t2, t3;
  t1 = $.Transform$hack();
  t1 = $.getInterceptor(t1).get$runtimeType(t1);
  t2 = $.Velocity$hack();
  t1 = $.Aspect_getAspectForAllOf(t1, [$.getInterceptor(t2).get$runtimeType(t2)]);
  t3 = new $.MovementSystem(null, null, 0, null, $.Bag$(16, 'Entity'), t1.get$all(), t1.get$excluded(), t1.get$one(), null, null);
  t3.EntitySystem$1(t1);
  return t3;
};

$.FileReaderEvents$ = function(_ptr) {
  return new $.FileReaderEvents(_ptr);
};

$.UpgradeCollectionSystem$ = function() {
  var t1, t2, t3, t4, t5;
  t1 = $.Upgrade$hack();
  t1 = $.getInterceptor(t1).get$runtimeType(t1);
  t2 = $.Transform$hack();
  t2 = $.getInterceptor(t2).get$runtimeType(t2);
  t3 = $.CircularBody$hack();
  t1 = $.Aspect_getAspectForAllOf(t1, [t2, $.getInterceptor(t3).get$runtimeType(t3)]);
  t4 = $.Transform$hack();
  t1 = t1.allOf$1($.getInterceptor(t4).get$runtimeType(t4));
  t5 = new $.UpgradeCollectionSystem(null, null, null, null, null, null, null, null, 0, null, $.Bag$(16, 'Entity'), t1.get$all(), t1.get$excluded(), t1.get$one(), null, null);
  t5.EntitySystem$1(t1);
  return t5;
};

$.FileWriterEvents$ = function(_ptr) {
  return new $.FileWriterEvents(_ptr);
};

$.CircularCollisionDetectionSystem$ = function() {
  var t1, t2, t3, t4, t5, t6;
  t1 = $.CircularBody$hack();
  t1 = $.getInterceptor(t1).get$runtimeType(t1);
  t2 = $.Transform$hack();
  t2 = $.getInterceptor(t2).get$runtimeType(t2);
  t3 = $.Velocity$hack();
  t3 = $.getInterceptor(t3).get$runtimeType(t3);
  t4 = $.Mass$hack();
  t1 = $.Aspect_getAspectForAllOf(t1, [t2, t3, $.getInterceptor(t4).get$runtimeType(t4)]);
  t5 = $.Transform$hack();
  t1 = t1.allOf$1($.getInterceptor(t5).get$runtimeType(t5));
  t6 = new $.CircularCollisionDetectionSystem(null, null, null, null, null, null, null, null, 0, null, $.Bag$(16, 'Entity'), t1.get$all(), t1.get$excluded(), t1.get$one(), null, null);
  t6.EntitySystem$1(t1);
  return t6;
};

$.BulletSpawningSystem$ = function(audioManager) {
  var t1, t2, t3, t4, t5;
  t1 = $.Cannon$hack();
  t1 = $.getInterceptor(t1).get$runtimeType(t1);
  t2 = $.Transform$hack();
  t2 = $.getInterceptor(t2).get$runtimeType(t2);
  t3 = $.Velocity$hack();
  t3 = $.getInterceptor(t3).get$runtimeType(t3);
  t4 = $.Mass$hack();
  t1 = $.Aspect_getAspectForAllOf(t1, [t2, t3, $.getInterceptor(t4).get$runtimeType(t4)]);
  t5 = new $.BulletSpawningSystem(audioManager, null, null, null, null, 0, null, $.Bag$(16, 'Entity'), t1.get$all(), t1.get$excluded(), t1.get$one(), null, null);
  t5.EntitySystem$1(t1);
  return t5;
};

$.PlayerDestructionSystem$ = function() {
  var t1, t2;
  t1 = $.Aspect_getEmpty();
  t2 = new $.PlayerDestructionSystem(null, null, null, null, 0, null, $.Bag$(16, 'Entity'), t1.get$all(), t1.get$excluded(), t1.get$one(), null, null);
  t2.EntitySystem$1(t1);
  return t2;
};

$.CameraSystem$ = function() {
  var t1, t2;
  t1 = $.Aspect_getEmpty();
  t2 = new $.CameraSystem(null, null, null, 0, null, $.Bag$(16, 'Entity'), t1.get$all(), t1.get$excluded(), t1.get$one(), null, null);
  t2.EntitySystem$1(t1);
  return t2;
};

$.ExpirationSystem$ = function() {
  var t1, t2, t3;
  t1 = $.ExpirationTimer$hack();
  t2 = $.Aspect_getAspectForAllOf($.getInterceptor(t1).get$runtimeType(t1), null);
  t3 = new $.ExpirationSystem(null, 0, null, $.Bag$(16, 'Entity'), t2.get$all(), t2.get$excluded(), t2.get$one(), null, null);
  t3.EntitySystem$1(t2);
  return t3;
};

$.ExpirationTimer$hack = function() {
  return new $.ExpirationTimer(0, null);
};

$.ExpirationTimer$ = function(maxTime) {
  var t1 = new $.ExpirationTimer(maxTime, null);
  t1.ExpirationTimer$1(maxTime);
  return t1;
};

$.BackgroundRenderSystem$ = function(context2d) {
  var t1 = $.Aspect_getEmpty();
  context2d = new $.BackgroundRenderSystem(50, 50, null, context2d, null, null, 0, null, $.Bag$(16, 'Entity'), t1.get$all(), t1.get$excluded(), t1.get$one(), null, null);
  context2d.EntitySystem$1(t1);
  return context2d;
};

$.WebSocketEvents$ = function(_ptr) {
  return new $.WebSocketEvents(_ptr);
};

$.SpatialRenderingSystem$ = function(context2d) {
  var t1, t2, t3, t4;
  t1 = $.Spatial$hack();
  t1 = $.getInterceptor(t1).get$runtimeType(t1);
  t2 = $.Transform$hack();
  t1 = $.Aspect_getAspectForAllOf(t1, [$.getInterceptor(t2).get$runtimeType(t2)]);
  t3 = $.Background$hack();
  t1 = t1.exclude$1($.getInterceptor(t3).get$runtimeType(t3));
  t4 = $.Transform$hack();
  t1 = t1.allOf$1($.getInterceptor(t4).get$runtimeType(t4));
  context2d = new $.SpatialRenderingSystem(context2d, null, null, null, null, null, null, 0, null, $.Bag$(16, 'Entity'), t1.get$all(), t1.get$excluded(), t1.get$one(), null, null);
  context2d.EntitySystem$1(t1);
  return context2d;
};

$.MiniMapRenderSystem$ = function(context2d) {
  var t1, t2, t3;
  t1 = $.MiniMapRenderable$hack();
  t1 = $.getInterceptor(t1).get$runtimeType(t1);
  t2 = $.Transform$hack();
  t2 = $.getInterceptor(t2).get$runtimeType(t2);
  t3 = $.CircularBody$hack();
  t1 = $.Aspect_getAspectForAllOf(t1, [t2, $.getInterceptor(t3).get$runtimeType(t3)]);
  context2d = new $.MiniMapRenderSystem(context2d, null, null, null, 0, null, $.Bag$(16, 'Entity'), t1.get$all(), t1.get$excluded(), t1.get$one(), null, null);
  context2d.EntitySystem$1(t1);
  return context2d;
};

$.HudRenderSystem$ = function(context2d) {
  var t1 = $.Aspect_getEmpty();
  context2d = new $.HudRenderSystem(context2d, null, null, 0, null, $.Bag$(16, 'Entity'), t1.get$all(), t1.get$excluded(), t1.get$one(), null, null);
  context2d.EntitySystem$1(t1);
  return context2d;
};

$.Random_Random = function(seed) {
  return $.CTC14;
};

$.WorkerEvents$ = function(_ptr) {
  return new $.WorkerEvents(_ptr);
};

$.DebugSystem$ = function() {
  var t1, t2, t3, t4, t5;
  t1 = $.query("#fps");
  t2 = $.query("#playerPos");
  t3 = $.query("#cameraPos");
  t4 = $.query("#entityCount");
  t5 = $.Aspect_getEmpty();
  t4 = new $.DebugSystem(t1, t2, t3, t4, null, null, null, 0, null, $.Bag$(16, 'Entity'), t5.get$all(), t5.get$excluded(), t5.get$one(), null, null);
  t4.EntitySystem$1(t5);
  return t4;
};

$.FrameSetElementEvents$ = function(_ptr) {
  return new $.FrameSetElementEvents(_ptr);
};

$.TrigUtil_cos = function(rad) {
  var t1 = $.mul(rad, 651.8986469044033);
  return $.TrigUtil__cos($.and($.getInterceptor(t1).toInt$0(t1), 4095));
};

$.TrigUtil_sin = function(rad) {
  var t1 = $.mul(rad, 651.8986469044033);
  return $.TrigUtil__sin($.and($.getInterceptor(t1).toInt$0(t1), 4095));
};

$.TrigUtil__sin = function(index) {
  if (null == $.TrigUtil__sinLookUpTable)
    $.TrigUtil__sinLookUpTable = $.TrigUtil__createLookUpTable($.sin);
  return $.index($.TrigUtil__sinLookUpTable, index);
};

$.TrigUtil__cos = function(index) {
  if (null == $.TrigUtil__cosLookUpTable)
    $.TrigUtil__cosLookUpTable = $.TrigUtil__createLookUpTable($.cos);
  return $.index($.TrigUtil__cosLookUpTable, index);
};

$.TrigUtil__createLookUpTable = function(f) {
  var lookUpTable, i, t1;
  lookUpTable = $.List_List(4096, 'num');
  $.setRuntimeTypeInfo(lookUpTable, ['num']);
  for (i = 0; i < 4096; ++i) {
    t1 = f.call$1((i + 0.5) / 4096 * 6.283185307179586);
    if (i >= lookUpTable.length)
      throw $.ioore(i);
    lookUpTable[i] = t1;
  }
  return lookUpTable;
};

$.FormatException$ = function(message) {
  return new $.FormatException(message);
};

$._Device_userAgent = function() {
  return $.window().get$navigator().get$userAgent();
};

$._Device_isOpera = function() {
  var t1 = $._Device_userAgent();
  return $.getInterceptor(t1).contains$2(t1, "Opera", 0);
};

$._Device_isIE = function() {
  var t1, t2;
  if ($._Device_isOpera() !== true) {
    t1 = $._Device_userAgent();
    t2 = $.getInterceptor(t1).contains$2(t1, "MSIE", 0) === true;
    t1 = t2;
  } else
    t1 = false;
  return t1;
};

$._Device_isFirefox = function() {
  var t1 = $._Device_userAgent();
  return $.getInterceptor(t1).contains$2(t1, "Firefox", 0);
};

$.StringMatch$ = function(start, str, pattern) {
  return new $.StringMatch(start, str, pattern);
};

$._AllMatchesIterable$ = function(_re, _str) {
  return new $._AllMatchesIterable(_re, _str);
};

$._AllMatchesIterator$ = function(re, _str) {
  return new $._AllMatchesIterator($.JSSyntaxRegExp__globalVersionOf(re), _str, null, false);
};

$._MatchImplementation$ = function(pattern, str, start, end, _groups) {
  return new $._MatchImplementation(pattern, str, start, end, _groups);
};

$.HttpRequestEvents$ = function(_ptr) {
  return new $.HttpRequestEvents(_ptr);
};

$._Lists_indexOf = function(a, element, startIndex, endIndex) {
  var i;
  if (typeof a !== 'string' && (typeof a !== 'object' || a === null || a.constructor !== Array && !a.is$JavaScriptIndexingBehavior()))
    return $._Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (typeof startIndex !== 'number')
    return $._Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (typeof endIndex !== 'number')
    return $._Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (i = startIndex; i < endIndex; ++i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.eqB(a[i], element))
      return i;
  }
  return -1;
};

$._Lists_lastIndexOf = function(a, element, startIndex) {
  var t1, i;
  if (typeof a !== 'string' && (typeof a !== 'object' || a === null || a.constructor !== Array && !a.is$JavaScriptIndexingBehavior()))
    return $._Lists_lastIndexOf$bailout(1, a, element, startIndex);
  if (typeof startIndex !== 'number')
    return $._Lists_lastIndexOf$bailout(1, a, element, startIndex);
  if (startIndex < 0)
    return -1;
  t1 = a.length;
  if (startIndex >= t1)
    startIndex = t1 - 1;
  for (i = startIndex; i >= 0; --i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.eqB(a[i], element))
      return i;
  }
  return -1;
};

$.Arrays_copy = function(src, srcStart, dst, dstStart, count) {
  var i, j, t1, t2, t3;
  if (srcStart < dstStart)
    for (i = srcStart + count - 1, j = dstStart + count - 1, t1 = src.length, t2 = dst.length; i >= srcStart; --i, --j) {
      if (i < 0 || i >= t1)
        throw $.ioore(i);
      t3 = src[i];
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
    }
  else
    for (t1 = src.length, t2 = dst.length, j = dstStart, i = srcStart; i < srcStart + count; ++i, ++j) {
      if (i < 0 || i >= t1)
        throw $.ioore(i);
      t3 = src[i];
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
    }
};

$.HttpRequestUploadEvents$ = function(_ptr) {
  return new $.HttpRequestUploadEvents(_ptr);
};

$.Arrays_indexOf = function(a, element, startIndex, endIndex) {
  var i;
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (i = startIndex; i < endIndex; ++i) {
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.eqB(a[i], element))
      return i;
  }
  return -1;
};

$.Arrays_lastIndexOf = function(a, element, startIndex) {
  var t1, i;
  if (startIndex !== (startIndex | 0))
    return $.Arrays_lastIndexOf$bailout(1, a, element, startIndex);
  if (startIndex < 0)
    return -1;
  t1 = a.length;
  if (startIndex >= t1)
    startIndex = t1 - 1;
  for (i = startIndex; i >= 0; --i) {
    if (i >= a.length)
      throw $.ioore(i);
    if ($.eqB(a[i], element))
      return i;
  }
  return -1;
};

$.IDBDatabaseEvents$ = function(_ptr) {
  return new $.IDBDatabaseEvents(_ptr);
};

$.ImageCache_withImage = function(imageName, action) {
  var t1, t2;
  t1 = {};
  t1.image_1 = $.index($.get$ImageCache_loadedImages(), imageName);
  t2 = t1.image_1;
  if (null == t2) {
    t1.image_1 = $.ImageElement_ImageElement(null, null, null);
    t2 = t1.image_1.get$on().get$load();
    $.getInterceptor(t2).add$1(t2, new $.ImageCache_withImage_anon(t1, action, imageName));
    t2 = "resources/" + $.S(imageName);
    t1.image_1.set$src(t2);
  } else
    action.call$1(t2);
};

$._HashMapImpl$ = function(K, V) {
  var t1 = new $._HashMapImpl(null, null, null, null, null);
  $.setRuntimeTypeInfo(t1, [K, V]);
  t1._HashMapImpl$0();
  return t1;
};

$._HashMapImpl__computeLoadLimit = function(capacity) {
  return $.tdiv(capacity * 3, 4);
};

$._HashMapImpl__nextProbe = function(currentProbe, numberOfProbes, length$) {
  return $.and($.add(currentProbe, numberOfProbes), $.sub(length$, 1));
};

$.HashMap_HashMap = function(K, V) {
  return $._HashMapImpl$(K, V);
};

$.AudioContext_AudioContext = function() {
  return $._AudioContextFactoryProvider_createAudioContext();
};

$.Strings__toJsStringArray$bailout = function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      strings = env0;
      break;
    case 2:
      length$ = env1;
      strings = env0;
      break;
    case 3:
      length$ = env2;
      array = env1;
      strings = env0;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      $.checkNull(strings);
      length$ = $.getInterceptor(strings).get$length(strings);
    case 2:
      state0 = 0;
    case 3:
      var strings, length$, i, string, array;
      if (state0 === 0 && $.isJsArray(strings)) {
        for (i = 0; $.ltB(i, length$); ++i) {
          string = $.index(strings, i);
          if (!(typeof string === 'string'))
            throw $.$$throw($.ArgumentError$(string));
        }
        array = strings;
      } else
        switch (state0) {
          case 0:
            array = $.List_List(length$);
          case 3:
            state0 = 0;
            for (i = 0; $.ltB(i, length$); ++i) {
              string = $.index(strings, i);
              if (!(typeof string === 'string'))
                throw $.$$throw($.ArgumentError$(string));
              $.indexSet(array, i, string);
            }
        }
      return array;
  }
};

$._Lists_indexOf$bailout = function(state0, a, element, startIndex, endIndex) {
  var i;
  if ($.geB(startIndex, $.getInterceptor(a).get$length(a)))
    return -1;
  if ($.ltB(startIndex, 0))
    startIndex = 0;
  for (i = startIndex; $.ltB(i, endIndex); i = $.add(i, 1))
    if ($.eqB($.index(a, i), element))
      return i;
  return -1;
};

$._Lists_lastIndexOf$bailout = function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      startIndex = env2;
      element = env1;
      a = env0;
      break;
    case 2:
      startIndex = env2;
      element = env1;
      a = env0;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      if ($.ltB(startIndex, 0))
        return -1;
      if ($.geB(startIndex, $.getInterceptor(a).get$length(a)))
        startIndex = $.sub($.getInterceptor(a).get$length(a), 1);
    case 2:
      var startIndex, element, a, i;
      state0 = 0;
      for (i = startIndex; $.geB(i, 0); i = $.sub(i, 1))
        if ($.eqB($.index(a, i), element))
          return i;
      return -1;
  }
};

$.Futures_wait$bailout = function(state0, futures, t1) {
  var completer, result, values, i, future;
  if ($.getInterceptor(futures).get$isEmpty(futures) === true)
    return $.Future_Future$immediate($.CTC16, 'List');
  completer = $.Completer_Completer('List');
  result = completer.get$future();
  t1.remaining_1 = $.getInterceptor(futures).get$length(futures);
  values = $.List_List($.getInterceptor(futures).get$length(futures));
  $.setRuntimeTypeInfo(values, []);
  for (i = 0; $.ltB(i, $.getInterceptor(futures).get$length(futures)); ++i) {
    future = $.index(futures, i);
    future.then$1(new $.Futures_wait_anon(result, completer, t1, values, i));
    future.handleException$1(new $.Futures_wait_anon0(result, completer, future));
  }
  return result;
};

$.Arrays_lastIndexOf$bailout = function(state0, a, element, startIndex) {
  var i;
  if ($.ltB(startIndex, 0))
    return -1;
  if ($.geB(startIndex, a.length))
    startIndex = a.length - 1;
  for (i = startIndex; $.geB(i, 0); --i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.eqB(a[i], element))
      return i;
  }
  return -1;
};

$.getRuntimeTypeString$bailout = function(state0, className, typeInfo) {
  var arguments$, i, argument;
  if (typeInfo == null)
    return className;
  arguments$ = $.StringBuffer_StringBuffer("");
  for (i = 0; $.ltB(i, $.getInterceptor(typeInfo).get$length(typeInfo)); ++i) {
    if (i > 0)
      $.getInterceptor(arguments$).add$1(arguments$, ", ");
    argument = $.index(typeInfo, i);
    if (argument == null)
      argument = "dynamic";
    $.getInterceptor(arguments$).add$1(arguments$, argument);
  }
  return className + "<" + $.S(arguments$) + ">";
};

$.typeNameInChrome.call$1 = $.typeNameInChrome;
$.typeNameInChrome.$name = "typeNameInChrome";
$.typeNameInSafari.call$1 = $.typeNameInSafari;
$.typeNameInSafari.$name = "typeNameInSafari";
$.typeNameInOpera.call$1 = $.typeNameInOpera;
$.typeNameInOpera.$name = "typeNameInOpera";
$.invokeClosure.call$5 = $.invokeClosure;
$.invokeClosure.$name = "invokeClosure";
$.sin.call$1 = $.sin;
$.sin.$name = "sin";
$.cos.call$1 = $.cos;
$.cos.$name = "cos";
$.typeNameInFirefox.call$1 = $.typeNameInFirefox;
$.typeNameInFirefox.$name = "typeNameInFirefox";
$.typeNameInIE.call$1 = $.typeNameInIE;
$.typeNameInIE.$name = "typeNameInIE";
$.constructorNameFallback.call$1 = $.constructorNameFallback;
$.constructorNameFallback.$name = "constructorNameFallback";
$.dynamicBind.call$4 = $.dynamicBind;
$.dynamicBind.$name = "dynamicBind";
$.toStringWrapper.call$0 = $.toStringWrapper;
$.toStringWrapper.$name = "toStringWrapper";
$._timerFactory.call$3 = $._timerFactory;
$._timerFactory.$name = "_timerFactory";
$._completeMeasurementFutures.call$0 = $._completeMeasurementFutures;
$._completeMeasurementFutures.$name = "_completeMeasurementFutures";
Isolate.$finishClasses($$);
$$ = {};
$.CTC3 = new Isolate.$isolateProperties.JSDouble();
$.CTC0 = new Isolate.$isolateProperties.JSString();
$.CTC17 = new Isolate.$isolateProperties.Returns("num|String|bool|=List|=Object|Blob|File|ArrayBuffer|ArrayBufferView");
Isolate.makeConstantList = function(list) {
  list.immutable$list = true;
  list.fixed$length = true;
  return list;
};
$.CTC18 = Isolate.makeConstantList(["childList", "attributes", "characterData", "subtree", "attributeOldValue", "characterDataOldValue"]);
$.CTC9 = new Isolate.$isolateProperties.ConstantMap(6, {"childList": true, "attributes": true, "characterData": true, "subtree": true, "attributeOldValue": true, "characterDataOldValue": true}, Isolate.$isolateProperties.CTC18);
$.CTC19 = new Isolate.$isolateProperties.Creates("=List");
$.CTC20 = new Isolate.$isolateProperties.Creates("=List|=Object|num|String");
$.CTC8 = new Isolate.$isolateProperties._DeletedKeySentinel();
$.CTC21 = new Isolate.$isolateProperties.Returns("=List|=Object|num|String");
$.CTC22 = new Isolate.$isolateProperties.Creates("num|String|bool|=List|=Object|Blob|File|ArrayBuffer|ArrayBufferView");
$.CTC15 = new Isolate.$isolateProperties.Object();
$.CTC11 = $.createRuntimeType('$int');
$.CTC14 = new Isolate.$isolateProperties._Random();
$.CTC23 = new Isolate.$isolateProperties.Creates("MutationObserver");
$.CTC16 = Isolate.makeConstantList([]);
$.CTC10 = $.createRuntimeType('String');
$.CTC24 = new Isolate.$isolateProperties.Creates("IDBDatabase");
$.CTC25 = new Isolate.$isolateProperties.Creates("ArrayBuffer|Blob|Document|=Object|=List|String|num");
$.CTC = new Isolate.$isolateProperties.NullThrownError();
$.CTC26 = new Isolate.$isolateProperties.Creates("MutationRecord");
$.CTC13 = $.createRuntimeType('bool');
$.CTC12 = $.createRuntimeType('$double');
$.CTC27 = new Isolate.$isolateProperties.Creates("IDBRequest");
$.CTC28 = new Isolate.$isolateProperties.Returns("IDBRequest");
$.CTC7 = new Isolate.$isolateProperties.ObjectInterceptor();
$.CTC6 = new Isolate.$isolateProperties.JSFunction();
$.CTC4 = new Isolate.$isolateProperties.JSBool();
$.CTC5 = new Isolate.$isolateProperties.JSNull();
$.CTC29 = new Isolate.$isolateProperties.Creates("Null");
$.CTC1 = new Isolate.$isolateProperties.JSArray();
$.CTC2 = new Isolate.$isolateProperties.JSInt();
$.TrigUtil__sinLookUpTable = null;
$.TrigUtil__cosLookUpTable = null;
$._pendingRequests = null;
$._pendingMeasurementFrameCallbacks = null;
$._measurementScheduler = null;
$._cachedBrowserPrefix = null;
$._serializedScriptValue = "num|String|bool|=List|=Object|Blob|File|ArrayBuffer|ArrayBufferView";
$._annotation_Creates_SerializedScriptValue = Isolate.$isolateProperties.CTC22;
$._annotation_Returns_SerializedScriptValue = Isolate.$isolateProperties.CTC17;
$._idbKey = "=List|=Object|num|String";
$._annotation_Creates_IDBKey = Isolate.$isolateProperties.CTC20;
$._annotation_Returns_IDBKey = Isolate.$isolateProperties.CTC21;
$._getTypeNameOf = null;
$.MIRROR_OPT_IN_MESSAGE = "\nThis program is using an experimental feature called \"mirrors\".  As\ncurrently implemented, mirrors do not work with minification, and will\ncause spurious errors depending on how code was optimized.\n\nThe authors of this program are aware of these problems and have\ndecided the thrill of using an experimental feature is outweighing the\nrisks.  Furthermore, the authors of this program understand that\nlong-term, to fix the problems mentioned above, mirrors may have\nnegative impact on size and performance of Dart programs compiled to\nJavaScript.\n";
$.PI = 3.141592653589793;
$.Primitives_hashCodeSeed = 0;
$.Primitives_mirrorsEnabled = false;
$.Primitives_DOLLAR_CHAR_VALUE = 36;
$._ReceivePortImpl__nextFreeId = 1;
$.ComponentType__nextBit = 1;
$.ComponentType__nextId = 0;
$._HashMapImpl__DELETED_KEY = Isolate.$isolateProperties.CTC8;
$._HashMapImpl__INITIAL_CAPACITY = 8;
$.ComponentTypeManager__componentTypes = null;
$.JSInvocationMirror_METHOD = 0;
$.JSInvocationMirror_GETTER = 1;
$.AudioBufferSourceNode_FINISHED_STATE = 3;
$._SystemBitManager__POS = 0;
$._SystemBitManager__systemBits = null;
$.MAX_HEIGHT = 400;
$.MAX_WIDTH = 800;
$.HUD_HEIGHT = 100;
$.UNIVERSE_HEIGHT = 1600;
$.UNIVERSE_WIDTH = 1600;
$.TAG_CAMERA = "CAMERA";
$.TAG_PLAYER = "PLAYER";
$._TimerFactory__factory = null;
$.GROUP_BACKGROUND = "GROUP_BACKGROUND";
Isolate.$lazy($, 'loadedImages', 'ImageCache_loadedImages', 'get$ImageCache_loadedImages', function() {
  return $.Map_Map('String', 'ImageElement');
});
Isolate.$lazy($, 'quoteRegExp', 'quoteRegExp', 'get$quoteRegExp', function() {
  return $.JSSyntaxRegExp$("[-[\\]{}()*+?.,\\\\^$|#\\s]", false, false);
});
Isolate.$lazy($, 'random', 'random', 'get$random', function() {
  return $.Random_Random(null);
});
var $ = null;
Isolate.$finishClasses($$);
$$ = {};
Isolate = Isolate.$finishIsolateConstructor(Isolate);
var $ = new Isolate();
$.$defineNativeClass = function(cls, desc) {
  var fields = desc[''] || [];
  var generateGetterSetter =   function(field, prototype) {
    var len = field.length;
    var lastCharCode = field.charCodeAt(len - 1);
    var needsAccessor = (lastCharCode & 63) >= 60;
    if (needsAccessor) {
      var needsGetter = (lastCharCode & 3) > 0;
      var needsSetter = (lastCharCode & 2) == 0;
      var renaming = (lastCharCode & 64) != 0;
      var accessorName = field = field.substring(0, len - 1);
      if (renaming) {
        var divider = field.indexOf(":");
        accessorName = field.substring(0, divider);
        field = field.substring(divider + 1);
      }
      if (needsGetter) {
        var getterString = "return this." + field + ";";
        prototype["get$" + accessorName] = new Function(getterString);
      }
      if (needsSetter) {
        var setterString = "this." + field + " = v;";
        prototype["set$" + accessorName] = new Function("v", setterString);
      }
    }
    return field;
  };
  for (var i = 0; i < fields.length; i++) {
    generateGetterSetter(fields[i], desc);
  }
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  for (var method in desc) {
    if (method !== '') {
      if (hasOwnProperty.call(desc, method)) {
        $.dynamicFunction(method)[cls] = desc[method];
      }
    }
  }
};

(function(table) {
  for (var key in table) {
    $.defineProperty(Object.prototype, key, table[key]);
  }
})({
 is$JavaScriptIndexingBehavior: function() { return false; },
 is$Location: function() { return false; },
 is$List: function() { return false; },
 is$File: function() { return false; },
 toString$0: function() { return $.toStringForNativeObject(this); },
 is$Blob: function() { return false; },
 is$ImageData: function() { return false; },
 is$Collection: function() { return false; },
 is$ArrayBufferView: function() { return false; },
 is$Map: function() { return false; },
 is$_FileList: function() { return false; },
 is$IDBKeyRange: function() { return false; },
 is$ArrayBuffer: function() { return false; },
 get$hashCode: function() { return $.hashCodeForNativeObject(this); }
});

$.$defineNativeClass('AbstractWorker', {
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
  {
  return $.AbstractWorkerEvents$(this);
}
  } else {
    return Object.prototype.get$on.call(this);
  }

},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('HTMLAnchorElement', {"": ["href>"],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('WebKitAnimation', {"": ["duration>"]
});

$.$defineNativeClass('HTMLAppletElement', {"": ["height=", "width="]
});

$.$defineNativeClass('HTMLAreaElement', {"": ["href>"]
});

$.$defineNativeClass('ArrayBuffer', {
 is$ArrayBuffer: function() { return true; }
});

$.$defineNativeClass('ArrayBufferView', {"": ["buffer>"],
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('Attr', {"": ["value="]
});

$.$defineNativeClass('AudioBuffer', {"": ["duration>", "gain>", "length>"]
});

$.$defineNativeClass('AudioBufferSourceNode', {"": ["buffer=", "gain>", "loop<", "loopEnd<", "loopStart<", "playbackState>"],
 start$3: function(when, grainOffset, grainDuration) {
  var t1, t2;
  t1 = $ === grainOffset;
  if (t1)
    grainOffset = null;
  t1 = !t1;
  t2 = $ === grainDuration;
  if (t2)
    grainDuration = null;
  t2 = !t2;
  if (!!this.start)
    if (t2)
      this.start(when, grainOffset, grainDuration);
    else if (t1)
      this.start(when, grainOffset);
    else
      this.start(when);
  else if (t2)
    this.noteOn(when, grainOffset, grainDuration);
  else if (t1)
    this.noteOn(when, grainOffset);
  else
    this.noteOn(when);
},
 start$1: function(when) {
  return this.start$3(when,$,$)
},
 stop$1: function(when) {
  if (!!this.stop)
    this.stop(when);
  else
    this.noteOff(when);
}
});

$.$defineNativeClass('AudioContext', {"": ["currentTime>", "destination>", "listener>"],
 get$on: function() {
  return $.AudioContextEvents$(this);
},
 createBufferSource$0: function() {
  return this.createBufferSource();
},
 createPanner$0: function() {
  return this.createPanner();
},
 decodeAudioData$3: function(audioData, successCallback, errorCallback) {
  return this.decodeAudioData(audioData,$.convertDartClosureToJS(successCallback, 1),$.convertDartClosureToJS(errorCallback, 1));
},
 createGain$0: function() {
  if (this.createGain !== undefined)
    return this.createGain();
  else
    return this.createGainNode();
}
});

$.$defineNativeClass('AudioNode', {
 connect$3: function(destination, output, input) {
  return this.connect(destination,output,input);
},
 disconnect$1: function(output) {
  return this.disconnect(output);
}
});

$.$defineNativeClass('AudioParam', {"": ["value="]
});

$.$defineNativeClass('HTMLBRElement', {
 clear$0: function() { return this.clear.call$0(); }
});

$.$defineNativeClass('HTMLBaseElement', {"": ["href>"]
});

$.$defineNativeClass('HTMLBaseFontElement', {"": ["color>"]
});

$.$defineNativeClass('BatteryManager', {
 get$on: function() {
  return $.BatteryManagerEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('BiquadFilterNode', {"": ["gain>"]
});

$.$defineNativeClass('Blob', {
 is$Blob: function() { return true; }
});

$.$defineNativeClass('HTMLBodyElement', {
 get$on: function() {
  return $.BodyElementEvents$(this);
}
});

$.$defineNativeClass('HTMLButtonElement', {"": ["value="],
 disabled$1: function(arg0) { return this.disabled.call$1(arg0); }
});

$.$defineNativeClass('CSSImportRule', {"": ["href>"]
});

$.$defineNativeClass('WebKitCSSMatrix', {
 scale$3: function(scaleX, scaleY, scaleZ) {
  return this.scale(scaleX,scaleY,scaleZ);
},
 get$scale: function() { return new $.BoundClosure0(this, 'scale$3'); },
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('CSSStyleDeclaration', {"": ["length>"],
 _getPropertyValue$1: function(propertyName) {
  return this.getPropertyValue(propertyName);
},
 getPropertyValue$1: function(propertyName) {
  var propValue = this._getPropertyValue$1(propertyName);
  return !(propValue == null) ? propValue : "";
},
 setProperty$3: function(propertyName, value, priority) {
  this.setProperty(propertyName, value, priority);
  if (!!this.setAttribute)
    this.setAttribute(propertyName, value);
},
 get$clear: function() {
  return this.getPropertyValue$1("clear");
},
 clear$0: function() { return this.get$clear().call$0(); },
 get$color: function() {
  return this.getPropertyValue$1("color");
},
 get$height: function() {
  return this.getPropertyValue$1("height");
},
 set$height: function(value) {
  this.setProperty$3("height", value, "");
},
 set$src: function(value) {
  this.setProperty$3("src", value, "");
},
 get$transform: function() {
  return this.getPropertyValue$1($.S($._browserPrefix()) + "transform");
},
 transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) { return this.get$transform().call$6(arg0, arg1, arg2, arg3, arg4, arg5); },
 get$width: function() {
  return this.getPropertyValue$1("width");
},
 set$width: function(value) {
  this.setProperty$3("width", value, "");
}
});

$.$defineNativeClass('HTMLCanvasElement', {"": ["height=", "width="],
 getContext$1: function(contextId) {
  return this.getContext(contextId);
},
 get$context2d: function() {
  return this.getContext$1("2d");
}
});

$.$defineNativeClass('CanvasRenderingContext2D', {"": ["fillStyle<", "globalAlpha<", "lineWidth<", "strokeStyle<"],
 beginPath$0: function() {
  return this.beginPath();
},
 closePath$0: function() {
  return this.closePath();
},
 drawImage$9: function(canvas_OR_image_OR_video, sx_OR_x, sy_OR_y, sw_OR_width, height_OR_sh, dx, dy, dw, dh) {
  return this.drawImage(canvas_OR_image_OR_video,sx_OR_x,sy_OR_y,sw_OR_width,height_OR_sh,dx,dy,dw,dh);
},
 drawImage$3: function(canvas_OR_image_OR_video,sx_OR_x,sy_OR_y) {
  return this.drawImage(canvas_OR_image_OR_video,sx_OR_x,sy_OR_y);
},
 drawImage$5: function(canvas_OR_image_OR_video,sx_OR_x,sy_OR_y,sw_OR_width,height_OR_sh) {
  return this.drawImage(canvas_OR_image_OR_video,sx_OR_x,sy_OR_y,sw_OR_width,height_OR_sh);
},
 fill$0: function() {
  return this.fill();
},
 fillRect$4: function(x, y, width, height) {
  return this.fillRect(x,y,width,height);
},
 rect$4: function(x, y, width, height) {
  return this.rect(x,y,width,height);
},
 restore$0: function() {
  return this.restore();
},
 rotate$1: function(angle) {
  return this.rotate(angle);
},
 save$0: function() {
  return this.save();
},
 scale$2: function(sx, sy) {
  return this.scale(sx,sy);
},
 get$scale: function() { return new $.BoundClosure1(this, 'scale$2'); },
 setTransform$6: function(m11, m12, m21, m22, dx, dy) {
  return this.setTransform(m11,m12,m21,m22,dx,dy);
},
 stroke$0: function() {
  return this.stroke();
},
 transform$6: function(m11, m12, m21, m22, dx, dy) {
  return this.transform(m11,m12,m21,m22,dx,dy);
},
 translate$2: function(tx, ty) {
  return this.translate(tx,ty);
}
});

$.$defineNativeClass('CharacterData', {"": ["length>"],
 remove$0: function() {
  return this.remove();
}
});

$.$defineNativeClass('ClientRect', {"": ["height>", "width>"]
});

Console = (typeof console == 'undefined' ? {} : console);
Console.error$1 = function(arg) {
  return this.error(arg);
};
Console.get$error = function() { return new $.BoundClosure(this, 'error$1'); };
$.$defineNativeClass('ConvolverNode', {"": ["buffer="]
});

$.$defineNativeClass('DOMApplicationCache', {
 get$on: function() {
  return $.DOMApplicationCacheEvents$(this);
},
 abort$0: function() {
  return this.abort();
},
 get$abort: function() { return new $.BoundClosure2(this, 'abort$0'); },
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('DOMException', {"": ["message>"],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('MimeTypeArray', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, 'DOMMimeType');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Plugin', {"": ["length>"]
});

$.$defineNativeClass('PluginArray', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, 'DOMPlugin');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Selection', {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('DOMSettableTokenList', {"": ["value="]
});

$.$defineNativeClass('DOMTokenList', {"": ["length>"],
 contains$1: function(token) {
  return this.contains(token);
},
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('DataTransferItemList', {"": ["length>"],
 add$2: function(data_OR_file, type) {
  return this.add(data_OR_file,type);
},
 add$1: function(data_OR_file) {
  return this.add(data_OR_file);
},
 clear$0: function() {
  return this.clear();
}
});

$.$defineNativeClass('DedicatedWorkerContext', {
 get$on: function() {
  return $.DedicatedWorkerContextEvents$(this);
},
 postMessage$2: function(message, messagePorts) {
  var t1 = $ === messagePorts;
  if (t1)
    messagePorts = null;
  if (!t1) {
    this._postMessage_1$2($._convertDartToNative_PrepareForStructuredClone(message), messagePorts);
    return;
  }
  this._postMessage_2$1($._convertDartToNative_PrepareForStructuredClone(message));
  return;
},
 postMessage$1: function(message) {
  return this.postMessage$2(message,$)
},
 _postMessage_1$2: function(message, messagePorts) {
  return this.postMessage(message,messagePorts);
},
 _postMessage_2$1: function(message) {
  return this.postMessage(message);
}
});

$.$defineNativeClass('HTMLDetailsElement', {
 open$2: function(arg0, arg1) { return this.open.call$2(arg0, arg1); }
});

$.$defineNativeClass('Document', {
 get$on: function() {
  return $.DocumentEvents$(this);
},
 $$dom_createElement$1: function(tagName) {
  return this.createElement(tagName);
},
 $$dom_getElementById$1: function(elementId) {
  return this.getElementById(elementId);
},
 $$dom_querySelector$1: function(selectors) {
  return this.querySelector(selectors);
},
 query$1: function(selectors) {
  if ($.RegExp_RegExp("^#[_a-zA-Z]\\w*$", false, false).hasMatch$1(selectors) === true)
    return this.$$dom_getElementById$1($.getInterceptor(selectors).substring$1(selectors, 1));
  return this.$$dom_querySelector$1(selectors);
}
});

$.$defineNativeClass('DocumentFragment', {
 query$1: function(selectors) {
  return this.$$dom_querySelector$1(selectors);
},
 get$hidden: function() {
  return false;
},
 get$translate: function() {
  return false;
},
 translate$2: function(arg0, arg1) { return this.get$translate().call$2(arg0, arg1); },
 get$id: function() {
  return "";
},
 get$parent: function() {
  return;
},
 set$hidden: function(value) {
  throw $.$$throw($.UnsupportedError$("Hidden can't be set for document fragments."));
},
 get$on: function() {
  return $.ElementEvents$(this);
},
 $$dom_querySelector$1: function(selectors) {
  return this.querySelector(selectors);
}
});

$.$defineNativeClass('DocumentType', {
 remove$0: function() {
  return this.remove();
}
});

$.$defineNativeClass('Element', {"": ["hidden=", "id>"],
 query$1: function(selectors) {
  return this.$$dom_querySelector$1(selectors);
},
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
  {
  return $.ElementEvents$(this);
}
  } else {
    return Object.prototype.get$on.call(this);
  }

},
 translate$2: function(arg0, arg1) { return this.translate.call$2(arg0, arg1); },
 $$dom_querySelector$1: function(selectors) {
  return this.querySelector(selectors);
}
});

$.$defineNativeClass('HTMLEmbedElement', {"": ["height=", "src<", "width="]
});

$.$defineNativeClass('Entry', {
 remove$2: function(successCallback, errorCallback) {
  return this.remove($.convertDartClosureToJS(successCallback, 0),$.convertDartClosureToJS(errorCallback, 1));
},
 remove$1: function(successCallback) {
  successCallback = $.convertDartClosureToJS(successCallback, 0);
  return this.remove(successCallback);
}
});

$.$defineNativeClass('EntrySync', {
 remove$0: function() {
  return this.remove();
}
});

$.$defineNativeClass('ErrorEvent', {"": ["message>"]
});

$.$defineNativeClass('EventException', {"": ["message>"],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('EventSource', {
 get$on: function() {
  return $.EventSourceEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('EventTarget', {
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
  {
  return $.Events$(this);
}
  } else {
    return Object.prototype.get$on.call(this);
  }

},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  if (Object.getPrototypeOf(this).hasOwnProperty('$$dom_addEventListener$3')) {
  {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
  } else {
    return Object.prototype.$$dom_addEventListener$3.call(this, type, listener, useCapture);
  }

},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  if (Object.getPrototypeOf(this).hasOwnProperty('$$dom_removeEventListener$3')) {
  {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
  } else {
    return Object.prototype.$$dom_removeEventListener$3.call(this, type, listener, useCapture);
  }

}
});

$.$defineNativeClass('HTMLFieldSetElement', {
 disabled$1: function(arg0) { return this.disabled.call$1(arg0); }
});

$.$defineNativeClass('File', {
 is$File: function() { return true; }
});

$.$defineNativeClass('FileException', {"": ["message>"],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('FileReader', {"": ["error>"],
 get$on: function() {
  return $.FileReaderEvents$(this);
},
 abort$0: function() {
  return this.abort();
},
 get$abort: function() { return new $.BoundClosure2(this, 'abort$0'); },
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('FileWriter', {"": ["error>", "length>"],
 get$on: function() {
  return $.FileWriterEvents$(this);
},
 abort$0: function() {
  return this.abort();
},
 get$abort: function() { return new $.BoundClosure2(this, 'abort$0'); },
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('FileWriterSync', {"": ["length>"]
});

$.$defineNativeClass('Float32Array', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, 'num');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Float64Array', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, 'num');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('HTMLFontElement', {"": ["color>"]
});

$.$defineNativeClass('HTMLFormElement', {"": ["length>"],
 reset$0: function() {
  return this.reset();
}
});

$.$defineNativeClass('HTMLFrameElement', {"": ["height>", "location>", "src<", "width>"]
});

$.$defineNativeClass('HTMLFrameSetElement', {
 get$on: function() {
  return $.FrameSetElementEvents$(this);
}
});

$.$defineNativeClass('GainNode', {"": ["gain>"]
});

$.$defineNativeClass('Gamepad', {"": ["id>"]
});

$.$defineNativeClass('HTMLHRElement', {"": ["width="]
});

$.$defineNativeClass('HTMLAllCollection', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, 'Node');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('HTMLCollection', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, 'Node');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.get$length(), 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('HTMLOptionsCollection', {
 get$length: function() {
  return this.length;
},
 set$length: function(value) {
  this.length = value;
},
 remove$1: function(index) {
  return this.remove(index);
}
});

$.$defineNativeClass('XMLHttpRequest', {"": ["response>", "responseType<"],
 get$on: function() {
  return $.HttpRequestEvents$(this);
},
 abort$0: function() {
  return this.abort();
},
 get$abort: function() { return new $.BoundClosure2(this, 'abort$0'); },
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 open$5: function(method, url, async, user, password) {
  return this.open(method,url,async,user,password);
},
 open$2: function(method,url) {
  return this.open(method,url);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 send$1: function(data) {
  return this.send(data);
},
 send$0: function() {
  return this.send();
}
});

$.$defineNativeClass('XMLHttpRequestException', {"": ["message>"],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('XMLHttpRequestUpload', {
 get$on: function() {
  return $.HttpRequestUploadEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('IDBCursor', {"": ["key>"]
});

$.$defineNativeClass('IDBCursorWithValue', {"": ["value>"]
});

$.$defineNativeClass('IDBDatabase', {
 get$on: function() {
  return $.IDBDatabaseEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('IDBDatabaseException', {"": ["message>"],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('IDBFactory', {
 open$2: function(name, version) {
  return this.open(name,version);
}
});

$.$defineNativeClass('IDBIndex', {
 get$1: function(key) {
  var t1, t2;
  t1 = $ === key;
  if (t1)
    key = null;
  t1 = !t1;
  if (t1)
    t2 = typeof key === 'object' && key !== null && key.is$IDBKeyRange() || key == null;
  else
    t2 = false;
  if (t2)
    return this._get_1$1(key);
  if (t1)
    return this._get_2$1(key);
  throw $.$$throw($.ArgumentError$("Incorrect number or type of arguments"));
},
 _get_1$1: function(key) {
  return this.get(key);
},
 _get_2$1: function(key) {
  return this.get(key);
}
});

$.$defineNativeClass('IDBKeyRange', {
 is$IDBKeyRange: function() { return true; }
});

$.$defineNativeClass('IDBObjectStore', {
 add$2: function(value, key) {
  var t1 = $ === key;
  if (t1)
    key = null;
  if (!t1)
    return this._add_1$2($._convertDartToNative_PrepareForStructuredClone(value), key);
  return this._add_2$1($._convertDartToNative_PrepareForStructuredClone(value));
},
 add$1: function(value) {
  return this.add$2(value,$)
},
 _add_1$2: function(value, key) {
  return this.add(value,key);
},
 _add_2$1: function(value) {
  return this.add(value);
},
 clear$0: function() {
  return this.clear();
}
});

$.$defineNativeClass('IDBOpenDBRequest', {
 get$on: function() {
  return $.IDBOpenDBRequestEvents$(this);
}
});

$.$defineNativeClass('IDBRequest', {"": ["error>"],
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
  {
  return $.IDBRequestEvents$(this);
}
  } else {
    return Object.prototype.get$on.call(this);
  }

},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('IDBTransaction', {"": ["error>"],
 get$on: function() {
  return $.IDBTransactionEvents$(this);
},
 abort$0: function() {
  return this.abort();
},
 get$abort: function() { return new $.BoundClosure2(this, 'abort$0'); },
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('IDBVersionChangeRequest', {
 get$on: function() {
  return $.IDBVersionChangeRequestEvents$(this);
}
});

$.$defineNativeClass('HTMLIFrameElement', {"": ["height=", "src<", "width="]
});

$.$defineNativeClass('ImageData', {"": ["height>", "width>"],
 is$ImageData: function() { return true; }
});

$.$defineNativeClass('HTMLImageElement', {"": ["height=", "src<", "width=", "x>", "y>"],
 complete$1: function(arg0) { return this.complete.call$1(arg0); }
});

$.$defineNativeClass('HTMLInputElement', {"": ["height=", "pattern>", "src<", "value=", "width="],
 get$on: function() {
  return $.InputElementEvents$(this);
},
 disabled$1: function(arg0) { return this.disabled.call$1(arg0); }
});

$.$defineNativeClass('Int16Array', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, '$int');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Int32Array', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, '$int');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Int8Array', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, '$int');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('HTMLKeygenElement', {
 disabled$1: function(arg0) { return this.disabled.call$1(arg0); }
});

$.$defineNativeClass('HTMLLIElement', {"": ["value="]
});

$.$defineNativeClass('HTMLLinkElement', {"": ["href>"],
 disabled$1: function(arg0) { return this.disabled.call$1(arg0); }
});

$.$defineNativeClass('History', {"": ["length>"]
});

$.$defineNativeClass('Location', {"": ["href>"],
 toString$0: function() {
  return this.toString();
},
 is$Location: function() { return true; }
});

$.$defineNativeClass('LocalMediaStream', {
 stop$0: function() {
  return this.stop();
}
});

$.$defineNativeClass('DOMWindow', {"": ["navigator>"],
 open$3: function(url, name$, options) {
  if (options == null)
    return $._DOMWindowCrossFrame__createSafe(this.open(url,name$));
  else
    return $._DOMWindowCrossFrame__createSafe(this.open(url,name$,options));
},
 open$2: function(url,name$) {
  return this.open$3(url,name$,null)
},
 get$location: function() {
  var result = this.get$_location();
  if ($.LocalWindow__isDartLocation(result) === true)
    return result;
  if (null == this._location_wrapper)
    this._location_wrapper = $._LocationWrapper$(result);
  return this._location_wrapper;
},
 get$_location: function() {
  return this.location;
},
 requestLayoutFrame$1: function(callback) {
  $._addMeasurementFrameCallback(callback);
},
 requestAnimationFrame$1: function(callback) {
  this._ensureRequestAnimationFrame$0();
  return this._requestAnimationFrame$1(callback);
},
 _requestAnimationFrame$1: function(callback) {
  return this.requestAnimationFrame($.convertDartClosureToJS(callback, 1));
},
 _ensureRequestAnimationFrame$0: function() {
  if (!!(this.requestAnimationFrame && this.cancelAnimationFrame))
    return;
    (function($this) {
   var vendors = ['ms', 'moz', 'webkit', 'o'];
   for (var i = 0; i < vendors.length && !$this.requestAnimationFrame; ++i) {
     $this.requestAnimationFrame = $this[vendors[i] + 'RequestAnimationFrame'];
     $this.cancelAnimationFrame =
         $this[vendors[i]+'CancelAnimationFrame'] ||
         $this[vendors[i]+'CancelRequestAnimationFrame'];
   }
   if ($this.requestAnimationFrame && $this.cancelAnimationFrame) return;
   $this.requestAnimationFrame = function(callback) {
      return window.setTimeout(function() {
        callback(Date.now());
      }, 16 /* 16ms ~= 60fps */);
   };
   $this.cancelAnimationFrame = function(id) { clearTimeout(id); }
  })(this);
},
 get$on: function() {
  return $.LocalWindowEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 postMessage$3: function(message, targetOrigin, messagePorts) {
  var t1, t2;
  t1 = $ === message;
  if (t1)
    message = null;
  t1 = !t1;
  t2 = $ === messagePorts;
  if (t2)
    messagePorts = null;
  if (t1 && t2) {
    this._postMessage_1$2($._convertDartToNative_PrepareForStructuredClone(message), targetOrigin);
    return;
  }
  if (t1) {
    this._postMessage_2$3($._convertDartToNative_PrepareForStructuredClone(message), targetOrigin, messagePorts);
    return;
  }
  throw $.$$throw($.ArgumentError$("Incorrect number or type of arguments"));
},
 postMessage$2: function(message,targetOrigin) {
  return this.postMessage$3(message,targetOrigin,$)
},
 _postMessage_1$2: function(message, targetOrigin) {
  return this.postMessage(message,targetOrigin);
},
 _postMessage_2$3: function(message, targetOrigin, messagePorts) {
  return this.postMessage(message,targetOrigin,messagePorts);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 setInterval$2: function(handler, timeout) {
  return this.setInterval($.convertDartClosureToJS(handler, 0),timeout);
},
 setTimeout$2: function(handler, timeout) {
  return this.setTimeout($.convertDartClosureToJS(handler, 0),timeout);
},
 stop$0: function() {
  return this.stop();
}
});

$.$defineNativeClass('HTMLMarqueeElement', {"": ["height=", "loop<", "width="],
 stop$0: function() {
  return this.stop();
}
});

$.$defineNativeClass('MediaController', {"": ["currentTime>", "duration>"],
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('HTMLMediaElement', {"": ["currentTime>", "duration>", "error>", "loop<", "src<"],
 get$on: function() {
  return $.MediaElementEvents$(this);
},
 load$0: function() {
  return this.load();
},
 get$load: function() { return new $.BoundClosure2(this, 'load$0'); }
});

$.$defineNativeClass('MediaKeyEvent', {"": ["message>"]
});

$.$defineNativeClass('MediaList', {"": ["length>"]
});

$.$defineNativeClass('MediaSource', {"": ["duration>"],
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('MediaStream', {
 get$on: function() {
  return $.MediaStreamEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('MediaStreamTrack', {
 get$on: function() {
  return $.MediaStreamTrackEvents$(this);
},
 enabled$1: function(arg0) { return this.enabled.call$1(arg0); },
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('MediaStreamTrackList', {"": ["length>"],
 get$on: function() {
  return $.MediaStreamTrackListEvents$(this);
},
 add$1: function(track) {
  return this.add(track);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 remove$1: function(track) {
  return this.remove(track);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('MessageEvent', {"": ["ports>"]
});

$.$defineNativeClass('MessagePort', {
 get$on: function() {
  return $.MessagePortEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 postMessage$2: function(message, messagePorts) {
  var t1 = $ === messagePorts;
  if (t1)
    messagePorts = null;
  if (!t1) {
    this._postMessage_1$2($._convertDartToNative_PrepareForStructuredClone(message), messagePorts);
    return;
  }
  this._postMessage_2$1($._convertDartToNative_PrepareForStructuredClone(message));
  return;
},
 postMessage$1: function(message) {
  return this.postMessage$2(message,$)
},
 _postMessage_1$2: function(message, messagePorts) {
  return this.postMessage(message,messagePorts);
},
 _postMessage_2$1: function(message) {
  return this.postMessage(message);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('HTMLMeterElement', {"": ["value="]
});

$.$defineNativeClass('MouseEvent', {"": ["x>", "y>"]
});

$.$defineNativeClass('MutationObserver', {
 observe$9$attributeFilter$attributeOldValue$attributes$characterData$characterDataOldValue$childList$options$subtree: function(target, attributeFilter, attributeOldValue, attributes, characterData, characterDataOldValue, childList, options, subtree) {
  var parsedOptions, t1;
  parsedOptions = {};
  if (!(options == null))
    $.getInterceptor(options).forEach$1(options, new $.MutationObserver_observe_anon(parsedOptions));
  t1 = new $.MutationObserver_observe_override(parsedOptions);
  t1.call$2("childList", childList);
  t1.call$2("attributes", attributes);
  t1.call$2("characterData", characterData);
  t1.call$2("subtree", subtree);
  t1.call$2("attributeOldValue", attributeOldValue);
  t1.call$2("characterDataOldValue", characterDataOldValue);
  if (!(attributeFilter == null))
    t1.call$2("attributeFilter", attributeFilter);
  this._call$2(target, parsedOptions);
},
 observe$2$attributes: function(target,attributes) {
  return this.observe$9$attributeFilter$attributeOldValue$attributes$characterData$characterDataOldValue$childList$options$subtree(target,null,null,attributes,null,null,null,null,null)
},
 _call$2: function(target, options) {
  return this.observe(target,options);
}
});

$.$defineNativeClass('NamedNodeMap', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, 'Node');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Navigator', {"": ["userAgent>"]
});

$.$defineNativeClass('Node', {
 remove$0: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('remove$0')) {
  {
  if (!(this.get$parent() == null))
    this.get$parent().$$dom_removeChild$1(this);
}
  } else {
    return Object.prototype.remove$0.call(this);
  }

},
 get$parent: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$parent')) {
  {
  return this.parentNode;
}
  } else {
    return Object.prototype.get$parent.call(this);
  }

},
 set$text: function(value) {
  this.textContent = value;
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 contains$1: function(other) {
  return this.contains(other);
},
 $$dom_removeChild$1: function(oldChild) {
  return this.removeChild(oldChild);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('Notification', {
 get$on: function() {
  return $.NotificationEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('HTMLOListElement', {
 start$1: function(arg0) { return this.start.call$1(arg0); },
 start$3: function(arg0, arg1, arg2) { return this.start.call$3(arg0, arg1, arg2); }
});

$.$defineNativeClass('HTMLObjectElement', {"": ["height=", "width="]
});

$.$defineNativeClass('HTMLOptGroupElement', {
 disabled$1: function(arg0) { return this.disabled.call$1(arg0); }
});

$.$defineNativeClass('HTMLOptionElement', {"": ["value="],
 disabled$1: function(arg0) { return this.disabled.call$1(arg0); }
});

$.$defineNativeClass('OscillatorNode', {"": ["playbackState>"],
 start$1: function(when) {
  return this.start(when);
},
 stop$1: function(when) {
  return this.stop(when);
}
});

$.$defineNativeClass('HTMLOutputElement', {"": ["value="]
});

$.$defineNativeClass('PannerNode', {"": ["coneOuterGain<"]
});

$.$defineNativeClass('HTMLParamElement', {"": ["value="]
});

$.$defineNativeClass('PeerConnection00', {
 get$on: function() {
  return $.PeerConnection00Events$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('WebKitPoint', {"": ["x=", "y="]
});

$.$defineNativeClass('PositionError', {"": ["message>"]
});

$.$defineNativeClass('HTMLPreElement', {"": ["width="]
});

$.$defineNativeClass('HTMLProgressElement', {"": ["value="]
});

$.$defineNativeClass('RTCDataChannel', {
 get$on: function() {
  return $.RTCDataChannelEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('RTCPeerConnection', {
 get$on: function() {
  return $.RTCPeerConnectionEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('RadioNodeList', {"": ["value="]
});

$.$defineNativeClass('Range', {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('RangeException', {"": ["message>"],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('SQLError', {"": ["message>"]
});

$.$defineNativeClass('SQLException', {"": ["message>"]
});

$.$defineNativeClass('SQLResultSetRowList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, 'Map');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Screen', {"": ["height>", "width>"]
});

$.$defineNativeClass('HTMLScriptElement', {"": ["src<"]
});

$.$defineNativeClass('ScriptProcessorNode', {
 get$on: function() {
  return $.ScriptProcessorNodeEvents$(this);
}
});

$.$defineNativeClass('HTMLSelectElement', {"": ["length=", "value="],
 disabled$1: function(arg0) { return this.disabled.call$1(arg0); }
});

$.$defineNativeClass('SharedWorkerContext', {
 get$on: function() {
  return $.SharedWorkerContextEvents$(this);
}
});

$.$defineNativeClass('SourceBuffer', {
 abort$0: function() {
  return this.abort();
},
 get$abort: function() { return new $.BoundClosure2(this, 'abort$0'); }
});

$.$defineNativeClass('SourceBufferList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, 'SourceBuffer');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('HTMLSourceElement', {"": ["src<"]
});

$.$defineNativeClass('SpeechGrammar', {"": ["src<"]
});

$.$defineNativeClass('SpeechGrammarList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, 'SpeechGrammar');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SpeechRecognition', {
 get$on: function() {
  return $.SpeechRecognitionEvents$(this);
},
 abort$0: function() {
  return this.abort();
},
 get$abort: function() { return new $.BoundClosure2(this, 'abort$0'); },
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 stop$0: function() {
  return this.stop();
}
});

$.$defineNativeClass('SpeechRecognitionError', {"": ["message>"]
});

$.$defineNativeClass('SpeechRecognitionResult', {"": ["length>"]
});

$.$defineNativeClass('Storage', {
 containsKey$1: function(key) {
  return !(this.$$dom_getItem$1(key) == null);
},
 operator$index$1: function(key) {
  return this.$$dom_getItem$1(key);
},
 oprator$indexSet$2: function(key, value) {
  this.$$dom_setItem$2(key, value);
},
 remove$1: function(key) {
  var value = this.operator$index$1(key);
  this.$$dom_removeItem$1(key);
  return value;
},
 clear$0: function() {
  return this.$$dom_clear$0();
},
 forEach$1: function(f) {
  var i, key;
  for (i = 0; true; ++i) {
    key = this.$$dom_key$1(i);
    if (key == null)
      return;
    f.call$2(key, this.operator$index$1(key));
  }
},
 get$keys: function() {
  var keys = [];
  $.getInterceptor(this).forEach$1(this, new $.Storage_keys_anon(keys));
  return keys;
},
 get$values: function() {
  var values = [];
  $.getInterceptor(this).forEach$1(this, new $.Storage_values_anon(values));
  return values;
},
 get$length: function() {
  return this.get$$$dom_length();
},
 get$isEmpty: function() {
  return this.$$dom_key$1(0) == null;
},
 get$$$dom_length: function() {
  return this.length;
},
 $$dom_clear$0: function() {
  return this.clear();
},
 $$dom_getItem$1: function(key) {
  return this.getItem(key);
},
 $$dom_key$1: function(index) {
  return this.key(index);
},
 $$dom_removeItem$1: function(key) {
  return this.removeItem(key);
},
 $$dom_setItem$2: function(key, data) {
  return this.setItem(key,data);
},
 is$Map: function() { return true; }
});

$.$defineNativeClass('StorageEvent', {"": ["key>"]
});

$.$defineNativeClass('HTMLStyleElement', {
 disabled$1: function(arg0) { return this.disabled.call$1(arg0); }
});

$.$defineNativeClass('StyleSheet', {"": ["href>"],
 disabled$1: function(arg0) { return this.disabled.call$1(arg0); }
});

$.$defineNativeClass('HTMLTableCellElement', {"": ["height=", "width="]
});

$.$defineNativeClass('HTMLTableColElement', {"": ["width="]
});

$.$defineNativeClass('HTMLTableElement', {"": ["width="]
});

$.$defineNativeClass('HTMLTextAreaElement', {"": ["value="],
 disabled$1: function(arg0) { return this.disabled.call$1(arg0); }
});

$.$defineNativeClass('TextMetrics', {"": ["width>"]
});

$.$defineNativeClass('TextTrack', {
 get$on: function() {
  return $.TextTrackEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('TextTrackCue', {"": ["id>", "text<"],
 get$on: function() {
  return $.TextTrackCueEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('TextTrackCueList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, 'TextTrackCue');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('TextTrackList', {"": ["length>"],
 get$on: function() {
  return $.TextTrackListEvents$(this);
},
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, 'TextTrack');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('TimeRanges', {"": ["length>"],
 start$1: function(index) {
  return this.start(index);
}
});

$.$defineNativeClass('TouchList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, 'Touch');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('HTMLTrackElement', {"": ["src<"]
});

$.$defineNativeClass('UIEvent', {"": ["keyCode>"]
});

$.$defineNativeClass('Uint16Array', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, '$int');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Uint32Array', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, '$int');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Uint8Array', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, '$int');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('HTMLVideoElement', {"": ["height=", "width="]
});

$.$defineNativeClass('WebKitNamedFlow', {
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('WebSocket', {
 get$on: function() {
  return $.WebSocketEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$2: function(code, reason) {
  return this.close(code,reason);
},
 close$0: function() {
  return this.close();
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('Worker', {
 get$on: function() {
  return $.WorkerEvents$(this);
},
 postMessage$2: function(message, messagePorts) {
  var t1 = $ === messagePorts;
  if (t1)
    messagePorts = null;
  if (!t1) {
    this._postMessage_1$2($._convertDartToNative_PrepareForStructuredClone(message), messagePorts);
    return;
  }
  this._postMessage_2$1($._convertDartToNative_PrepareForStructuredClone(message));
  return;
},
 postMessage$1: function(message) {
  return this.postMessage$2(message,$)
},
 _postMessage_1$2: function(message, messagePorts) {
  return this.postMessage(message,messagePorts);
},
 _postMessage_2$1: function(message) {
  return this.postMessage(message);
}
});

$.$defineNativeClass('WorkerContext', {"": ["location>", "navigator>"],
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
  {
  return $.WorkerContextEvents$(this);
}
  } else {
    return Object.prototype.get$on.call(this);
  }

},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 setInterval$2: function(handler, timeout) {
  return this.setInterval($.convertDartClosureToJS(handler, 0),timeout);
},
 setTimeout$2: function(handler, timeout) {
  return this.setTimeout($.convertDartClosureToJS(handler, 0),timeout);
}
});

$.$defineNativeClass('WorkerLocation', {"": ["href>"],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('WorkerNavigator', {"": ["userAgent>"]
});

$.$defineNativeClass('XPathException', {"": ["message>"],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('XSLTProcessor', {
 reset$0: function() {
  return this.reset();
}
});

$.$defineNativeClass('CSSRuleList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, 'CSSRule');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('CSSValueList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, 'CSSValue');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('ClientRectList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, 'ClientRect');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('DOMStringList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, 'String');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 contains$1: function(string) {
  return this.contains(string);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('EntryArray', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, 'Entry');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('EntryArraySync', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, 'EntrySync');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('FileList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, 'File');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 is$_FileList: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('GamepadList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, 'Gamepad');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('MediaStreamList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, 'MediaStream');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('NodeList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, 'Node');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SpeechInputResultList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, 'SpeechInputResult');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SpeechRecognitionResultList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, 'SpeechRecognitionResult');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('StyleSheetList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, 'StyleSheet');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('WebKitAnimationList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, 'Animation');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Worker', {
 get$id: function() {
  return this.id;
},
 postMessage$1: function(msg) {
  return this.postMessage(msg);
}
});

$.$defineNativeClass('DOMWindow', {
 setTimeout$2: function(handler, timeout) {
  return this.setTimeout($.convertDartClosureToJS(handler, 0),timeout);
},
 setInterval$2: function(handler, timeout) {
  return this.setInterval($.convertDartClosureToJS(handler, 0),timeout);
}
});

$.$defineNativeClass('SVGAElement', {"": ["href>"],
 transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) { return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5); }
});

$.$defineNativeClass('SVGAltGlyphElement', {"": ["href>"]
});

$.$defineNativeClass('SVGAngle', {"": ["value="]
});

$.$defineNativeClass('SVGAnimatedLengthList', {
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, 'AnimatedLength');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  var t1 = this.get$_Collections();
  return $.getInterceptor(t1).contains$2(t1, this, element);
},
 forEach$1: function(f) {
  return this.get$_Collections().forEach$2(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return this.get$_Lists().indexOf$4(this, element, start, $.getInterceptor(this).get$length(this));
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.get$length(), 1);
  return this.get$_Lists().lastIndexOf$3(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGAnimatedNumberList', {
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, 'AnimatedNumber');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  var t1 = this.get$_Collections();
  return $.getInterceptor(t1).contains$2(t1, this, element);
},
 forEach$1: function(f) {
  return this.get$_Collections().forEach$2(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return this.get$_Lists().indexOf$4(this, element, start, $.getInterceptor(this).get$length(this));
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.get$length(), 1);
  return this.get$_Lists().lastIndexOf$3(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGAnimatedTransformList', {
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, 'AnimateTransformElement');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  var t1 = this.get$_Collections();
  return $.getInterceptor(t1).contains$2(t1, this, element);
},
 forEach$1: function(f) {
  return this.get$_Collections().forEach$2(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return this.get$_Lists().indexOf$4(this, element, start, $.getInterceptor(this).get$length(this));
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.get$length(), 1);
  return this.get$_Lists().lastIndexOf$3(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGCircleElement', {
 transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) { return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5); }
});

$.$defineNativeClass('SVGClipPathElement', {
 transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) { return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5); }
});

$.$defineNativeClass('SVGCursorElement', {"": ["x>", "y>", "href>"]
});

$.$defineNativeClass('SVGDefsElement', {
 transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) { return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5); }
});

$.$defineNativeClass('SVGElementInstance', {
 get$on: function() {
  return $.ElementInstanceEvents$(this);
}
});

$.$defineNativeClass('SVGEllipseElement', {
 transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) { return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5); }
});

$.$defineNativeClass('SVGException', {"": ["message>"],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('SVGFEBlendElement', {"": ["height>", "width>", "x>", "y>"]
});

$.$defineNativeClass('SVGFEColorMatrixElement', {"": ["height>", "width>", "x>", "y>"]
});

$.$defineNativeClass('SVGFEComponentTransferElement', {"": ["height>", "width>", "x>", "y>"]
});

$.$defineNativeClass('SVGFECompositeElement', {"": ["height>", "width>", "x>", "y>"]
});

$.$defineNativeClass('SVGFEConvolveMatrixElement', {"": ["height>", "width>", "x>", "y>"]
});

$.$defineNativeClass('SVGFEDiffuseLightingElement', {"": ["height>", "width>", "x>", "y>"]
});

$.$defineNativeClass('SVGFEDisplacementMapElement', {"": ["scale>", "height>", "width>", "x>", "y>"]
});

$.$defineNativeClass('SVGFEDropShadowElement', {"": ["height>", "width>", "x>", "y>"]
});

$.$defineNativeClass('SVGFEFloodElement', {"": ["height>", "width>", "x>", "y>"]
});

$.$defineNativeClass('SVGFEGaussianBlurElement', {"": ["height>", "width>", "x>", "y>"]
});

$.$defineNativeClass('SVGFEImageElement', {"": ["height>", "width>", "x>", "y>", "href>"]
});

$.$defineNativeClass('SVGFEMergeElement', {"": ["height>", "width>", "x>", "y>"]
});

$.$defineNativeClass('SVGFEMorphologyElement', {"": ["height>", "width>", "x>", "y>"]
});

$.$defineNativeClass('SVGFEOffsetElement', {"": ["height>", "width>", "x>", "y>"]
});

$.$defineNativeClass('SVGFEPointLightElement', {"": ["x>", "y>"]
});

$.$defineNativeClass('SVGFESpecularLightingElement', {"": ["height>", "width>", "x>", "y>"]
});

$.$defineNativeClass('SVGFESpotLightElement', {"": ["x>", "y>"]
});

$.$defineNativeClass('SVGFETileElement', {"": ["height>", "width>", "x>", "y>"]
});

$.$defineNativeClass('SVGFETurbulenceElement', {"": ["height>", "width>", "x>", "y>"]
});

$.$defineNativeClass('SVGFilterElement', {"": ["height>", "width>", "x>", "y>", "href>"]
});

$.$defineNativeClass('SVGForeignObjectElement', {"": ["height>", "width>", "x>", "y>"],
 transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) { return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5); }
});

$.$defineNativeClass('SVGGElement', {
 transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) { return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5); }
});

$.$defineNativeClass('SVGGlyphRefElement', {"": ["x=", "y=", "href>"]
});

$.$defineNativeClass('SVGGradientElement', {"": ["href>"]
});

$.$defineNativeClass('SVGImageElement', {"": ["height>", "width>", "x>", "y>", "href>"],
 transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) { return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5); }
});

$.$defineNativeClass('SVGLength', {"": ["value="]
});

$.$defineNativeClass('SVGLengthList', {
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, 'Length');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  var t1 = this.get$_Collections();
  return $.getInterceptor(t1).contains$2(t1, this, element);
},
 forEach$1: function(f) {
  return this.get$_Collections().forEach$2(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return this.get$_Lists().indexOf$4(this, element, start, $.getInterceptor(this).get$length(this));
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.get$length(), 1);
  return this.get$_Lists().lastIndexOf$3(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 clear$0: function() {
  return this.clear();
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGLineElement', {
 transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) { return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5); }
});

$.$defineNativeClass('SVGMPathElement', {"": ["href>"]
});

$.$defineNativeClass('SVGMaskElement', {"": ["height>", "width>", "x>", "y>"]
});

$.$defineNativeClass('SVGMatrix', {
 rotate$1: function(angle) {
  return this.rotate(angle);
},
 scale$1: function(scaleFactor) {
  return this.scale(scaleFactor);
},
 get$scale: function() { return new $.BoundClosure(this, 'scale$1'); },
 translate$2: function(x, y) {
  return this.translate(x,y);
}
});

$.$defineNativeClass('SVGNumber', {"": ["value="]
});

$.$defineNativeClass('SVGNumberList', {
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, 'Number');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  var t1 = this.get$_Collections();
  return $.getInterceptor(t1).contains$2(t1, this, element);
},
 forEach$1: function(f) {
  return this.get$_Collections().forEach$2(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return this.get$_Lists().indexOf$4(this, element, start, $.getInterceptor(this).get$length(this));
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.get$length(), 1);
  return this.get$_Lists().lastIndexOf$3(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 clear$0: function() {
  return this.clear();
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGPathElement', {
 transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) { return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5); }
});

$.$defineNativeClass('SVGPathSegArcAbs', {"": ["angle=", "x=", "y="]
});

$.$defineNativeClass('SVGPathSegArcRel', {"": ["angle=", "x=", "y="]
});

$.$defineNativeClass('SVGPathSegCurvetoCubicAbs', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPathSegCurvetoCubicRel', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPathSegCurvetoCubicSmoothAbs', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPathSegCurvetoCubicSmoothRel', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPathSegCurvetoQuadraticAbs', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPathSegCurvetoQuadraticRel', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPathSegCurvetoQuadraticSmoothAbs', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPathSegCurvetoQuadraticSmoothRel', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPathSegLinetoAbs', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPathSegLinetoHorizontalAbs', {"": ["x="]
});

$.$defineNativeClass('SVGPathSegLinetoHorizontalRel', {"": ["x="]
});

$.$defineNativeClass('SVGPathSegLinetoRel', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPathSegLinetoVerticalAbs', {"": ["y="]
});

$.$defineNativeClass('SVGPathSegLinetoVerticalRel', {"": ["y="]
});

$.$defineNativeClass('SVGPathSegList', {
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, 'PathSeg');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  var t1 = this.get$_Collections();
  return $.getInterceptor(t1).contains$2(t1, this, element);
},
 forEach$1: function(f) {
  return this.get$_Collections().forEach$2(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return this.get$_Lists().indexOf$4(this, element, start, $.getInterceptor(this).get$length(this));
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.get$length(), 1);
  return this.get$_Lists().lastIndexOf$3(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 clear$0: function() {
  return this.clear();
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGPathSegMovetoAbs', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPathSegMovetoRel', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPatternElement', {"": ["height>", "width>", "x>", "y>", "href>"]
});

$.$defineNativeClass('SVGPoint', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPointList', {
 clear$0: function() {
  return this.clear();
}
});

$.$defineNativeClass('SVGPolygonElement', {
 transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) { return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5); }
});

$.$defineNativeClass('SVGPolylineElement', {
 transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) { return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5); }
});

$.$defineNativeClass('SVGRect', {"": ["height=", "width=", "x=", "y="]
});

$.$defineNativeClass('SVGRectElement', {"": ["height>", "width>", "x>", "y>"],
 transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) { return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5); }
});

$.$defineNativeClass('SVGScriptElement', {"": ["href>"]
});

$.$defineNativeClass('SVGStringList', {
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, 'String');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  var t1 = this.get$_Collections();
  return $.getInterceptor(t1).contains$2(t1, this, element);
},
 forEach$1: function(f) {
  return this.get$_Collections().forEach$2(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return this.get$_Lists().indexOf$4(this, element, start, $.getInterceptor(this).get$length(this));
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.get$length(), 1);
  return this.get$_Lists().lastIndexOf$3(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 clear$0: function() {
  return this.clear();
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGStyleElement', {
 disabled$1: function(arg0) { return this.disabled.call$1(arg0); }
});

$.$defineNativeClass('SVGElement', {
 get$id: function() {
  return this.id;
}
});

$.$defineNativeClass('SVGSVGElement', {"": ["height>", "width>", "x>", "y>"]
});

$.$defineNativeClass('SVGSwitchElement', {
 transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) { return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5); }
});

$.$defineNativeClass('SVGTRefElement', {"": ["href>"]
});

$.$defineNativeClass('SVGTextElement', {
 transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) { return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5); }
});

$.$defineNativeClass('SVGTextPathElement', {"": ["href>"]
});

$.$defineNativeClass('SVGTextPositioningElement', {"": ["x>", "y>"],
 rotate$1: function(arg0) { return this.rotate.call$1(arg0); }
});

$.$defineNativeClass('SVGTransform', {"": ["angle>"]
});

$.$defineNativeClass('SVGTransformList', {
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, 'Transform');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  var t1 = this.get$_Collections();
  return $.getInterceptor(t1).contains$2(t1, this, element);
},
 forEach$1: function(f) {
  return this.get$_Collections().forEach$2(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return this.get$_Lists().indexOf$4(this, element, start, $.getInterceptor(this).get$length(this));
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.get$length(), 1);
  return this.get$_Lists().lastIndexOf$3(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 clear$0: function() {
  return this.clear();
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('SVGUseElement', {"": ["height>", "width>", "x>", "y>", "href>"],
 transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) { return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5); }
});

$.$defineNativeClass('SVGViewSpec', {
 transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) { return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5); }
});

$.$defineNativeClass('SVGElementInstanceList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this, 'ElementInstance');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  var t1 = this.get$_Collections();
  return $.getInterceptor(t1).contains$2(t1, this, element);
},
 forEach$1: function(f) {
  return this.get$_Collections().forEach$2(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return this.get$_Lists().indexOf$4(this, element, start, $.getInterceptor(this).get$length(this));
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return this.get$_Lists().lastIndexOf$3(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

// 283 dynamic classes.
// 382 classes
// 34 !leaf
(function() {
  var v0_MouseEvent = 'MouseEvent|WheelEvent', v1_Uint8Array = 'Uint8Array|Uint8ClampedArray', v2_GradientElement = 'SVGGradientElement|SVGLinearGradientElement|SVGRadialGradientElement', v3_TextPositioningElement = 'SVGTextPositioningElement|SVGAltGlyphElement|SVGTRefElement|SVGTSpanElement|SVGTextElement', v4_MediaElement = 'HTMLMediaElement|HTMLAudioElement|HTMLVideoElement', v5_SvgElement = [v2_GradientElement, v3_TextPositioningElement, 'SVGElement|SVGAElement|SVGAltGlyphDefElement|SVGAltGlyphItemElement|SVGAnimationElement|SVGAnimateColorElement|SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGSetElement|SVGCircleElement|SVGClipPathElement|SVGComponentTransferFunctionElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement|SVGCursorElement|SVGDefsElement|SVGDescElement|SVGEllipseElement|SVGFEBlendElement|SVGFEColorMatrixElement|SVGFEComponentTransferElement|SVGFECompositeElement|SVGFEConvolveMatrixElement|SVGFEDiffuseLightingElement|SVGFEDisplacementMapElement|SVGFEDistantLightElement|SVGFEDropShadowElement|SVGFEFloodElement|SVGFEGaussianBlurElement|SVGFEImageElement|SVGFEMergeElement|SVGFEMergeNodeElement|SVGFEMorphologyElement|SVGFEOffsetElement|SVGFEPointLightElement|SVGFESpecularLightingElement|SVGFESpotLightElement|SVGFETileElement|SVGFETurbulenceElement|SVGFilterElement|SVGFontElement|SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement|SVGForeignObjectElement|SVGGElement|SVGGlyphElement|SVGGlyphRefElement|SVGHKernElement|SVGImageElement|SVGLineElement|SVGMPathElement|SVGMarkerElement|SVGMaskElement|SVGMetadataElement|SVGMissingGlyphElement|SVGPathElement|SVGPatternElement|SVGPolygonElement|SVGPolylineElement|SVGRectElement|SVGScriptElement|SVGStopElement|SVGStyleElement|SVGSVGElement|SVGSwitchElement|SVGSymbolElement|SVGTextContentElement|SVGTextPathElement|SVGTitleElement|SVGUseElement|SVGVKernElement|SVGViewElement'].join('|'), v6_CharacterData = 'CharacterData|Comment|Text|CDATASection', v7_Document = 'Document|HTMLDocument|SVGDocument', v8_DocumentFragment = 'DocumentFragment|ShadowRoot', v9_Element = [v4_MediaElement, v5_SvgElement, 'Element|HTMLElement|HTMLAnchorElement|HTMLAppletElement|HTMLAreaElement|HTMLBRElement|HTMLBaseElement|HTMLBaseFontElement|HTMLBodyElement|HTMLButtonElement|HTMLCanvasElement|HTMLContentElement|HTMLDListElement|HTMLDataListElement|HTMLDetailsElement|HTMLDirectoryElement|HTMLDivElement|HTMLEmbedElement|HTMLFieldSetElement|HTMLFontElement|HTMLFormElement|HTMLFrameElement|HTMLFrameSetElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLIFrameElement|HTMLImageElement|HTMLInputElement|HTMLKeygenElement|HTMLLIElement|HTMLLabelElement|HTMLLegendElement|HTMLLinkElement|HTMLMapElement|HTMLMarqueeElement|HTMLMenuElement|HTMLMetaElement|HTMLMeterElement|HTMLModElement|HTMLOListElement|HTMLObjectElement|HTMLOptGroupElement|HTMLOptionElement|HTMLOutputElement|HTMLParagraphElement|HTMLParamElement|HTMLPreElement|HTMLProgressElement|HTMLQuoteElement|HTMLScriptElement|HTMLSelectElement|HTMLShadowElement|HTMLSourceElement|HTMLSpanElement|HTMLStyleElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableElement|HTMLTableRowElement|HTMLTableSectionElement|HTMLTextAreaElement|HTMLTitleElement|HTMLTrackElement|HTMLUListElement|HTMLUnknownElement'].join('|'), v10_AbstractWorker = 'AbstractWorker|SharedWorker|Worker', v11_IDBRequest = 'IDBRequest|IDBOpenDBRequest|IDBVersionChangeRequest', v12_MediaStream = 'MediaStream|LocalMediaStream', v13_Node = [v6_CharacterData, v7_Document, v8_DocumentFragment, v9_Element, 'Node|Attr|DocumentType|EntityReference|Notation|ProcessingInstruction'].join('|'), v14_WorkerContext = 'WorkerContext|DedicatedWorkerContext|SharedWorkerContext';
  $.dynamicSetMetadata([['StyleSheet', 'StyleSheet|CSSStyleSheet'], ['MouseEvent', v0_MouseEvent], ['UIEvent', [v0_MouseEvent, 'UIEvent|CompositionEvent|KeyboardEvent|TextEvent|TouchEvent|SVGZoomEvent'].join('|')], ['Uint8Array', v1_Uint8Array], ['WorkerContext', v14_WorkerContext], ['CSSValueList', 'CSSValueList|WebKitCSSTransformValue|WebKitCSSFilterValue'], ['NodeList', 'NodeList|RadioNodeList'], ['AbstractWorker', v10_AbstractWorker], ['ArrayBufferView', [v1_Uint8Array, 'ArrayBufferView|DataView|Float32Array|Float64Array|Int16Array|Int32Array|Int8Array|Uint16Array|Uint32Array'].join('|')], ['AudioNode', 'AudioNode|AnalyserNode|AudioDestinationNode|AudioSourceNode|AudioBufferSourceNode|MediaElementAudioSourceNode|MediaStreamAudioSourceNode|OscillatorNode|BiquadFilterNode|ChannelMergerNode|ChannelSplitterNode|ConvolverNode|DelayNode|DynamicsCompressorNode|GainNode|PannerNode|ScriptProcessorNode|WaveShaperNode'], ['AudioParam', 'AudioParam|AudioGain'], ['Blob', 'Blob|File'], ['CharacterData', v6_CharacterData], ['DOMTokenList', 'DOMTokenList|DOMSettableTokenList'], ['Document', v7_Document], ['DocumentFragment', v8_DocumentFragment], ['HTMLMediaElement', v4_MediaElement], ['SVGGradientElement', v2_GradientElement], ['SVGTextPositioningElement', v3_TextPositioningElement], ['SVGElement', v5_SvgElement], ['Element', v9_Element], ['Entry', 'Entry|DirectoryEntry|FileEntry'], ['EntrySync', 'EntrySync|DirectoryEntrySync|FileEntrySync'], ['IDBRequest', v11_IDBRequest], ['MediaStream', v12_MediaStream], ['Node', v13_Node], ['EventTarget', [v10_AbstractWorker, v11_IDBRequest, v12_MediaStream, v13_Node, v14_WorkerContext, 'EventTarget|AudioContext|BatteryManager|DOMApplicationCache|EventSource|FileReader|FileWriter|XMLHttpRequest|XMLHttpRequestUpload|IDBDatabase|IDBTransaction|DOMWindow|MediaController|MediaSource|MediaStreamTrack|MediaStreamTrackList|MessagePort|Notification|PeerConnection00|Performance|RTCDataChannel|RTCPeerConnection|SourceBufferList|SpeechRecognition|TextTrack|TextTrackCue|TextTrackList|WebKitNamedFlow|WebSocket|SVGElementInstance'].join('|')], ['HTMLCollection', 'HTMLCollection|HTMLOptionsCollection'], ['IDBCursor', 'IDBCursor|IDBCursorWithValue']]);
})();

var $globalThis = $;
var $globalState;
var $globals;
var $isWorker = false;
var $supportsWorkers = false;
var $thisScriptUrl;
function $static_init(){};

function $initGlobals(context) {
  context.isolateStatics = new Isolate();
}
function $setGlobals(context) {
  $ = context.isolateStatics;
  $globalThis = $;
}
$.main.call$0 = $.main

//
// BEGIN invoke [main].
//
if (typeof document !== 'undefined' && document.readyState != 'complete') {
  document.addEventListener('readystatechange', function () {
    if (document.readyState == 'complete') {
      if (typeof dartMainRunner === 'function') {
        dartMainRunner(function() { $.startRootIsolate($.main); });
      } else {
        $.startRootIsolate($.main);
      }
    }
  }, false);
} else {
  if (typeof dartMainRunner === 'function') {
    dartMainRunner(function() { $.startRootIsolate($.main); });
  } else {
    $.startRootIsolate($.main);
  }
}
//
// END invoke [main].
//

function init() {
Isolate.$isolateProperties = {};
Isolate.$defineClass = function(cls, fields, prototype) {
  var generateGetterSetter =   function(field, prototype) {
    var len = field.length;
    var lastCharCode = field.charCodeAt(len - 1);
    var needsAccessor = (lastCharCode & 63) >= 60;
    if (needsAccessor) {
      var needsGetter = (lastCharCode & 3) > 0;
      var needsSetter = (lastCharCode & 2) == 0;
      var renaming = (lastCharCode & 64) != 0;
      var accessorName = field = field.substring(0, len - 1);
      if (renaming) {
        var divider = field.indexOf(":");
        accessorName = field.substring(0, divider);
        field = field.substring(divider + 1);
      }
      if (needsGetter) {
        var getterString = "return this." + field + ";";
        prototype["get$" + accessorName] = new Function(getterString);
      }
      if (needsSetter) {
        var setterString = "this." + field + " = v;";
        prototype["set$" + accessorName] = new Function("v", setterString);
      }
    }
    return field;
  };
  var constructor;
  if (typeof fields == 'function') {
    constructor = fields;
  } else {
    var str = "function " + cls + "(";
    var body = "";
    for (var i = 0; i < fields.length; i++) {
      if (i != 0) str += ", ";
      var field = fields[i];
      field = generateGetterSetter(field, prototype);
      str += field;
      body += "this." + field + " = " + field + ";\n";
    }
    str += ") {" + body + "}\n";
    str += "return " + cls + ";";
    constructor = new Function(str)();
  }
  constructor.prototype = prototype;
  constructor.builtin$cls = cls;
  return constructor;
};
var supportsProto = false;
var tmp = Isolate.$defineClass('c', ['f?'], {}).prototype;
if (tmp.__proto__) {
  tmp.__proto__ = {};
  if (typeof tmp.get$f !== 'undefined') supportsProto = true;
}
Isolate.$pendingClasses = {};
Isolate.$finishClasses = function(collectedClasses) {
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  for (var cls in collectedClasses) {
    if (hasOwnProperty.call(collectedClasses, cls)) {
      var desc = collectedClasses[cls];
      Isolate.$isolateProperties[cls] = Isolate.$defineClass(cls, desc[''] || [], desc);
      if (desc['super'] !== "") Isolate.$pendingClasses[cls] = desc['super'];
    }
  }
  var pendingClasses = Isolate.$pendingClasses;
  Isolate.$pendingClasses = {};
  var finishedClasses = {};
  function finishClass(cls) {
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    if (hasOwnProperty.call(finishedClasses, cls)) return;
    finishedClasses[cls] = true;
    var superclass = pendingClasses[cls];
    if (!superclass) return;
    finishClass(superclass);
    var constructor = Isolate.$isolateProperties[cls];
    var superConstructor = Isolate.$isolateProperties[superclass];
    var prototype = constructor.prototype;
    if (supportsProto) {
      prototype.__proto__ = superConstructor.prototype;
      prototype.constructor = constructor;
    } else {
      function tmp() {};
      tmp.prototype = superConstructor.prototype;
      var newPrototype = new tmp();
      constructor.prototype = newPrototype;
      newPrototype.constructor = constructor;
      for (var member in prototype) {
        if (member == '' || member == 'super') continue;
        if (hasOwnProperty.call(prototype, member)) {
          newPrototype[member] = prototype[member];
        }
      }
    }
  }
  for (var cls in pendingClasses) finishClass(cls);
};
Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
  var getter = new Function("{ return $." + fieldName + ";}");
  var sentinelUndefined = {};
  var sentinelInProgress = {};
  prototype[fieldName] = sentinelUndefined;
  prototype[getterName] = function() {
    var result = $[fieldName];
    try {
      if (result === sentinelUndefined) {
        $[fieldName] = sentinelInProgress;
        try {
          result = $[fieldName] = lazyValue();
        } catch (e) {
          if ($[fieldName] === sentinelInProgress) {
            $[fieldName] = null;
          }
          throw e;
        }
      } else if (result === sentinelInProgress) {
        $.throwCyclicInit(staticName);
      }
      return result;
    } finally {
      $[getterName] = getter;
    }
  };
};
Isolate.$finishIsolateConstructor = function(oldIsolate) {
  var isolateProperties = oldIsolate.$isolateProperties;
  var isolatePrototype = oldIsolate.prototype;
  var str = "{\n";
  str += "var properties = Isolate.$isolateProperties;\n";
  for (var staticName in isolateProperties) {
    if (Object.prototype.hasOwnProperty.call(isolateProperties, staticName)) {
      str += "this." + staticName + "= properties." + staticName + ";\n";
    }
  }
  str += "}\n";
  var newIsolate = new Function(str);
  newIsolate.prototype = isolatePrototype;
  isolatePrototype.constructor = newIsolate;
  newIsolate.$isolateProperties = isolateProperties;
  return newIsolate;
};
}

//@ sourceMappingURL=multiverse.dart.js.map